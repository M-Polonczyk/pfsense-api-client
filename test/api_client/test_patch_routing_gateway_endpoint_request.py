# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pfsense_api_client.models.patch_routing_gateway_endpoint_request import PatchRoutingGatewayEndpointRequest

class TestPatchRoutingGatewayEndpointRequest(unittest.TestCase):
    """PatchRoutingGatewayEndpointRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PatchRoutingGatewayEndpointRequest:
        """Test PatchRoutingGatewayEndpointRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PatchRoutingGatewayEndpointRequest`
        """
        model = PatchRoutingGatewayEndpointRequest()
        if include_optional:
            return PatchRoutingGatewayEndpointRequest(
                name = '',
                descr = '',
                disabled = True,
                ipprotocol = 'inet',
                interface = '',
                gateway = '',
                monitor_disable = True,
                monitor = '',
                action_disable = True,
                force_down = True,
                dpinger_dont_add_static_route = True,
                gw_down_kill_states = '',
                nonlocalgateway = True,
                weight = 1,
                data_payload = 1,
                latencylow = 1,
                latencyhigh = 2,
                losslow = 1,
                losshigh = 2,
                interval = 1,
                loss_interval = 1,
                time_period = 1,
                alert_interval = 1,
                id = 56
            )
        else:
            return PatchRoutingGatewayEndpointRequest(
                id = 56,
        )
        """

    def testPatchRoutingGatewayEndpointRequest(self):
        """Test PatchRoutingGatewayEndpointRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
