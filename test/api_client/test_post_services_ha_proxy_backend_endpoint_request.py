# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pfsense_api_client.models.post_services_ha_proxy_backend_endpoint_request import PostServicesHAProxyBackendEndpointRequest

class TestPostServicesHAProxyBackendEndpointRequest(unittest.TestCase):
    """PostServicesHAProxyBackendEndpointRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PostServicesHAProxyBackendEndpointRequest:
        """Test PostServicesHAProxyBackendEndpointRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PostServicesHAProxyBackendEndpointRequest`
        """
        model = PostServicesHAProxyBackendEndpointRequest()
        if include_optional:
            return PostServicesHAProxyBackendEndpointRequest(
                name = '',
                servers = [
                    null
                    ],
                balance = '',
                balance_urilen = 0,
                balance_uridepth = 0,
                balance_uriwhole = True,
                acls = [
                    null
                    ],
                actions = [
                    null
                    ],
                connection_timeout = 0,
                server_timeout = 0,
                retries = 0,
                check_type = 'none',
                checkinter = 0,
                log_health_checks = True,
                httpcheck_method = 'OPTIONS',
                monitor_uri = '/',
                monitor_httpversion = 'HTTP/1.0',
                monitor_username = '',
                monitor_domain = '',
                agent_checks = True,
                agent_port = '',
                agent_inter = 0,
                persist_cookie_enabled = True,
                persist_cookie_name = '',
                persist_cookie_mode = 'passive',
                persist_cookie_cachable = True,
                persist_cookie_postonly = True,
                persist_cookie_httponly = True,
                persist_cookie_secure = True,
                haproxy_cookie_maxidle = 0,
                haproxy_cookie_maxlife = 0,
                haproxy_cookie_domains = [
                    ''
                    ],
                haproxy_cookie_dynamic_cookie_key = '',
                persist_sticky_type = 'none',
                persist_stick_expire = '',
                persist_stick_tablesize = '',
                persist_stick_cookiename = '',
                persist_stick_length = 0,
                email_level = '',
                email_to = '',
                stats_enabled = True,
                stats_uri = '',
                stats_scope = [
                    ''
                    ],
                stats_realm = '',
                stats_username = '',
                stats_password = '',
                stats_admin = '',
                stats_node = '',
                stats_desc = '',
                stats_refresh = 0,
                strict_transport_security = 1,
                errorfiles = [
                    null
                    ],
                cookie_attribute_secure = True,
                advanced = '',
                advanced_backend = '',
                transparent_clientip = True,
                transparent_interface = ''
            )
        else:
            return PostServicesHAProxyBackendEndpointRequest(
                name = '',
                agent_port = '',
                persist_cookie_name = '',
        )
        """

    def testPostServicesHAProxyBackendEndpointRequest(self):
        """Test PostServicesHAProxyBackendEndpointRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
