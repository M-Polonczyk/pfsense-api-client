# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pfsense_api_client.models.auth_server import AuthServer

class TestAuthServer(unittest.TestCase):
    """AuthServer unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AuthServer:
        """Test AuthServer
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AuthServer`
        """
        model = AuthServer()
        if include_optional:
            return AuthServer(
                refid = '67ed081aa92b7',
                type = 'ldap',
                name = '',
                host = '',
                ldap_port = '',
                ldap_urltype = 'Standard TCP',
                ldap_protver = 2,
                ldap_timeout = 1,
                ldap_caref = 'global',
                ldap_scope = 'one',
                ldap_basedn = '',
                ldap_authcn = '',
                ldap_extended_enabled = True,
                ldap_extended_query = '',
                ldap_binddn = '',
                ldap_bindpw = '',
                ldap_attr_user = 'cn',
                ldap_attr_group = 'cn',
                ldap_attr_member = 'member',
                ldap_rfc2307 = True,
                ldap_rfc2307_userdn = True,
                ldap_attr_groupobj = 'posixGroup',
                ldap_pam_groupdn = '',
                ldap_utf8 = True,
                ldap_nostrip_at = True,
                ldap_allow_unauthenticated = True,
                radius_secret = '',
                radius_auth_port = '1812',
                radius_acct_port = '1813',
                radius_protocol = 'MSCHAPv2',
                radius_timeout = 1,
                radius_nasip_attribute = ''
            )
        else:
            return AuthServer(
        )
        """

    def testAuthServer(self):
        """Test AuthServer"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
