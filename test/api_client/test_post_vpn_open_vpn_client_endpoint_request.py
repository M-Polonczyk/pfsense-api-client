# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pfsense_api_client.models.post_vpn_open_vpn_client_endpoint_request import PostVPNOpenVPNClientEndpointRequest

class TestPostVPNOpenVPNClientEndpointRequest(unittest.TestCase):
    """PostVPNOpenVPNClientEndpointRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PostVPNOpenVPNClientEndpointRequest:
        """Test PostVPNOpenVPNClientEndpointRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PostVPNOpenVPNClientEndpointRequest`
        """
        model = PostVPNOpenVPNClientEndpointRequest()
        if include_optional:
            return PostVPNOpenVPNClientEndpointRequest(
                vpnid = 0,
                vpnif = '',
                description = '',
                disable = True,
                mode = 'p2p_tls',
                dev_mode = 'tun',
                protocol = 'UDP4',
                interface = '',
                server_addr = '',
                server_port = '',
                local_port = '',
                proxy_addr = '',
                proxy_port = '',
                proxy_authtype = 'none',
                proxy_user = '',
                proxy_passwd = '',
                auth_user = '',
                auth_pass = '',
                auth_retry_none = True,
                tls = '',
                tls_type = 'auth',
                tlsauth_keydir = 'default',
                caref = '',
                certref = '',
                data_ciphers = [
                    ''
                    ],
                data_ciphers_fallback = '',
                digest = '',
                remote_cert_tls = True,
                tunnel_network = '',
                tunnel_networkv6 = '',
                remote_network = [
                    ''
                    ],
                remote_networkv6 = [
                    ''
                    ],
                use_shaper = 100,
                allow_compression = 'no',
                passtos = True,
                route_no_pull = True,
                route_no_exec = True,
                dns_add = True,
                topology = 'subnet',
                inactive_seconds = 0,
                ping_method = 'keepalive',
                keepalive_interval = 0,
                keepalive_timeout = 0,
                ping_seconds = 0,
                ping_action = 'ping_restart',
                ping_action_seconds = 0,
                custom_options = [
                    ''
                    ],
                udp_fast_io = True,
                exit_notify = 'none',
                sndrcvbuf = 65536,
                create_gw = 'both',
                verbosity_level = 0
            )
        else:
            return PostVPNOpenVPNClientEndpointRequest(
                mode = 'p2p_tls',
                dev_mode = 'tun',
                protocol = 'UDP4',
                interface = '',
                server_addr = '',
                server_port = '',
                proxy_user = '',
                proxy_passwd = '',
                tls_type = 'auth',
                caref = '',
                data_ciphers = [
                    ''
                    ],
                data_ciphers_fallback = '',
                digest = '',
        )
        """

    def testPostVPNOpenVPNClientEndpointRequest(self):
        """Test PostVPNOpenVPNClientEndpointRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
