# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictBytes, StrictInt, StrictStr, field_validator
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated
from pfsense_api_client.models.get_system_crl_endpoint200_response import GetSystemCRLEndpoint200Response
from pfsense_api_client.models.get_system_crl_revoked_certificate_endpoint200_response import GetSystemCRLRevokedCertificateEndpoint200Response
from pfsense_api_client.models.get_system_crls_endpoint200_response import GetSystemCRLsEndpoint200Response
from pfsense_api_client.models.get_system_certificate_authorities_endpoint200_response import GetSystemCertificateAuthoritiesEndpoint200Response
from pfsense_api_client.models.get_system_certificate_authority_endpoint200_response import GetSystemCertificateAuthorityEndpoint200Response
from pfsense_api_client.models.get_system_certificate_endpoint200_response import GetSystemCertificateEndpoint200Response
from pfsense_api_client.models.get_system_certificates_endpoint200_response import GetSystemCertificatesEndpoint200Response
from pfsense_api_client.models.get_system_console_endpoint200_response import GetSystemConsoleEndpoint200Response
from pfsense_api_client.models.get_system_dns_endpoint200_response import GetSystemDNSEndpoint200Response
from pfsense_api_client.models.get_system_hostname_endpoint200_response import GetSystemHostnameEndpoint200Response
from pfsense_api_client.models.get_system_notifications_email_settings_endpoint200_response import GetSystemNotificationsEmailSettingsEndpoint200Response
from pfsense_api_client.models.get_system_package_available_endpoint200_response import GetSystemPackageAvailableEndpoint200Response
from pfsense_api_client.models.get_system_package_endpoint200_response import GetSystemPackageEndpoint200Response
from pfsense_api_client.models.get_system_packages_endpoint200_response import GetSystemPackagesEndpoint200Response
from pfsense_api_client.models.get_system_restapi_access_list_endpoint200_response import GetSystemRESTAPIAccessListEndpoint200Response
from pfsense_api_client.models.get_system_restapi_access_list_entry_endpoint200_response import GetSystemRESTAPIAccessListEntryEndpoint200Response
from pfsense_api_client.models.get_system_restapi_settings_endpoint200_response import GetSystemRESTAPISettingsEndpoint200Response
from pfsense_api_client.models.get_system_restapi_version_endpoint200_response import GetSystemRESTAPIVersionEndpoint200Response
from pfsense_api_client.models.get_system_tunable_endpoint200_response import GetSystemTunableEndpoint200Response
from pfsense_api_client.models.get_system_tunables_endpoint200_response import GetSystemTunablesEndpoint200Response
from pfsense_api_client.models.get_system_version_endpoint200_response import GetSystemVersionEndpoint200Response
from pfsense_api_client.models.get_system_web_gui_settings_endpoint200_response import GetSystemWebGUISettingsEndpoint200Response
from pfsense_api_client.models.patch_system_crl_endpoint_request import PatchSystemCRLEndpointRequest
from pfsense_api_client.models.patch_system_crl_revoked_certificate_endpoint_request import PatchSystemCRLRevokedCertificateEndpointRequest
from pfsense_api_client.models.patch_system_certificate_authority_endpoint_request import PatchSystemCertificateAuthorityEndpointRequest
from pfsense_api_client.models.patch_system_certificate_endpoint_request import PatchSystemCertificateEndpointRequest
from pfsense_api_client.models.patch_system_console_endpoint_request import PatchSystemConsoleEndpointRequest
from pfsense_api_client.models.patch_system_dns_endpoint_request import PatchSystemDNSEndpointRequest
from pfsense_api_client.models.patch_system_hostname_endpoint_request import PatchSystemHostnameEndpointRequest
from pfsense_api_client.models.patch_system_notifications_email_settings_endpoint_request import PatchSystemNotificationsEmailSettingsEndpointRequest
from pfsense_api_client.models.patch_system_restapi_access_list_entry_endpoint_request import PatchSystemRESTAPIAccessListEntryEndpointRequest
from pfsense_api_client.models.patch_system_restapi_settings_endpoint_request import PatchSystemRESTAPISettingsEndpointRequest
from pfsense_api_client.models.patch_system_restapi_version_endpoint_request import PatchSystemRESTAPIVersionEndpointRequest
from pfsense_api_client.models.patch_system_tunable_endpoint_request import PatchSystemTunableEndpointRequest
from pfsense_api_client.models.patch_system_web_gui_settings_endpoint_request import PatchSystemWebGUISettingsEndpointRequest
from pfsense_api_client.models.post_system_crl_endpoint_request import PostSystemCRLEndpointRequest
from pfsense_api_client.models.post_system_crl_revoked_certificate_endpoint_request import PostSystemCRLRevokedCertificateEndpointRequest
from pfsense_api_client.models.post_system_certificate_authority_endpoint_request import PostSystemCertificateAuthorityEndpointRequest
from pfsense_api_client.models.post_system_certificate_authority_generate_endpoint200_response import PostSystemCertificateAuthorityGenerateEndpoint200Response
from pfsense_api_client.models.post_system_certificate_authority_generate_endpoint_request import PostSystemCertificateAuthorityGenerateEndpointRequest
from pfsense_api_client.models.post_system_certificate_authority_renew_endpoint200_response import PostSystemCertificateAuthorityRenewEndpoint200Response
from pfsense_api_client.models.post_system_certificate_authority_renew_endpoint_request import PostSystemCertificateAuthorityRenewEndpointRequest
from pfsense_api_client.models.post_system_certificate_endpoint_request import PostSystemCertificateEndpointRequest
from pfsense_api_client.models.post_system_certificate_generate_endpoint200_response import PostSystemCertificateGenerateEndpoint200Response
from pfsense_api_client.models.post_system_certificate_generate_endpoint_request import PostSystemCertificateGenerateEndpointRequest
from pfsense_api_client.models.post_system_certificate_pkcs12_export_endpoint_request import PostSystemCertificatePKCS12ExportEndpointRequest
from pfsense_api_client.models.post_system_certificate_renew_endpoint200_response import PostSystemCertificateRenewEndpoint200Response
from pfsense_api_client.models.post_system_certificate_renew_endpoint_request import PostSystemCertificateRenewEndpointRequest
from pfsense_api_client.models.post_system_certificate_signing_request_endpoint200_response import PostSystemCertificateSigningRequestEndpoint200Response
from pfsense_api_client.models.post_system_certificate_signing_request_endpoint_request import PostSystemCertificateSigningRequestEndpointRequest
from pfsense_api_client.models.post_system_certificate_signing_request_sign_endpoint200_response import PostSystemCertificateSigningRequestSignEndpoint200Response
from pfsense_api_client.models.post_system_certificate_signing_request_sign_endpoint_request import PostSystemCertificateSigningRequestSignEndpointRequest
from pfsense_api_client.models.post_system_package_endpoint_request import PostSystemPackageEndpointRequest
from pfsense_api_client.models.post_system_restapi_settings_sync_endpoint200_response import PostSystemRESTAPISettingsSyncEndpoint200Response
from pfsense_api_client.models.post_system_restapi_settings_sync_endpoint_request import PostSystemRESTAPISettingsSyncEndpointRequest
from pfsense_api_client.models.post_system_tunable_endpoint_request import PostSystemTunableEndpointRequest
from pfsense_api_client.models.put_system_restapi_access_list_endpoint_request_inner import PutSystemRESTAPIAccessListEndpointRequestInner

from pfsense_api_client.api_client import ApiClient, RequestSerialized
from pfsense_api_client.api_response import ApiResponse
from pfsense_api_client.rest import RESTResponseType


class SYSTEMApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_system_certificate_authorities_endpoint(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to delete at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemCertificateAuthoritiesEndpoint200Response:
        """delete_system_certificate_authorities_endpoint

        <h3>Description:</h3>Deletes multiple existing Certificate Authorities using a query.<br><br>WARNING: This will delete all objects that match the query, use with caution.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: CertificateAuthority<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authorities-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param limit: The maximum number of objects to delete at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_certificate_authorities_endpoint_serialize(
            limit=limit,
            offset=offset,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateAuthoritiesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_system_certificate_authorities_endpoint_with_http_info(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to delete at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemCertificateAuthoritiesEndpoint200Response]:
        """delete_system_certificate_authorities_endpoint

        <h3>Description:</h3>Deletes multiple existing Certificate Authorities using a query.<br><br>WARNING: This will delete all objects that match the query, use with caution.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: CertificateAuthority<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authorities-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param limit: The maximum number of objects to delete at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_certificate_authorities_endpoint_serialize(
            limit=limit,
            offset=offset,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateAuthoritiesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_system_certificate_authorities_endpoint_without_preload_content(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to delete at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_system_certificate_authorities_endpoint

        <h3>Description:</h3>Deletes multiple existing Certificate Authorities using a query.<br><br>WARNING: This will delete all objects that match the query, use with caution.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: CertificateAuthority<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authorities-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param limit: The maximum number of objects to delete at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_certificate_authorities_endpoint_serialize(
            limit=limit,
            offset=offset,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateAuthoritiesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_system_certificate_authorities_endpoint_serialize(
        self,
        limit,
        offset,
        query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v2/system/certificate_authorities',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_system_certificate_authority_endpoint(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemCertificateAuthorityEndpoint200Response:
        """delete_system_certificate_authority_endpoint

        <h3>Description:</h3>Deletes an existing Certificate Authority.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateAuthority<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authority-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_certificate_authority_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateAuthorityEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_system_certificate_authority_endpoint_with_http_info(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemCertificateAuthorityEndpoint200Response]:
        """delete_system_certificate_authority_endpoint

        <h3>Description:</h3>Deletes an existing Certificate Authority.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateAuthority<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authority-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_certificate_authority_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateAuthorityEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_system_certificate_authority_endpoint_without_preload_content(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_system_certificate_authority_endpoint

        <h3>Description:</h3>Deletes an existing Certificate Authority.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateAuthority<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authority-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_certificate_authority_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateAuthorityEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_system_certificate_authority_endpoint_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v2/system/certificate_authority',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_system_certificate_endpoint(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemCertificateEndpoint200Response:
        """delete_system_certificate_endpoint

        <h3>Description:</h3>Deletes an existing Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: Certificate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_certificate_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_system_certificate_endpoint_with_http_info(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemCertificateEndpoint200Response]:
        """delete_system_certificate_endpoint

        <h3>Description:</h3>Deletes an existing Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: Certificate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_certificate_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_system_certificate_endpoint_without_preload_content(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_system_certificate_endpoint

        <h3>Description:</h3>Deletes an existing Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: Certificate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_certificate_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_system_certificate_endpoint_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v2/system/certificate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_system_certificates_endpoint(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to delete at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemCertificatesEndpoint200Response:
        """delete_system_certificates_endpoint

        <h3>Description:</h3>Deletes multiple existing Certificates using a query.<br><br>WARNING: This will delete all objects that match the query, use with caution.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: Certificate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificates-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param limit: The maximum number of objects to delete at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_certificates_endpoint_serialize(
            limit=limit,
            offset=offset,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificatesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_system_certificates_endpoint_with_http_info(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to delete at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemCertificatesEndpoint200Response]:
        """delete_system_certificates_endpoint

        <h3>Description:</h3>Deletes multiple existing Certificates using a query.<br><br>WARNING: This will delete all objects that match the query, use with caution.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: Certificate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificates-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param limit: The maximum number of objects to delete at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_certificates_endpoint_serialize(
            limit=limit,
            offset=offset,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificatesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_system_certificates_endpoint_without_preload_content(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to delete at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_system_certificates_endpoint

        <h3>Description:</h3>Deletes multiple existing Certificates using a query.<br><br>WARNING: This will delete all objects that match the query, use with caution.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: Certificate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificates-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param limit: The maximum number of objects to delete at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_certificates_endpoint_serialize(
            limit=limit,
            offset=offset,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificatesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_system_certificates_endpoint_serialize(
        self,
        limit,
        offset,
        query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v2/system/certificates',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_system_crl_endpoint(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemCRLEndpoint200Response:
        """delete_system_crl_endpoint

        <h3>Description:</h3>Deletes an existing Certificate Revocation List.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationList<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_crl_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_system_crl_endpoint_with_http_info(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemCRLEndpoint200Response]:
        """delete_system_crl_endpoint

        <h3>Description:</h3>Deletes an existing Certificate Revocation List.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationList<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_crl_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_system_crl_endpoint_without_preload_content(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_system_crl_endpoint

        <h3>Description:</h3>Deletes an existing Certificate Revocation List.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationList<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_crl_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_system_crl_endpoint_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v2/system/crl',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_system_crl_revoked_certificate_endpoint(
        self,
        parent_id: Annotated[Any, Field(description="The ID of the parent this object is nested under.")],
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemCRLRevokedCertificateEndpoint200Response:
        """delete_system_crl_revoked_certificate_endpoint

        <h3>Description:</h3>Deletes an existing Certificate Revocation List Revoked Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationListRevokedCertificate<br>**Parent model**: CertificateRevocationList<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-revoked-certificate-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param parent_id: The ID of the parent this object is nested under. (required)
        :type parent_id: DeleteAuthKeyEndpointIdParameter
        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_crl_revoked_certificate_endpoint_serialize(
            parent_id=parent_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLRevokedCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_system_crl_revoked_certificate_endpoint_with_http_info(
        self,
        parent_id: Annotated[Any, Field(description="The ID of the parent this object is nested under.")],
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemCRLRevokedCertificateEndpoint200Response]:
        """delete_system_crl_revoked_certificate_endpoint

        <h3>Description:</h3>Deletes an existing Certificate Revocation List Revoked Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationListRevokedCertificate<br>**Parent model**: CertificateRevocationList<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-revoked-certificate-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param parent_id: The ID of the parent this object is nested under. (required)
        :type parent_id: DeleteAuthKeyEndpointIdParameter
        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_crl_revoked_certificate_endpoint_serialize(
            parent_id=parent_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLRevokedCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_system_crl_revoked_certificate_endpoint_without_preload_content(
        self,
        parent_id: Annotated[Any, Field(description="The ID of the parent this object is nested under.")],
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_system_crl_revoked_certificate_endpoint

        <h3>Description:</h3>Deletes an existing Certificate Revocation List Revoked Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationListRevokedCertificate<br>**Parent model**: CertificateRevocationList<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-revoked-certificate-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param parent_id: The ID of the parent this object is nested under. (required)
        :type parent_id: DeleteAuthKeyEndpointIdParameter
        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_crl_revoked_certificate_endpoint_serialize(
            parent_id=parent_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLRevokedCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_system_crl_revoked_certificate_endpoint_serialize(
        self,
        parent_id,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if parent_id is not None:
            
            _query_params.append(('parent_id', parent_id))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v2/system/crl/revoked_certificate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_system_crls_endpoint(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to delete at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemCRLsEndpoint200Response:
        """delete_system_crls_endpoint

        <h3>Description:</h3>Deletes multiple existing Certificate Revocation Lists using a query.<br><br>WARNING: This will delete all objects that match the query, use with caution.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: CertificateRevocationList<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crls-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param limit: The maximum number of objects to delete at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_crls_endpoint_serialize(
            limit=limit,
            offset=offset,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_system_crls_endpoint_with_http_info(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to delete at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemCRLsEndpoint200Response]:
        """delete_system_crls_endpoint

        <h3>Description:</h3>Deletes multiple existing Certificate Revocation Lists using a query.<br><br>WARNING: This will delete all objects that match the query, use with caution.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: CertificateRevocationList<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crls-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param limit: The maximum number of objects to delete at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_crls_endpoint_serialize(
            limit=limit,
            offset=offset,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_system_crls_endpoint_without_preload_content(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to delete at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_system_crls_endpoint

        <h3>Description:</h3>Deletes multiple existing Certificate Revocation Lists using a query.<br><br>WARNING: This will delete all objects that match the query, use with caution.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: CertificateRevocationList<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crls-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param limit: The maximum number of objects to delete at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_crls_endpoint_serialize(
            limit=limit,
            offset=offset,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_system_crls_endpoint_serialize(
        self,
        limit,
        offset,
        query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v2/system/crls',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_system_package_endpoint(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemPackageEndpoint200Response:
        """delete_system_package_endpoint

        <h3>Description:</h3>Deletes an existing Package.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: Package<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-package-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_package_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemPackageEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_system_package_endpoint_with_http_info(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemPackageEndpoint200Response]:
        """delete_system_package_endpoint

        <h3>Description:</h3>Deletes an existing Package.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: Package<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-package-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_package_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemPackageEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_system_package_endpoint_without_preload_content(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_system_package_endpoint

        <h3>Description:</h3>Deletes an existing Package.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: Package<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-package-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_package_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemPackageEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_system_package_endpoint_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v2/system/package',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_system_packages_endpoint(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to delete at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemPackagesEndpoint200Response:
        """delete_system_packages_endpoint

        <h3>Description:</h3>Deletes multiple existing Packages using a query.<br><br>WARNING: This will delete all objects that match the query, use with caution.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: Package<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-packages-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param limit: The maximum number of objects to delete at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_packages_endpoint_serialize(
            limit=limit,
            offset=offset,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemPackagesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_system_packages_endpoint_with_http_info(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to delete at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemPackagesEndpoint200Response]:
        """delete_system_packages_endpoint

        <h3>Description:</h3>Deletes multiple existing Packages using a query.<br><br>WARNING: This will delete all objects that match the query, use with caution.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: Package<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-packages-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param limit: The maximum number of objects to delete at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_packages_endpoint_serialize(
            limit=limit,
            offset=offset,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemPackagesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_system_packages_endpoint_without_preload_content(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to delete at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_system_packages_endpoint

        <h3>Description:</h3>Deletes multiple existing Packages using a query.<br><br>WARNING: This will delete all objects that match the query, use with caution.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: Package<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-packages-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param limit: The maximum number of objects to delete at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_packages_endpoint_serialize(
            limit=limit,
            offset=offset,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemPackagesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_system_packages_endpoint_serialize(
        self,
        limit,
        offset,
        query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v2/system/packages',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_system_restapi_access_list_endpoint(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to delete at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemRESTAPIAccessListEndpoint200Response:
        """delete_system_restapi_access_list_endpoint

        <h3>Description:</h3>Deletes multiple existing REST API Access List Entries using a query.<br><br>WARNING: This will delete all objects that match the query, use with caution.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: RESTAPIAccessListEntry<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-access-list-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param limit: The maximum number of objects to delete at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_restapi_access_list_endpoint_serialize(
            limit=limit,
            offset=offset,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIAccessListEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_system_restapi_access_list_endpoint_with_http_info(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to delete at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemRESTAPIAccessListEndpoint200Response]:
        """delete_system_restapi_access_list_endpoint

        <h3>Description:</h3>Deletes multiple existing REST API Access List Entries using a query.<br><br>WARNING: This will delete all objects that match the query, use with caution.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: RESTAPIAccessListEntry<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-access-list-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param limit: The maximum number of objects to delete at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_restapi_access_list_endpoint_serialize(
            limit=limit,
            offset=offset,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIAccessListEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_system_restapi_access_list_endpoint_without_preload_content(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to delete at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_system_restapi_access_list_endpoint

        <h3>Description:</h3>Deletes multiple existing REST API Access List Entries using a query.<br><br>WARNING: This will delete all objects that match the query, use with caution.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: RESTAPIAccessListEntry<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-access-list-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param limit: The maximum number of objects to delete at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_restapi_access_list_endpoint_serialize(
            limit=limit,
            offset=offset,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIAccessListEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_system_restapi_access_list_endpoint_serialize(
        self,
        limit,
        offset,
        query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v2/system/restapi/access_list',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_system_restapi_access_list_entry_endpoint(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemRESTAPIAccessListEntryEndpoint200Response:
        """delete_system_restapi_access_list_entry_endpoint

        <h3>Description:</h3>Deletes an existing RESTAPI Access List Entry.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIAccessListEntry<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-access-list-entry-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_restapi_access_list_entry_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIAccessListEntryEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_system_restapi_access_list_entry_endpoint_with_http_info(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemRESTAPIAccessListEntryEndpoint200Response]:
        """delete_system_restapi_access_list_entry_endpoint

        <h3>Description:</h3>Deletes an existing RESTAPI Access List Entry.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIAccessListEntry<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-access-list-entry-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_restapi_access_list_entry_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIAccessListEntryEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_system_restapi_access_list_entry_endpoint_without_preload_content(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_system_restapi_access_list_entry_endpoint

        <h3>Description:</h3>Deletes an existing RESTAPI Access List Entry.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIAccessListEntry<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-access-list-entry-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_restapi_access_list_entry_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIAccessListEntryEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_system_restapi_access_list_entry_endpoint_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v2/system/restapi/access_list/entry',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_system_tunable_endpoint(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        apply: Annotated[Optional[StrictBool], Field(description="Apply this deletion immediately.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemTunableEndpoint200Response:
        """delete_system_tunable_endpoint

        <h3>Description:</h3>Deletes an existing System Tunable.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemTunable<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-tunable-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param apply: Apply this deletion immediately.
        :type apply: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_tunable_endpoint_serialize(
            id=id,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemTunableEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_system_tunable_endpoint_with_http_info(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        apply: Annotated[Optional[StrictBool], Field(description="Apply this deletion immediately.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemTunableEndpoint200Response]:
        """delete_system_tunable_endpoint

        <h3>Description:</h3>Deletes an existing System Tunable.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemTunable<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-tunable-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param apply: Apply this deletion immediately.
        :type apply: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_tunable_endpoint_serialize(
            id=id,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemTunableEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_system_tunable_endpoint_without_preload_content(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        apply: Annotated[Optional[StrictBool], Field(description="Apply this deletion immediately.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_system_tunable_endpoint

        <h3>Description:</h3>Deletes an existing System Tunable.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemTunable<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-tunable-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param apply: Apply this deletion immediately.
        :type apply: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_tunable_endpoint_serialize(
            id=id,
            apply=apply,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemTunableEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_system_tunable_endpoint_serialize(
        self,
        id,
        apply,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if apply is not None:
            
            _query_params.append(('apply', apply))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v2/system/tunable',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_system_tunables_endpoint(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to delete at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemTunablesEndpoint200Response:
        """delete_system_tunables_endpoint

        <h3>Description:</h3>Deletes multiple existing System Tunables using a query.<br><br>WARNING: This will delete all objects that match the query, use with caution.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: SystemTunable<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-tunables-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param limit: The maximum number of objects to delete at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_tunables_endpoint_serialize(
            limit=limit,
            offset=offset,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemTunablesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_system_tunables_endpoint_with_http_info(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to delete at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemTunablesEndpoint200Response]:
        """delete_system_tunables_endpoint

        <h3>Description:</h3>Deletes multiple existing System Tunables using a query.<br><br>WARNING: This will delete all objects that match the query, use with caution.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: SystemTunable<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-tunables-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param limit: The maximum number of objects to delete at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_tunables_endpoint_serialize(
            limit=limit,
            offset=offset,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemTunablesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_system_tunables_endpoint_without_preload_content(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to delete at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_system_tunables_endpoint

        <h3>Description:</h3>Deletes multiple existing System Tunables using a query.<br><br>WARNING: This will delete all objects that match the query, use with caution.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: SystemTunable<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-tunables-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param limit: The maximum number of objects to delete at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_system_tunables_endpoint_serialize(
            limit=limit,
            offset=offset,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemTunablesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_system_tunables_endpoint_serialize(
        self,
        limit,
        offset,
        query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v2/system/tunables',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_certificate_authorities_endpoint(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemCertificateAuthoritiesEndpoint200Response:
        """get_system_certificate_authorities_endpoint

        <h3>Description:</h3>Reads all existing Certificate Authorities.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: CertificateAuthority<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authorities-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_certificate_authorities_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateAuthoritiesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_certificate_authorities_endpoint_with_http_info(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemCertificateAuthoritiesEndpoint200Response]:
        """get_system_certificate_authorities_endpoint

        <h3>Description:</h3>Reads all existing Certificate Authorities.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: CertificateAuthority<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authorities-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_certificate_authorities_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateAuthoritiesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_certificate_authorities_endpoint_without_preload_content(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_system_certificate_authorities_endpoint

        <h3>Description:</h3>Reads all existing Certificate Authorities.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: CertificateAuthority<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authorities-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_certificate_authorities_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateAuthoritiesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_certificate_authorities_endpoint_serialize(
        self,
        limit,
        offset,
        sort_by,
        sort_order,
        sort_flags,
        query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort_by': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if sort_flags is not None:
            
            _query_params.append(('sort_flags', sort_flags))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/system/certificate_authorities',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_certificate_authority_endpoint(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemCertificateAuthorityEndpoint200Response:
        """get_system_certificate_authority_endpoint

        <h3>Description:</h3>Reads an existing Certificate Authority.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateAuthority<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authority-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_certificate_authority_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateAuthorityEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_certificate_authority_endpoint_with_http_info(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemCertificateAuthorityEndpoint200Response]:
        """get_system_certificate_authority_endpoint

        <h3>Description:</h3>Reads an existing Certificate Authority.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateAuthority<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authority-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_certificate_authority_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateAuthorityEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_certificate_authority_endpoint_without_preload_content(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_system_certificate_authority_endpoint

        <h3>Description:</h3>Reads an existing Certificate Authority.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateAuthority<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authority-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_certificate_authority_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateAuthorityEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_certificate_authority_endpoint_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/system/certificate_authority',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_certificate_endpoint(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemCertificateEndpoint200Response:
        """get_system_certificate_endpoint

        <h3>Description:</h3>Reads an existing Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: Certificate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_certificate_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_certificate_endpoint_with_http_info(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemCertificateEndpoint200Response]:
        """get_system_certificate_endpoint

        <h3>Description:</h3>Reads an existing Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: Certificate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_certificate_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_certificate_endpoint_without_preload_content(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_system_certificate_endpoint

        <h3>Description:</h3>Reads an existing Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: Certificate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_certificate_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_certificate_endpoint_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/system/certificate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_certificates_endpoint(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemCertificatesEndpoint200Response:
        """get_system_certificates_endpoint

        <h3>Description:</h3>Reads all existing Certificates.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: Certificate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificates-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_certificates_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificatesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_certificates_endpoint_with_http_info(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemCertificatesEndpoint200Response]:
        """get_system_certificates_endpoint

        <h3>Description:</h3>Reads all existing Certificates.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: Certificate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificates-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_certificates_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificatesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_certificates_endpoint_without_preload_content(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_system_certificates_endpoint

        <h3>Description:</h3>Reads all existing Certificates.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: Certificate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificates-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_certificates_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificatesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_certificates_endpoint_serialize(
        self,
        limit,
        offset,
        sort_by,
        sort_order,
        sort_flags,
        query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort_by': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if sort_flags is not None:
            
            _query_params.append(('sort_flags', sort_flags))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/system/certificates',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_console_endpoint(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemConsoleEndpoint200Response:
        """get_system_console_endpoint

        <h3>Description:</h3>Reads current System Console.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemConsole<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-console-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_console_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemConsoleEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_console_endpoint_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemConsoleEndpoint200Response]:
        """get_system_console_endpoint

        <h3>Description:</h3>Reads current System Console.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemConsole<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-console-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_console_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemConsoleEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_console_endpoint_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_system_console_endpoint

        <h3>Description:</h3>Reads current System Console.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemConsole<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-console-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_console_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemConsoleEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_console_endpoint_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/system/console',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_crl_endpoint(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemCRLEndpoint200Response:
        """get_system_crl_endpoint

        <h3>Description:</h3>Reads an existing Certificate Revocation List.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationList<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_crl_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_crl_endpoint_with_http_info(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemCRLEndpoint200Response]:
        """get_system_crl_endpoint

        <h3>Description:</h3>Reads an existing Certificate Revocation List.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationList<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_crl_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_crl_endpoint_without_preload_content(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_system_crl_endpoint

        <h3>Description:</h3>Reads an existing Certificate Revocation List.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationList<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_crl_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_crl_endpoint_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/system/crl',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_crl_revoked_certificate_endpoint(
        self,
        parent_id: Annotated[Any, Field(description="The ID of the parent this object is nested under.")],
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemCRLRevokedCertificateEndpoint200Response:
        """get_system_crl_revoked_certificate_endpoint

        <h3>Description:</h3>Reads an existing Certificate Revocation List Revoked Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationListRevokedCertificate<br>**Parent model**: CertificateRevocationList<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-revoked-certificate-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param parent_id: The ID of the parent this object is nested under. (required)
        :type parent_id: DeleteAuthKeyEndpointIdParameter
        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_crl_revoked_certificate_endpoint_serialize(
            parent_id=parent_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLRevokedCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_crl_revoked_certificate_endpoint_with_http_info(
        self,
        parent_id: Annotated[Any, Field(description="The ID of the parent this object is nested under.")],
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemCRLRevokedCertificateEndpoint200Response]:
        """get_system_crl_revoked_certificate_endpoint

        <h3>Description:</h3>Reads an existing Certificate Revocation List Revoked Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationListRevokedCertificate<br>**Parent model**: CertificateRevocationList<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-revoked-certificate-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param parent_id: The ID of the parent this object is nested under. (required)
        :type parent_id: DeleteAuthKeyEndpointIdParameter
        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_crl_revoked_certificate_endpoint_serialize(
            parent_id=parent_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLRevokedCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_crl_revoked_certificate_endpoint_without_preload_content(
        self,
        parent_id: Annotated[Any, Field(description="The ID of the parent this object is nested under.")],
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_system_crl_revoked_certificate_endpoint

        <h3>Description:</h3>Reads an existing Certificate Revocation List Revoked Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationListRevokedCertificate<br>**Parent model**: CertificateRevocationList<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-revoked-certificate-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param parent_id: The ID of the parent this object is nested under. (required)
        :type parent_id: DeleteAuthKeyEndpointIdParameter
        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_crl_revoked_certificate_endpoint_serialize(
            parent_id=parent_id,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLRevokedCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_crl_revoked_certificate_endpoint_serialize(
        self,
        parent_id,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if parent_id is not None:
            
            _query_params.append(('parent_id', parent_id))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/system/crl/revoked_certificate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_crls_endpoint(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemCRLsEndpoint200Response:
        """get_system_crls_endpoint

        <h3>Description:</h3>Reads all existing Certificate Revocation Lists.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: CertificateRevocationList<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crls-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_crls_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_crls_endpoint_with_http_info(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemCRLsEndpoint200Response]:
        """get_system_crls_endpoint

        <h3>Description:</h3>Reads all existing Certificate Revocation Lists.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: CertificateRevocationList<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crls-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_crls_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_crls_endpoint_without_preload_content(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_system_crls_endpoint

        <h3>Description:</h3>Reads all existing Certificate Revocation Lists.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: CertificateRevocationList<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crls-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_crls_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_crls_endpoint_serialize(
        self,
        limit,
        offset,
        sort_by,
        sort_order,
        sort_flags,
        query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort_by': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if sort_flags is not None:
            
            _query_params.append(('sort_flags', sort_flags))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/system/crls',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_dns_endpoint(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemDNSEndpoint200Response:
        """get_system_dns_endpoint

        <h3>Description:</h3>Reads the current system DNS settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemDNS<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-dns-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_dns_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemDNSEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_dns_endpoint_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemDNSEndpoint200Response]:
        """get_system_dns_endpoint

        <h3>Description:</h3>Reads the current system DNS settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemDNS<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-dns-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_dns_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemDNSEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_dns_endpoint_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_system_dns_endpoint

        <h3>Description:</h3>Reads the current system DNS settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemDNS<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-dns-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_dns_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemDNSEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_dns_endpoint_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/system/dns',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_hostname_endpoint(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemHostnameEndpoint200Response:
        """get_system_hostname_endpoint

        <h3>Description:</h3>Reads the current system hostname.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemHostname<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-hostname-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_hostname_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemHostnameEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_hostname_endpoint_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemHostnameEndpoint200Response]:
        """get_system_hostname_endpoint

        <h3>Description:</h3>Reads the current system hostname.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemHostname<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-hostname-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_hostname_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemHostnameEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_hostname_endpoint_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_system_hostname_endpoint

        <h3>Description:</h3>Reads the current system hostname.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemHostname<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-hostname-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_hostname_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemHostnameEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_hostname_endpoint_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/system/hostname',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_notifications_email_settings_endpoint(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemNotificationsEmailSettingsEndpoint200Response:
        """get_system_notifications_email_settings_endpoint

        <h3>Description:</h3>Reads current Email Notification Settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: EmailNotificationSettings<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-notifications-email-settings-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_notifications_email_settings_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemNotificationsEmailSettingsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_notifications_email_settings_endpoint_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemNotificationsEmailSettingsEndpoint200Response]:
        """get_system_notifications_email_settings_endpoint

        <h3>Description:</h3>Reads current Email Notification Settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: EmailNotificationSettings<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-notifications-email-settings-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_notifications_email_settings_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemNotificationsEmailSettingsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_notifications_email_settings_endpoint_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_system_notifications_email_settings_endpoint

        <h3>Description:</h3>Reads current Email Notification Settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: EmailNotificationSettings<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-notifications-email-settings-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_notifications_email_settings_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemNotificationsEmailSettingsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_notifications_email_settings_endpoint_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/system/notifications/email_settings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_package_available_endpoint(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemPackageAvailableEndpoint200Response:
        """get_system_package_available_endpoint

        <h3>Description:</h3>Reads all existing Available Packages.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: AvailablePackage<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-package-available-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: AvailablePackageCache

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_package_available_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemPackageAvailableEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_package_available_endpoint_with_http_info(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemPackageAvailableEndpoint200Response]:
        """get_system_package_available_endpoint

        <h3>Description:</h3>Reads all existing Available Packages.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: AvailablePackage<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-package-available-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: AvailablePackageCache

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_package_available_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemPackageAvailableEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_package_available_endpoint_without_preload_content(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_system_package_available_endpoint

        <h3>Description:</h3>Reads all existing Available Packages.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: AvailablePackage<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-package-available-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: AvailablePackageCache

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_package_available_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemPackageAvailableEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_package_available_endpoint_serialize(
        self,
        limit,
        offset,
        sort_by,
        sort_order,
        sort_flags,
        query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort_by': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if sort_flags is not None:
            
            _query_params.append(('sort_flags', sort_flags))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/system/package/available',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_package_endpoint(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemPackageEndpoint200Response:
        """get_system_package_endpoint

        <h3>Description:</h3>Reads an installed Package.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: Package<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-package-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_package_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemPackageEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_package_endpoint_with_http_info(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemPackageEndpoint200Response]:
        """get_system_package_endpoint

        <h3>Description:</h3>Reads an installed Package.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: Package<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-package-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_package_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemPackageEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_package_endpoint_without_preload_content(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_system_package_endpoint

        <h3>Description:</h3>Reads an installed Package.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: Package<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-package-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_package_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemPackageEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_package_endpoint_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/system/package',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_packages_endpoint(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemPackagesEndpoint200Response:
        """get_system_packages_endpoint

        <h3>Description:</h3>Reads all installed Packages.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: Package<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-packages-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_packages_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemPackagesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_packages_endpoint_with_http_info(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemPackagesEndpoint200Response]:
        """get_system_packages_endpoint

        <h3>Description:</h3>Reads all installed Packages.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: Package<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-packages-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_packages_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemPackagesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_packages_endpoint_without_preload_content(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_system_packages_endpoint

        <h3>Description:</h3>Reads all installed Packages.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: Package<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-packages-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_packages_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemPackagesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_packages_endpoint_serialize(
        self,
        limit,
        offset,
        sort_by,
        sort_order,
        sort_flags,
        query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort_by': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if sort_flags is not None:
            
            _query_params.append(('sort_flags', sort_flags))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/system/packages',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_restapi_access_list_endpoint(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemRESTAPIAccessListEndpoint200Response:
        """get_system_restapi_access_list_endpoint

        <h3>Description:</h3>Reads all existing REST API Access List Entries.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: RESTAPIAccessListEntry<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-access-list-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_restapi_access_list_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIAccessListEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_restapi_access_list_endpoint_with_http_info(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemRESTAPIAccessListEndpoint200Response]:
        """get_system_restapi_access_list_endpoint

        <h3>Description:</h3>Reads all existing REST API Access List Entries.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: RESTAPIAccessListEntry<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-access-list-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_restapi_access_list_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIAccessListEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_restapi_access_list_endpoint_without_preload_content(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_system_restapi_access_list_endpoint

        <h3>Description:</h3>Reads all existing REST API Access List Entries.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: RESTAPIAccessListEntry<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-access-list-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_restapi_access_list_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIAccessListEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_restapi_access_list_endpoint_serialize(
        self,
        limit,
        offset,
        sort_by,
        sort_order,
        sort_flags,
        query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort_by': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if sort_flags is not None:
            
            _query_params.append(('sort_flags', sort_flags))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/system/restapi/access_list',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_restapi_access_list_entry_endpoint(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemRESTAPIAccessListEntryEndpoint200Response:
        """get_system_restapi_access_list_entry_endpoint

        <h3>Description:</h3>Reads an existing RESTAPI Access List Entry.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIAccessListEntry<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-access-list-entry-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_restapi_access_list_entry_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIAccessListEntryEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_restapi_access_list_entry_endpoint_with_http_info(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemRESTAPIAccessListEntryEndpoint200Response]:
        """get_system_restapi_access_list_entry_endpoint

        <h3>Description:</h3>Reads an existing RESTAPI Access List Entry.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIAccessListEntry<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-access-list-entry-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_restapi_access_list_entry_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIAccessListEntryEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_restapi_access_list_entry_endpoint_without_preload_content(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_system_restapi_access_list_entry_endpoint

        <h3>Description:</h3>Reads an existing RESTAPI Access List Entry.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIAccessListEntry<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-access-list-entry-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_restapi_access_list_entry_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIAccessListEntryEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_restapi_access_list_entry_endpoint_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/system/restapi/access_list/entry',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_restapi_settings_endpoint(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemRESTAPISettingsEndpoint200Response:
        """get_system_restapi_settings_endpoint

        <h3>Description:</h3>Reads current REST API Settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPISettings<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-settings-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_restapi_settings_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPISettingsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_restapi_settings_endpoint_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemRESTAPISettingsEndpoint200Response]:
        """get_system_restapi_settings_endpoint

        <h3>Description:</h3>Reads current REST API Settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPISettings<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-settings-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_restapi_settings_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPISettingsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_restapi_settings_endpoint_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_system_restapi_settings_endpoint

        <h3>Description:</h3>Reads current REST API Settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPISettings<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-settings-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_restapi_settings_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPISettingsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_restapi_settings_endpoint_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/system/restapi/settings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_restapi_version_endpoint(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemRESTAPIVersionEndpoint200Response:
        """get_system_restapi_version_endpoint

        <h3>Description:</h3>Reads current REST API Version.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIVersion<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-version-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: RESTAPIVersionReleasesCache

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_restapi_version_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIVersionEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_restapi_version_endpoint_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemRESTAPIVersionEndpoint200Response]:
        """get_system_restapi_version_endpoint

        <h3>Description:</h3>Reads current REST API Version.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIVersion<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-version-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: RESTAPIVersionReleasesCache

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_restapi_version_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIVersionEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_restapi_version_endpoint_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_system_restapi_version_endpoint

        <h3>Description:</h3>Reads current REST API Version.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIVersion<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-version-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: RESTAPIVersionReleasesCache

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_restapi_version_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIVersionEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_restapi_version_endpoint_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/system/restapi/version',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_tunable_endpoint(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemTunableEndpoint200Response:
        """get_system_tunable_endpoint

        <h3>Description:</h3>Reads an existing System Tunable.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemTunable<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-tunable-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_tunable_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemTunableEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_tunable_endpoint_with_http_info(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemTunableEndpoint200Response]:
        """get_system_tunable_endpoint

        <h3>Description:</h3>Reads an existing System Tunable.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemTunable<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-tunable-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_tunable_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemTunableEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_tunable_endpoint_without_preload_content(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_system_tunable_endpoint

        <h3>Description:</h3>Reads an existing System Tunable.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemTunable<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-tunable-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_tunable_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemTunableEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_tunable_endpoint_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/system/tunable',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_tunables_endpoint(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemTunablesEndpoint200Response:
        """get_system_tunables_endpoint

        <h3>Description:</h3>Reads all existing System Tunables.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: SystemTunable<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-tunables-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_tunables_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemTunablesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_tunables_endpoint_with_http_info(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemTunablesEndpoint200Response]:
        """get_system_tunables_endpoint

        <h3>Description:</h3>Reads all existing System Tunables.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: SystemTunable<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-tunables-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_tunables_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemTunablesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_tunables_endpoint_without_preload_content(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_system_tunables_endpoint

        <h3>Description:</h3>Reads all existing System Tunables.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: SystemTunable<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-tunables-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_tunables_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemTunablesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_tunables_endpoint_serialize(
        self,
        limit,
        offset,
        sort_by,
        sort_order,
        sort_flags,
        query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort_by': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if sort_flags is not None:
            
            _query_params.append(('sort_flags', sort_flags))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/system/tunables',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_version_endpoint(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemVersionEndpoint200Response:
        """get_system_version_endpoint

        <h3>Description:</h3>Reads current System Version.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemVersion<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-version-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_version_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemVersionEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_version_endpoint_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemVersionEndpoint200Response]:
        """get_system_version_endpoint

        <h3>Description:</h3>Reads current System Version.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemVersion<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-version-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_version_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemVersionEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_version_endpoint_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_system_version_endpoint

        <h3>Description:</h3>Reads current System Version.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemVersion<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-version-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_version_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemVersionEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_version_endpoint_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/system/version',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_system_web_gui_settings_endpoint(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemWebGUISettingsEndpoint200Response:
        """get_system_web_gui_settings_endpoint

        <h3>Description:</h3>Reads current Web GUI Settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: WebGUISettings<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-webgui-settings-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_web_gui_settings_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemWebGUISettingsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_system_web_gui_settings_endpoint_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemWebGUISettingsEndpoint200Response]:
        """get_system_web_gui_settings_endpoint

        <h3>Description:</h3>Reads current Web GUI Settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: WebGUISettings<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-webgui-settings-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_web_gui_settings_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemWebGUISettingsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_system_web_gui_settings_endpoint_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_system_web_gui_settings_endpoint

        <h3>Description:</h3>Reads current Web GUI Settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: WebGUISettings<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-webgui-settings-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_system_web_gui_settings_endpoint_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemWebGUISettingsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_system_web_gui_settings_endpoint_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/system/webgui/settings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def patch_system_certificate_authority_endpoint(
        self,
        patch_system_certificate_authority_endpoint_request: Optional[PatchSystemCertificateAuthorityEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemCertificateAuthorityEndpoint200Response:
        """patch_system_certificate_authority_endpoint

        <h3>Description:</h3>Updates an existing Certificate Authority.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateAuthority<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authority-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_certificate_authority_endpoint_request:
        :type patch_system_certificate_authority_endpoint_request: PatchSystemCertificateAuthorityEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_certificate_authority_endpoint_serialize(
            patch_system_certificate_authority_endpoint_request=patch_system_certificate_authority_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateAuthorityEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def patch_system_certificate_authority_endpoint_with_http_info(
        self,
        patch_system_certificate_authority_endpoint_request: Optional[PatchSystemCertificateAuthorityEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemCertificateAuthorityEndpoint200Response]:
        """patch_system_certificate_authority_endpoint

        <h3>Description:</h3>Updates an existing Certificate Authority.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateAuthority<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authority-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_certificate_authority_endpoint_request:
        :type patch_system_certificate_authority_endpoint_request: PatchSystemCertificateAuthorityEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_certificate_authority_endpoint_serialize(
            patch_system_certificate_authority_endpoint_request=patch_system_certificate_authority_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateAuthorityEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def patch_system_certificate_authority_endpoint_without_preload_content(
        self,
        patch_system_certificate_authority_endpoint_request: Optional[PatchSystemCertificateAuthorityEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """patch_system_certificate_authority_endpoint

        <h3>Description:</h3>Updates an existing Certificate Authority.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateAuthority<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authority-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_certificate_authority_endpoint_request:
        :type patch_system_certificate_authority_endpoint_request: PatchSystemCertificateAuthorityEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_certificate_authority_endpoint_serialize(
            patch_system_certificate_authority_endpoint_request=patch_system_certificate_authority_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateAuthorityEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _patch_system_certificate_authority_endpoint_serialize(
        self,
        patch_system_certificate_authority_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if patch_system_certificate_authority_endpoint_request is not None:
            _body_params = patch_system_certificate_authority_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/v2/system/certificate_authority',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def patch_system_certificate_endpoint(
        self,
        patch_system_certificate_endpoint_request: Optional[PatchSystemCertificateEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemCertificateEndpoint200Response:
        """patch_system_certificate_endpoint

        <h3>Description:</h3>Updates an existing Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: Certificate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param patch_system_certificate_endpoint_request:
        :type patch_system_certificate_endpoint_request: PatchSystemCertificateEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_certificate_endpoint_serialize(
            patch_system_certificate_endpoint_request=patch_system_certificate_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def patch_system_certificate_endpoint_with_http_info(
        self,
        patch_system_certificate_endpoint_request: Optional[PatchSystemCertificateEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemCertificateEndpoint200Response]:
        """patch_system_certificate_endpoint

        <h3>Description:</h3>Updates an existing Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: Certificate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param patch_system_certificate_endpoint_request:
        :type patch_system_certificate_endpoint_request: PatchSystemCertificateEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_certificate_endpoint_serialize(
            patch_system_certificate_endpoint_request=patch_system_certificate_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def patch_system_certificate_endpoint_without_preload_content(
        self,
        patch_system_certificate_endpoint_request: Optional[PatchSystemCertificateEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """patch_system_certificate_endpoint

        <h3>Description:</h3>Updates an existing Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: Certificate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param patch_system_certificate_endpoint_request:
        :type patch_system_certificate_endpoint_request: PatchSystemCertificateEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_certificate_endpoint_serialize(
            patch_system_certificate_endpoint_request=patch_system_certificate_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _patch_system_certificate_endpoint_serialize(
        self,
        patch_system_certificate_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if patch_system_certificate_endpoint_request is not None:
            _body_params = patch_system_certificate_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/v2/system/certificate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def patch_system_console_endpoint(
        self,
        patch_system_console_endpoint_request: Optional[PatchSystemConsoleEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemConsoleEndpoint200Response:
        """patch_system_console_endpoint

        <h3>Description:</h3>Updates current System Console.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemConsole<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-console-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_console_endpoint_request:
        :type patch_system_console_endpoint_request: PatchSystemConsoleEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_console_endpoint_serialize(
            patch_system_console_endpoint_request=patch_system_console_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemConsoleEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def patch_system_console_endpoint_with_http_info(
        self,
        patch_system_console_endpoint_request: Optional[PatchSystemConsoleEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemConsoleEndpoint200Response]:
        """patch_system_console_endpoint

        <h3>Description:</h3>Updates current System Console.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemConsole<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-console-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_console_endpoint_request:
        :type patch_system_console_endpoint_request: PatchSystemConsoleEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_console_endpoint_serialize(
            patch_system_console_endpoint_request=patch_system_console_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemConsoleEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def patch_system_console_endpoint_without_preload_content(
        self,
        patch_system_console_endpoint_request: Optional[PatchSystemConsoleEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """patch_system_console_endpoint

        <h3>Description:</h3>Updates current System Console.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemConsole<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-console-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_console_endpoint_request:
        :type patch_system_console_endpoint_request: PatchSystemConsoleEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_console_endpoint_serialize(
            patch_system_console_endpoint_request=patch_system_console_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemConsoleEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _patch_system_console_endpoint_serialize(
        self,
        patch_system_console_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if patch_system_console_endpoint_request is not None:
            _body_params = patch_system_console_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/v2/system/console',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def patch_system_crl_endpoint(
        self,
        patch_system_crl_endpoint_request: Optional[PatchSystemCRLEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemCRLEndpoint200Response:
        """patch_system_crl_endpoint

        <h3>Description:</h3>Updates an existing Certificate Revocation List.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationList<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_crl_endpoint_request:
        :type patch_system_crl_endpoint_request: PatchSystemCRLEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_crl_endpoint_serialize(
            patch_system_crl_endpoint_request=patch_system_crl_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def patch_system_crl_endpoint_with_http_info(
        self,
        patch_system_crl_endpoint_request: Optional[PatchSystemCRLEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemCRLEndpoint200Response]:
        """patch_system_crl_endpoint

        <h3>Description:</h3>Updates an existing Certificate Revocation List.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationList<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_crl_endpoint_request:
        :type patch_system_crl_endpoint_request: PatchSystemCRLEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_crl_endpoint_serialize(
            patch_system_crl_endpoint_request=patch_system_crl_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def patch_system_crl_endpoint_without_preload_content(
        self,
        patch_system_crl_endpoint_request: Optional[PatchSystemCRLEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """patch_system_crl_endpoint

        <h3>Description:</h3>Updates an existing Certificate Revocation List.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationList<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_crl_endpoint_request:
        :type patch_system_crl_endpoint_request: PatchSystemCRLEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_crl_endpoint_serialize(
            patch_system_crl_endpoint_request=patch_system_crl_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _patch_system_crl_endpoint_serialize(
        self,
        patch_system_crl_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if patch_system_crl_endpoint_request is not None:
            _body_params = patch_system_crl_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/v2/system/crl',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def patch_system_crl_revoked_certificate_endpoint(
        self,
        patch_system_crl_revoked_certificate_endpoint_request: Optional[PatchSystemCRLRevokedCertificateEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemCRLRevokedCertificateEndpoint200Response:
        """patch_system_crl_revoked_certificate_endpoint

        <h3>Description:</h3>Updates an existing Certificate Revocation List Revoked Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationListRevokedCertificate<br>**Parent model**: CertificateRevocationList<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-revoked-certificate-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_crl_revoked_certificate_endpoint_request:
        :type patch_system_crl_revoked_certificate_endpoint_request: PatchSystemCRLRevokedCertificateEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_crl_revoked_certificate_endpoint_serialize(
            patch_system_crl_revoked_certificate_endpoint_request=patch_system_crl_revoked_certificate_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLRevokedCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def patch_system_crl_revoked_certificate_endpoint_with_http_info(
        self,
        patch_system_crl_revoked_certificate_endpoint_request: Optional[PatchSystemCRLRevokedCertificateEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemCRLRevokedCertificateEndpoint200Response]:
        """patch_system_crl_revoked_certificate_endpoint

        <h3>Description:</h3>Updates an existing Certificate Revocation List Revoked Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationListRevokedCertificate<br>**Parent model**: CertificateRevocationList<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-revoked-certificate-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_crl_revoked_certificate_endpoint_request:
        :type patch_system_crl_revoked_certificate_endpoint_request: PatchSystemCRLRevokedCertificateEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_crl_revoked_certificate_endpoint_serialize(
            patch_system_crl_revoked_certificate_endpoint_request=patch_system_crl_revoked_certificate_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLRevokedCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def patch_system_crl_revoked_certificate_endpoint_without_preload_content(
        self,
        patch_system_crl_revoked_certificate_endpoint_request: Optional[PatchSystemCRLRevokedCertificateEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """patch_system_crl_revoked_certificate_endpoint

        <h3>Description:</h3>Updates an existing Certificate Revocation List Revoked Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationListRevokedCertificate<br>**Parent model**: CertificateRevocationList<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-revoked-certificate-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_crl_revoked_certificate_endpoint_request:
        :type patch_system_crl_revoked_certificate_endpoint_request: PatchSystemCRLRevokedCertificateEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_crl_revoked_certificate_endpoint_serialize(
            patch_system_crl_revoked_certificate_endpoint_request=patch_system_crl_revoked_certificate_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLRevokedCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _patch_system_crl_revoked_certificate_endpoint_serialize(
        self,
        patch_system_crl_revoked_certificate_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if patch_system_crl_revoked_certificate_endpoint_request is not None:
            _body_params = patch_system_crl_revoked_certificate_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/v2/system/crl/revoked_certificate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def patch_system_dns_endpoint(
        self,
        patch_system_dns_endpoint_request: Optional[PatchSystemDNSEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemDNSEndpoint200Response:
        """patch_system_dns_endpoint

        <h3>Description:</h3>Updates the current system DNS settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemDNS<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-dns-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_dns_endpoint_request:
        :type patch_system_dns_endpoint_request: PatchSystemDNSEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_dns_endpoint_serialize(
            patch_system_dns_endpoint_request=patch_system_dns_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemDNSEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def patch_system_dns_endpoint_with_http_info(
        self,
        patch_system_dns_endpoint_request: Optional[PatchSystemDNSEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemDNSEndpoint200Response]:
        """patch_system_dns_endpoint

        <h3>Description:</h3>Updates the current system DNS settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemDNS<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-dns-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_dns_endpoint_request:
        :type patch_system_dns_endpoint_request: PatchSystemDNSEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_dns_endpoint_serialize(
            patch_system_dns_endpoint_request=patch_system_dns_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemDNSEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def patch_system_dns_endpoint_without_preload_content(
        self,
        patch_system_dns_endpoint_request: Optional[PatchSystemDNSEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """patch_system_dns_endpoint

        <h3>Description:</h3>Updates the current system DNS settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemDNS<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-dns-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_dns_endpoint_request:
        :type patch_system_dns_endpoint_request: PatchSystemDNSEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_dns_endpoint_serialize(
            patch_system_dns_endpoint_request=patch_system_dns_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemDNSEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _patch_system_dns_endpoint_serialize(
        self,
        patch_system_dns_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if patch_system_dns_endpoint_request is not None:
            _body_params = patch_system_dns_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/v2/system/dns',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def patch_system_hostname_endpoint(
        self,
        patch_system_hostname_endpoint_request: Optional[PatchSystemHostnameEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemHostnameEndpoint200Response:
        """patch_system_hostname_endpoint

        <h3>Description:</h3>Updates the system hostname.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemHostname<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-hostname-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_hostname_endpoint_request:
        :type patch_system_hostname_endpoint_request: PatchSystemHostnameEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_hostname_endpoint_serialize(
            patch_system_hostname_endpoint_request=patch_system_hostname_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemHostnameEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def patch_system_hostname_endpoint_with_http_info(
        self,
        patch_system_hostname_endpoint_request: Optional[PatchSystemHostnameEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemHostnameEndpoint200Response]:
        """patch_system_hostname_endpoint

        <h3>Description:</h3>Updates the system hostname.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemHostname<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-hostname-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_hostname_endpoint_request:
        :type patch_system_hostname_endpoint_request: PatchSystemHostnameEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_hostname_endpoint_serialize(
            patch_system_hostname_endpoint_request=patch_system_hostname_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemHostnameEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def patch_system_hostname_endpoint_without_preload_content(
        self,
        patch_system_hostname_endpoint_request: Optional[PatchSystemHostnameEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """patch_system_hostname_endpoint

        <h3>Description:</h3>Updates the system hostname.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemHostname<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-hostname-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_hostname_endpoint_request:
        :type patch_system_hostname_endpoint_request: PatchSystemHostnameEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_hostname_endpoint_serialize(
            patch_system_hostname_endpoint_request=patch_system_hostname_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemHostnameEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _patch_system_hostname_endpoint_serialize(
        self,
        patch_system_hostname_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if patch_system_hostname_endpoint_request is not None:
            _body_params = patch_system_hostname_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/v2/system/hostname',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def patch_system_notifications_email_settings_endpoint(
        self,
        patch_system_notifications_email_settings_endpoint_request: Optional[PatchSystemNotificationsEmailSettingsEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemNotificationsEmailSettingsEndpoint200Response:
        """patch_system_notifications_email_settings_endpoint

        <h3>Description:</h3>Updates current Email Notification Settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: EmailNotificationSettings<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-notifications-email-settings-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param patch_system_notifications_email_settings_endpoint_request:
        :type patch_system_notifications_email_settings_endpoint_request: PatchSystemNotificationsEmailSettingsEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_notifications_email_settings_endpoint_serialize(
            patch_system_notifications_email_settings_endpoint_request=patch_system_notifications_email_settings_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemNotificationsEmailSettingsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def patch_system_notifications_email_settings_endpoint_with_http_info(
        self,
        patch_system_notifications_email_settings_endpoint_request: Optional[PatchSystemNotificationsEmailSettingsEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemNotificationsEmailSettingsEndpoint200Response]:
        """patch_system_notifications_email_settings_endpoint

        <h3>Description:</h3>Updates current Email Notification Settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: EmailNotificationSettings<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-notifications-email-settings-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param patch_system_notifications_email_settings_endpoint_request:
        :type patch_system_notifications_email_settings_endpoint_request: PatchSystemNotificationsEmailSettingsEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_notifications_email_settings_endpoint_serialize(
            patch_system_notifications_email_settings_endpoint_request=patch_system_notifications_email_settings_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemNotificationsEmailSettingsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def patch_system_notifications_email_settings_endpoint_without_preload_content(
        self,
        patch_system_notifications_email_settings_endpoint_request: Optional[PatchSystemNotificationsEmailSettingsEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """patch_system_notifications_email_settings_endpoint

        <h3>Description:</h3>Updates current Email Notification Settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: EmailNotificationSettings<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-notifications-email-settings-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param patch_system_notifications_email_settings_endpoint_request:
        :type patch_system_notifications_email_settings_endpoint_request: PatchSystemNotificationsEmailSettingsEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_notifications_email_settings_endpoint_serialize(
            patch_system_notifications_email_settings_endpoint_request=patch_system_notifications_email_settings_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemNotificationsEmailSettingsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _patch_system_notifications_email_settings_endpoint_serialize(
        self,
        patch_system_notifications_email_settings_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if patch_system_notifications_email_settings_endpoint_request is not None:
            _body_params = patch_system_notifications_email_settings_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/v2/system/notifications/email_settings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def patch_system_restapi_access_list_entry_endpoint(
        self,
        patch_system_restapi_access_list_entry_endpoint_request: Optional[PatchSystemRESTAPIAccessListEntryEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemRESTAPIAccessListEntryEndpoint200Response:
        """patch_system_restapi_access_list_entry_endpoint

        <h3>Description:</h3>Updates an existing RESTAPI Access List Entry.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIAccessListEntry<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-access-list-entry-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param patch_system_restapi_access_list_entry_endpoint_request:
        :type patch_system_restapi_access_list_entry_endpoint_request: PatchSystemRESTAPIAccessListEntryEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_restapi_access_list_entry_endpoint_serialize(
            patch_system_restapi_access_list_entry_endpoint_request=patch_system_restapi_access_list_entry_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIAccessListEntryEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def patch_system_restapi_access_list_entry_endpoint_with_http_info(
        self,
        patch_system_restapi_access_list_entry_endpoint_request: Optional[PatchSystemRESTAPIAccessListEntryEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemRESTAPIAccessListEntryEndpoint200Response]:
        """patch_system_restapi_access_list_entry_endpoint

        <h3>Description:</h3>Updates an existing RESTAPI Access List Entry.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIAccessListEntry<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-access-list-entry-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param patch_system_restapi_access_list_entry_endpoint_request:
        :type patch_system_restapi_access_list_entry_endpoint_request: PatchSystemRESTAPIAccessListEntryEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_restapi_access_list_entry_endpoint_serialize(
            patch_system_restapi_access_list_entry_endpoint_request=patch_system_restapi_access_list_entry_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIAccessListEntryEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def patch_system_restapi_access_list_entry_endpoint_without_preload_content(
        self,
        patch_system_restapi_access_list_entry_endpoint_request: Optional[PatchSystemRESTAPIAccessListEntryEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """patch_system_restapi_access_list_entry_endpoint

        <h3>Description:</h3>Updates an existing RESTAPI Access List Entry.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIAccessListEntry<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-access-list-entry-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param patch_system_restapi_access_list_entry_endpoint_request:
        :type patch_system_restapi_access_list_entry_endpoint_request: PatchSystemRESTAPIAccessListEntryEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_restapi_access_list_entry_endpoint_serialize(
            patch_system_restapi_access_list_entry_endpoint_request=patch_system_restapi_access_list_entry_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIAccessListEntryEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _patch_system_restapi_access_list_entry_endpoint_serialize(
        self,
        patch_system_restapi_access_list_entry_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if patch_system_restapi_access_list_entry_endpoint_request is not None:
            _body_params = patch_system_restapi_access_list_entry_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/v2/system/restapi/access_list/entry',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def patch_system_restapi_settings_endpoint(
        self,
        patch_system_restapi_settings_endpoint_request: Optional[PatchSystemRESTAPISettingsEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemRESTAPISettingsEndpoint200Response:
        """patch_system_restapi_settings_endpoint

        <h3>Description:</h3>Updates current REST API Settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPISettings<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-settings-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_restapi_settings_endpoint_request:
        :type patch_system_restapi_settings_endpoint_request: PatchSystemRESTAPISettingsEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_restapi_settings_endpoint_serialize(
            patch_system_restapi_settings_endpoint_request=patch_system_restapi_settings_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPISettingsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def patch_system_restapi_settings_endpoint_with_http_info(
        self,
        patch_system_restapi_settings_endpoint_request: Optional[PatchSystemRESTAPISettingsEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemRESTAPISettingsEndpoint200Response]:
        """patch_system_restapi_settings_endpoint

        <h3>Description:</h3>Updates current REST API Settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPISettings<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-settings-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_restapi_settings_endpoint_request:
        :type patch_system_restapi_settings_endpoint_request: PatchSystemRESTAPISettingsEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_restapi_settings_endpoint_serialize(
            patch_system_restapi_settings_endpoint_request=patch_system_restapi_settings_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPISettingsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def patch_system_restapi_settings_endpoint_without_preload_content(
        self,
        patch_system_restapi_settings_endpoint_request: Optional[PatchSystemRESTAPISettingsEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """patch_system_restapi_settings_endpoint

        <h3>Description:</h3>Updates current REST API Settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPISettings<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-settings-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_restapi_settings_endpoint_request:
        :type patch_system_restapi_settings_endpoint_request: PatchSystemRESTAPISettingsEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_restapi_settings_endpoint_serialize(
            patch_system_restapi_settings_endpoint_request=patch_system_restapi_settings_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPISettingsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _patch_system_restapi_settings_endpoint_serialize(
        self,
        patch_system_restapi_settings_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if patch_system_restapi_settings_endpoint_request is not None:
            _body_params = patch_system_restapi_settings_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/v2/system/restapi/settings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def patch_system_restapi_version_endpoint(
        self,
        patch_system_restapi_version_endpoint_request: Optional[PatchSystemRESTAPIVersionEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemRESTAPIVersionEndpoint200Response:
        """patch_system_restapi_version_endpoint

        <h3>Description:</h3>Updates current REST API Version.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIVersion<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-version-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: RESTAPIVersionReleasesCache

        :param patch_system_restapi_version_endpoint_request:
        :type patch_system_restapi_version_endpoint_request: PatchSystemRESTAPIVersionEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_restapi_version_endpoint_serialize(
            patch_system_restapi_version_endpoint_request=patch_system_restapi_version_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIVersionEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def patch_system_restapi_version_endpoint_with_http_info(
        self,
        patch_system_restapi_version_endpoint_request: Optional[PatchSystemRESTAPIVersionEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemRESTAPIVersionEndpoint200Response]:
        """patch_system_restapi_version_endpoint

        <h3>Description:</h3>Updates current REST API Version.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIVersion<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-version-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: RESTAPIVersionReleasesCache

        :param patch_system_restapi_version_endpoint_request:
        :type patch_system_restapi_version_endpoint_request: PatchSystemRESTAPIVersionEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_restapi_version_endpoint_serialize(
            patch_system_restapi_version_endpoint_request=patch_system_restapi_version_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIVersionEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def patch_system_restapi_version_endpoint_without_preload_content(
        self,
        patch_system_restapi_version_endpoint_request: Optional[PatchSystemRESTAPIVersionEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """patch_system_restapi_version_endpoint

        <h3>Description:</h3>Updates current REST API Version.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIVersion<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-version-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: RESTAPIVersionReleasesCache

        :param patch_system_restapi_version_endpoint_request:
        :type patch_system_restapi_version_endpoint_request: PatchSystemRESTAPIVersionEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_restapi_version_endpoint_serialize(
            patch_system_restapi_version_endpoint_request=patch_system_restapi_version_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIVersionEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _patch_system_restapi_version_endpoint_serialize(
        self,
        patch_system_restapi_version_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if patch_system_restapi_version_endpoint_request is not None:
            _body_params = patch_system_restapi_version_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/v2/system/restapi/version',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def patch_system_tunable_endpoint(
        self,
        patch_system_tunable_endpoint_request: Optional[PatchSystemTunableEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemTunableEndpoint200Response:
        """patch_system_tunable_endpoint

        <h3>Description:</h3>Updates an existing System Tunable.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemTunable<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-tunable-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param patch_system_tunable_endpoint_request:
        :type patch_system_tunable_endpoint_request: PatchSystemTunableEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_tunable_endpoint_serialize(
            patch_system_tunable_endpoint_request=patch_system_tunable_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemTunableEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def patch_system_tunable_endpoint_with_http_info(
        self,
        patch_system_tunable_endpoint_request: Optional[PatchSystemTunableEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemTunableEndpoint200Response]:
        """patch_system_tunable_endpoint

        <h3>Description:</h3>Updates an existing System Tunable.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemTunable<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-tunable-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param patch_system_tunable_endpoint_request:
        :type patch_system_tunable_endpoint_request: PatchSystemTunableEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_tunable_endpoint_serialize(
            patch_system_tunable_endpoint_request=patch_system_tunable_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemTunableEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def patch_system_tunable_endpoint_without_preload_content(
        self,
        patch_system_tunable_endpoint_request: Optional[PatchSystemTunableEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """patch_system_tunable_endpoint

        <h3>Description:</h3>Updates an existing System Tunable.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemTunable<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-tunable-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param patch_system_tunable_endpoint_request:
        :type patch_system_tunable_endpoint_request: PatchSystemTunableEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_tunable_endpoint_serialize(
            patch_system_tunable_endpoint_request=patch_system_tunable_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemTunableEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _patch_system_tunable_endpoint_serialize(
        self,
        patch_system_tunable_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if patch_system_tunable_endpoint_request is not None:
            _body_params = patch_system_tunable_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/v2/system/tunable',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def patch_system_web_gui_settings_endpoint(
        self,
        patch_system_web_gui_settings_endpoint_request: Optional[PatchSystemWebGUISettingsEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemWebGUISettingsEndpoint200Response:
        """patch_system_web_gui_settings_endpoint

        <h3>Description:</h3>Updates current Web GUI Settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: WebGUISettings<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-webgui-settings-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_web_gui_settings_endpoint_request:
        :type patch_system_web_gui_settings_endpoint_request: PatchSystemWebGUISettingsEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_web_gui_settings_endpoint_serialize(
            patch_system_web_gui_settings_endpoint_request=patch_system_web_gui_settings_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemWebGUISettingsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def patch_system_web_gui_settings_endpoint_with_http_info(
        self,
        patch_system_web_gui_settings_endpoint_request: Optional[PatchSystemWebGUISettingsEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemWebGUISettingsEndpoint200Response]:
        """patch_system_web_gui_settings_endpoint

        <h3>Description:</h3>Updates current Web GUI Settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: WebGUISettings<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-webgui-settings-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_web_gui_settings_endpoint_request:
        :type patch_system_web_gui_settings_endpoint_request: PatchSystemWebGUISettingsEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_web_gui_settings_endpoint_serialize(
            patch_system_web_gui_settings_endpoint_request=patch_system_web_gui_settings_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemWebGUISettingsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def patch_system_web_gui_settings_endpoint_without_preload_content(
        self,
        patch_system_web_gui_settings_endpoint_request: Optional[PatchSystemWebGUISettingsEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """patch_system_web_gui_settings_endpoint

        <h3>Description:</h3>Updates current Web GUI Settings.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: WebGUISettings<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-webgui-settings-patch ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param patch_system_web_gui_settings_endpoint_request:
        :type patch_system_web_gui_settings_endpoint_request: PatchSystemWebGUISettingsEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._patch_system_web_gui_settings_endpoint_serialize(
            patch_system_web_gui_settings_endpoint_request=patch_system_web_gui_settings_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemWebGUISettingsEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _patch_system_web_gui_settings_endpoint_serialize(
        self,
        patch_system_web_gui_settings_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if patch_system_web_gui_settings_endpoint_request is not None:
            _body_params = patch_system_web_gui_settings_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/v2/system/webgui/settings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_system_certificate_authority_endpoint(
        self,
        post_system_certificate_authority_endpoint_request: Optional[PostSystemCertificateAuthorityEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemCertificateAuthorityEndpoint200Response:
        """post_system_certificate_authority_endpoint

        <h3>Description:</h3>Creates a new Certificate Authority.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateAuthority<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authority-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_system_certificate_authority_endpoint_request:
        :type post_system_certificate_authority_endpoint_request: PostSystemCertificateAuthorityEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_authority_endpoint_serialize(
            post_system_certificate_authority_endpoint_request=post_system_certificate_authority_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateAuthorityEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_system_certificate_authority_endpoint_with_http_info(
        self,
        post_system_certificate_authority_endpoint_request: Optional[PostSystemCertificateAuthorityEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemCertificateAuthorityEndpoint200Response]:
        """post_system_certificate_authority_endpoint

        <h3>Description:</h3>Creates a new Certificate Authority.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateAuthority<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authority-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_system_certificate_authority_endpoint_request:
        :type post_system_certificate_authority_endpoint_request: PostSystemCertificateAuthorityEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_authority_endpoint_serialize(
            post_system_certificate_authority_endpoint_request=post_system_certificate_authority_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateAuthorityEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_system_certificate_authority_endpoint_without_preload_content(
        self,
        post_system_certificate_authority_endpoint_request: Optional[PostSystemCertificateAuthorityEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_system_certificate_authority_endpoint

        <h3>Description:</h3>Creates a new Certificate Authority.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateAuthority<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authority-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_system_certificate_authority_endpoint_request:
        :type post_system_certificate_authority_endpoint_request: PostSystemCertificateAuthorityEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_authority_endpoint_serialize(
            post_system_certificate_authority_endpoint_request=post_system_certificate_authority_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateAuthorityEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_system_certificate_authority_endpoint_serialize(
        self,
        post_system_certificate_authority_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if post_system_certificate_authority_endpoint_request is not None:
            _body_params = post_system_certificate_authority_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/system/certificate_authority',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_system_certificate_authority_generate_endpoint(
        self,
        post_system_certificate_authority_generate_endpoint_request: Optional[PostSystemCertificateAuthorityGenerateEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostSystemCertificateAuthorityGenerateEndpoint200Response:
        """post_system_certificate_authority_generate_endpoint

        <h3>Description:</h3>Generate a new internal or intermediate certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateAuthorityGenerate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authority-generate-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_system_certificate_authority_generate_endpoint_request:
        :type post_system_certificate_authority_generate_endpoint_request: PostSystemCertificateAuthorityGenerateEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_authority_generate_endpoint_serialize(
            post_system_certificate_authority_generate_endpoint_request=post_system_certificate_authority_generate_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostSystemCertificateAuthorityGenerateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_system_certificate_authority_generate_endpoint_with_http_info(
        self,
        post_system_certificate_authority_generate_endpoint_request: Optional[PostSystemCertificateAuthorityGenerateEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostSystemCertificateAuthorityGenerateEndpoint200Response]:
        """post_system_certificate_authority_generate_endpoint

        <h3>Description:</h3>Generate a new internal or intermediate certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateAuthorityGenerate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authority-generate-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_system_certificate_authority_generate_endpoint_request:
        :type post_system_certificate_authority_generate_endpoint_request: PostSystemCertificateAuthorityGenerateEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_authority_generate_endpoint_serialize(
            post_system_certificate_authority_generate_endpoint_request=post_system_certificate_authority_generate_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostSystemCertificateAuthorityGenerateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_system_certificate_authority_generate_endpoint_without_preload_content(
        self,
        post_system_certificate_authority_generate_endpoint_request: Optional[PostSystemCertificateAuthorityGenerateEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_system_certificate_authority_generate_endpoint

        <h3>Description:</h3>Generate a new internal or intermediate certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateAuthorityGenerate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authority-generate-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_system_certificate_authority_generate_endpoint_request:
        :type post_system_certificate_authority_generate_endpoint_request: PostSystemCertificateAuthorityGenerateEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_authority_generate_endpoint_serialize(
            post_system_certificate_authority_generate_endpoint_request=post_system_certificate_authority_generate_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostSystemCertificateAuthorityGenerateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_system_certificate_authority_generate_endpoint_serialize(
        self,
        post_system_certificate_authority_generate_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if post_system_certificate_authority_generate_endpoint_request is not None:
            _body_params = post_system_certificate_authority_generate_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/system/certificate_authority/generate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_system_certificate_authority_renew_endpoint(
        self,
        post_system_certificate_authority_renew_endpoint_request: Optional[PostSystemCertificateAuthorityRenewEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostSystemCertificateAuthorityRenewEndpoint200Response:
        """post_system_certificate_authority_renew_endpoint

        <h3>Description:</h3>Renews an existing Certificate Authority.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateAuthorityRenew<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authority-renew-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param post_system_certificate_authority_renew_endpoint_request:
        :type post_system_certificate_authority_renew_endpoint_request: PostSystemCertificateAuthorityRenewEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_authority_renew_endpoint_serialize(
            post_system_certificate_authority_renew_endpoint_request=post_system_certificate_authority_renew_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostSystemCertificateAuthorityRenewEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_system_certificate_authority_renew_endpoint_with_http_info(
        self,
        post_system_certificate_authority_renew_endpoint_request: Optional[PostSystemCertificateAuthorityRenewEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostSystemCertificateAuthorityRenewEndpoint200Response]:
        """post_system_certificate_authority_renew_endpoint

        <h3>Description:</h3>Renews an existing Certificate Authority.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateAuthorityRenew<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authority-renew-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param post_system_certificate_authority_renew_endpoint_request:
        :type post_system_certificate_authority_renew_endpoint_request: PostSystemCertificateAuthorityRenewEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_authority_renew_endpoint_serialize(
            post_system_certificate_authority_renew_endpoint_request=post_system_certificate_authority_renew_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostSystemCertificateAuthorityRenewEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_system_certificate_authority_renew_endpoint_without_preload_content(
        self,
        post_system_certificate_authority_renew_endpoint_request: Optional[PostSystemCertificateAuthorityRenewEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_system_certificate_authority_renew_endpoint

        <h3>Description:</h3>Renews an existing Certificate Authority.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateAuthorityRenew<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-authority-renew-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param post_system_certificate_authority_renew_endpoint_request:
        :type post_system_certificate_authority_renew_endpoint_request: PostSystemCertificateAuthorityRenewEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_authority_renew_endpoint_serialize(
            post_system_certificate_authority_renew_endpoint_request=post_system_certificate_authority_renew_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostSystemCertificateAuthorityRenewEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_system_certificate_authority_renew_endpoint_serialize(
        self,
        post_system_certificate_authority_renew_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if post_system_certificate_authority_renew_endpoint_request is not None:
            _body_params = post_system_certificate_authority_renew_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/system/certificate_authority/renew',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_system_certificate_endpoint(
        self,
        post_system_certificate_endpoint_request: Optional[PostSystemCertificateEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemCertificateEndpoint200Response:
        """post_system_certificate_endpoint

        <h3>Description:</h3>Creates a new Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: Certificate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param post_system_certificate_endpoint_request:
        :type post_system_certificate_endpoint_request: PostSystemCertificateEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_endpoint_serialize(
            post_system_certificate_endpoint_request=post_system_certificate_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_system_certificate_endpoint_with_http_info(
        self,
        post_system_certificate_endpoint_request: Optional[PostSystemCertificateEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemCertificateEndpoint200Response]:
        """post_system_certificate_endpoint

        <h3>Description:</h3>Creates a new Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: Certificate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param post_system_certificate_endpoint_request:
        :type post_system_certificate_endpoint_request: PostSystemCertificateEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_endpoint_serialize(
            post_system_certificate_endpoint_request=post_system_certificate_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_system_certificate_endpoint_without_preload_content(
        self,
        post_system_certificate_endpoint_request: Optional[PostSystemCertificateEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_system_certificate_endpoint

        <h3>Description:</h3>Creates a new Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: Certificate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param post_system_certificate_endpoint_request:
        :type post_system_certificate_endpoint_request: PostSystemCertificateEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_endpoint_serialize(
            post_system_certificate_endpoint_request=post_system_certificate_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_system_certificate_endpoint_serialize(
        self,
        post_system_certificate_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if post_system_certificate_endpoint_request is not None:
            _body_params = post_system_certificate_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/system/certificate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_system_certificate_generate_endpoint(
        self,
        post_system_certificate_generate_endpoint_request: Optional[PostSystemCertificateGenerateEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostSystemCertificateGenerateEndpoint200Response:
        """post_system_certificate_generate_endpoint

        <h3>Description:</h3>Generate a new internal certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateGenerate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-generate-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_system_certificate_generate_endpoint_request:
        :type post_system_certificate_generate_endpoint_request: PostSystemCertificateGenerateEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_generate_endpoint_serialize(
            post_system_certificate_generate_endpoint_request=post_system_certificate_generate_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostSystemCertificateGenerateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_system_certificate_generate_endpoint_with_http_info(
        self,
        post_system_certificate_generate_endpoint_request: Optional[PostSystemCertificateGenerateEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostSystemCertificateGenerateEndpoint200Response]:
        """post_system_certificate_generate_endpoint

        <h3>Description:</h3>Generate a new internal certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateGenerate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-generate-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_system_certificate_generate_endpoint_request:
        :type post_system_certificate_generate_endpoint_request: PostSystemCertificateGenerateEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_generate_endpoint_serialize(
            post_system_certificate_generate_endpoint_request=post_system_certificate_generate_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostSystemCertificateGenerateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_system_certificate_generate_endpoint_without_preload_content(
        self,
        post_system_certificate_generate_endpoint_request: Optional[PostSystemCertificateGenerateEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_system_certificate_generate_endpoint

        <h3>Description:</h3>Generate a new internal certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateGenerate<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-generate-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_system_certificate_generate_endpoint_request:
        :type post_system_certificate_generate_endpoint_request: PostSystemCertificateGenerateEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_generate_endpoint_serialize(
            post_system_certificate_generate_endpoint_request=post_system_certificate_generate_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostSystemCertificateGenerateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_system_certificate_generate_endpoint_serialize(
        self,
        post_system_certificate_generate_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if post_system_certificate_generate_endpoint_request is not None:
            _body_params = post_system_certificate_generate_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/system/certificate/generate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_system_certificate_pkcs12_export_endpoint(
        self,
        post_system_certificate_pkcs12_export_endpoint_request: Optional[PostSystemCertificatePKCS12ExportEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bytearray:
        """post_system_certificate_pkcs12_export_endpoint

        <h3>Description:</h3>Exports an existing certificate as a PKCS#12 archive. Please note this endpoint will return the PKCS#12 archive as a binary download.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificatePKCS12Export<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-pkcs12-export-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param post_system_certificate_pkcs12_export_endpoint_request:
        :type post_system_certificate_pkcs12_export_endpoint_request: PostSystemCertificatePKCS12ExportEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_pkcs12_export_endpoint_serialize(
            post_system_certificate_pkcs12_export_endpoint_request=post_system_certificate_pkcs12_export_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "bytearray",
            '409': "bytearray",
            '424': "bytearray",
            '403': "bytearray",
            '200': "bytearray",
            '415': "bytearray",
            '405': "bytearray",
            '406': "bytearray",
            '404': "bytearray",
            '500': "bytearray",
            '503': "bytearray",
            '422': "bytearray",
            '400': "bytearray",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_system_certificate_pkcs12_export_endpoint_with_http_info(
        self,
        post_system_certificate_pkcs12_export_endpoint_request: Optional[PostSystemCertificatePKCS12ExportEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bytearray]:
        """post_system_certificate_pkcs12_export_endpoint

        <h3>Description:</h3>Exports an existing certificate as a PKCS#12 archive. Please note this endpoint will return the PKCS#12 archive as a binary download.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificatePKCS12Export<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-pkcs12-export-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param post_system_certificate_pkcs12_export_endpoint_request:
        :type post_system_certificate_pkcs12_export_endpoint_request: PostSystemCertificatePKCS12ExportEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_pkcs12_export_endpoint_serialize(
            post_system_certificate_pkcs12_export_endpoint_request=post_system_certificate_pkcs12_export_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "bytearray",
            '409': "bytearray",
            '424': "bytearray",
            '403': "bytearray",
            '200': "bytearray",
            '415': "bytearray",
            '405': "bytearray",
            '406': "bytearray",
            '404': "bytearray",
            '500': "bytearray",
            '503': "bytearray",
            '422': "bytearray",
            '400': "bytearray",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_system_certificate_pkcs12_export_endpoint_without_preload_content(
        self,
        post_system_certificate_pkcs12_export_endpoint_request: Optional[PostSystemCertificatePKCS12ExportEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_system_certificate_pkcs12_export_endpoint

        <h3>Description:</h3>Exports an existing certificate as a PKCS#12 archive. Please note this endpoint will return the PKCS#12 archive as a binary download.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificatePKCS12Export<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-pkcs12-export-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param post_system_certificate_pkcs12_export_endpoint_request:
        :type post_system_certificate_pkcs12_export_endpoint_request: PostSystemCertificatePKCS12ExportEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_pkcs12_export_endpoint_serialize(
            post_system_certificate_pkcs12_export_endpoint_request=post_system_certificate_pkcs12_export_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "bytearray",
            '409': "bytearray",
            '424': "bytearray",
            '403': "bytearray",
            '200': "bytearray",
            '415': "bytearray",
            '405': "bytearray",
            '406': "bytearray",
            '404': "bytearray",
            '500': "bytearray",
            '503': "bytearray",
            '422': "bytearray",
            '400': "bytearray",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_system_certificate_pkcs12_export_endpoint_serialize(
        self,
        post_system_certificate_pkcs12_export_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if post_system_certificate_pkcs12_export_endpoint_request is not None:
            _body_params = post_system_certificate_pkcs12_export_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/octet-stream'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/system/certificate/pkcs12/export',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_system_certificate_renew_endpoint(
        self,
        post_system_certificate_renew_endpoint_request: Optional[PostSystemCertificateRenewEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostSystemCertificateRenewEndpoint200Response:
        """post_system_certificate_renew_endpoint

        <h3>Description:</h3>Renews an existing Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRenew<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-renew-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param post_system_certificate_renew_endpoint_request:
        :type post_system_certificate_renew_endpoint_request: PostSystemCertificateRenewEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_renew_endpoint_serialize(
            post_system_certificate_renew_endpoint_request=post_system_certificate_renew_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostSystemCertificateRenewEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_system_certificate_renew_endpoint_with_http_info(
        self,
        post_system_certificate_renew_endpoint_request: Optional[PostSystemCertificateRenewEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostSystemCertificateRenewEndpoint200Response]:
        """post_system_certificate_renew_endpoint

        <h3>Description:</h3>Renews an existing Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRenew<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-renew-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param post_system_certificate_renew_endpoint_request:
        :type post_system_certificate_renew_endpoint_request: PostSystemCertificateRenewEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_renew_endpoint_serialize(
            post_system_certificate_renew_endpoint_request=post_system_certificate_renew_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostSystemCertificateRenewEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_system_certificate_renew_endpoint_without_preload_content(
        self,
        post_system_certificate_renew_endpoint_request: Optional[PostSystemCertificateRenewEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_system_certificate_renew_endpoint

        <h3>Description:</h3>Renews an existing Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRenew<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-renew-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param post_system_certificate_renew_endpoint_request:
        :type post_system_certificate_renew_endpoint_request: PostSystemCertificateRenewEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_renew_endpoint_serialize(
            post_system_certificate_renew_endpoint_request=post_system_certificate_renew_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostSystemCertificateRenewEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_system_certificate_renew_endpoint_serialize(
        self,
        post_system_certificate_renew_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if post_system_certificate_renew_endpoint_request is not None:
            _body_params = post_system_certificate_renew_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/system/certificate/renew',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_system_certificate_signing_request_endpoint(
        self,
        post_system_certificate_signing_request_endpoint_request: Optional[PostSystemCertificateSigningRequestEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostSystemCertificateSigningRequestEndpoint200Response:
        """post_system_certificate_signing_request_endpoint

        <h3>Description:</h3>Creates a new Certificate Signing Request.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateSigningRequest<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-signing-request-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_system_certificate_signing_request_endpoint_request:
        :type post_system_certificate_signing_request_endpoint_request: PostSystemCertificateSigningRequestEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_signing_request_endpoint_serialize(
            post_system_certificate_signing_request_endpoint_request=post_system_certificate_signing_request_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostSystemCertificateSigningRequestEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_system_certificate_signing_request_endpoint_with_http_info(
        self,
        post_system_certificate_signing_request_endpoint_request: Optional[PostSystemCertificateSigningRequestEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostSystemCertificateSigningRequestEndpoint200Response]:
        """post_system_certificate_signing_request_endpoint

        <h3>Description:</h3>Creates a new Certificate Signing Request.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateSigningRequest<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-signing-request-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_system_certificate_signing_request_endpoint_request:
        :type post_system_certificate_signing_request_endpoint_request: PostSystemCertificateSigningRequestEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_signing_request_endpoint_serialize(
            post_system_certificate_signing_request_endpoint_request=post_system_certificate_signing_request_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostSystemCertificateSigningRequestEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_system_certificate_signing_request_endpoint_without_preload_content(
        self,
        post_system_certificate_signing_request_endpoint_request: Optional[PostSystemCertificateSigningRequestEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_system_certificate_signing_request_endpoint

        <h3>Description:</h3>Creates a new Certificate Signing Request.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateSigningRequest<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-signing-request-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_system_certificate_signing_request_endpoint_request:
        :type post_system_certificate_signing_request_endpoint_request: PostSystemCertificateSigningRequestEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_signing_request_endpoint_serialize(
            post_system_certificate_signing_request_endpoint_request=post_system_certificate_signing_request_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostSystemCertificateSigningRequestEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_system_certificate_signing_request_endpoint_serialize(
        self,
        post_system_certificate_signing_request_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if post_system_certificate_signing_request_endpoint_request is not None:
            _body_params = post_system_certificate_signing_request_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/system/certificate/signing_request',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_system_certificate_signing_request_sign_endpoint(
        self,
        post_system_certificate_signing_request_sign_endpoint_request: Optional[PostSystemCertificateSigningRequestSignEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostSystemCertificateSigningRequestSignEndpoint200Response:
        """post_system_certificate_signing_request_sign_endpoint

        <h3>Description:</h3>Signs an existing Certificate Signing Request (CSR) with an existing Certificate Authority (CA).<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateSigningRequestSign<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-signing-request-sign-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_system_certificate_signing_request_sign_endpoint_request:
        :type post_system_certificate_signing_request_sign_endpoint_request: PostSystemCertificateSigningRequestSignEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_signing_request_sign_endpoint_serialize(
            post_system_certificate_signing_request_sign_endpoint_request=post_system_certificate_signing_request_sign_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostSystemCertificateSigningRequestSignEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_system_certificate_signing_request_sign_endpoint_with_http_info(
        self,
        post_system_certificate_signing_request_sign_endpoint_request: Optional[PostSystemCertificateSigningRequestSignEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostSystemCertificateSigningRequestSignEndpoint200Response]:
        """post_system_certificate_signing_request_sign_endpoint

        <h3>Description:</h3>Signs an existing Certificate Signing Request (CSR) with an existing Certificate Authority (CA).<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateSigningRequestSign<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-signing-request-sign-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_system_certificate_signing_request_sign_endpoint_request:
        :type post_system_certificate_signing_request_sign_endpoint_request: PostSystemCertificateSigningRequestSignEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_signing_request_sign_endpoint_serialize(
            post_system_certificate_signing_request_sign_endpoint_request=post_system_certificate_signing_request_sign_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostSystemCertificateSigningRequestSignEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_system_certificate_signing_request_sign_endpoint_without_preload_content(
        self,
        post_system_certificate_signing_request_sign_endpoint_request: Optional[PostSystemCertificateSigningRequestSignEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_system_certificate_signing_request_sign_endpoint

        <h3>Description:</h3>Signs an existing Certificate Signing Request (CSR) with an existing Certificate Authority (CA).<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateSigningRequestSign<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-certificate-signing-request-sign-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_system_certificate_signing_request_sign_endpoint_request:
        :type post_system_certificate_signing_request_sign_endpoint_request: PostSystemCertificateSigningRequestSignEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_certificate_signing_request_sign_endpoint_serialize(
            post_system_certificate_signing_request_sign_endpoint_request=post_system_certificate_signing_request_sign_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostSystemCertificateSigningRequestSignEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_system_certificate_signing_request_sign_endpoint_serialize(
        self,
        post_system_certificate_signing_request_sign_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if post_system_certificate_signing_request_sign_endpoint_request is not None:
            _body_params = post_system_certificate_signing_request_sign_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/system/certificate/signing_request/sign',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_system_crl_endpoint(
        self,
        post_system_crl_endpoint_request: Optional[PostSystemCRLEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemCRLEndpoint200Response:
        """post_system_crl_endpoint

        <h3>Description:</h3>Creates a new Certificate Revocation List.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationList<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_system_crl_endpoint_request:
        :type post_system_crl_endpoint_request: PostSystemCRLEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_crl_endpoint_serialize(
            post_system_crl_endpoint_request=post_system_crl_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_system_crl_endpoint_with_http_info(
        self,
        post_system_crl_endpoint_request: Optional[PostSystemCRLEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemCRLEndpoint200Response]:
        """post_system_crl_endpoint

        <h3>Description:</h3>Creates a new Certificate Revocation List.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationList<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_system_crl_endpoint_request:
        :type post_system_crl_endpoint_request: PostSystemCRLEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_crl_endpoint_serialize(
            post_system_crl_endpoint_request=post_system_crl_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_system_crl_endpoint_without_preload_content(
        self,
        post_system_crl_endpoint_request: Optional[PostSystemCRLEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_system_crl_endpoint

        <h3>Description:</h3>Creates a new Certificate Revocation List.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationList<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_system_crl_endpoint_request:
        :type post_system_crl_endpoint_request: PostSystemCRLEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_crl_endpoint_serialize(
            post_system_crl_endpoint_request=post_system_crl_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_system_crl_endpoint_serialize(
        self,
        post_system_crl_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if post_system_crl_endpoint_request is not None:
            _body_params = post_system_crl_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/system/crl',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_system_crl_revoked_certificate_endpoint(
        self,
        post_system_crl_revoked_certificate_endpoint_request: Optional[PostSystemCRLRevokedCertificateEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemCRLRevokedCertificateEndpoint200Response:
        """post_system_crl_revoked_certificate_endpoint

        <h3>Description:</h3>Creates a new Certificate Revocation List Revoked Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationListRevokedCertificate<br>**Parent model**: CertificateRevocationList<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-revoked-certificate-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_system_crl_revoked_certificate_endpoint_request:
        :type post_system_crl_revoked_certificate_endpoint_request: PostSystemCRLRevokedCertificateEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_crl_revoked_certificate_endpoint_serialize(
            post_system_crl_revoked_certificate_endpoint_request=post_system_crl_revoked_certificate_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLRevokedCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_system_crl_revoked_certificate_endpoint_with_http_info(
        self,
        post_system_crl_revoked_certificate_endpoint_request: Optional[PostSystemCRLRevokedCertificateEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemCRLRevokedCertificateEndpoint200Response]:
        """post_system_crl_revoked_certificate_endpoint

        <h3>Description:</h3>Creates a new Certificate Revocation List Revoked Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationListRevokedCertificate<br>**Parent model**: CertificateRevocationList<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-revoked-certificate-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_system_crl_revoked_certificate_endpoint_request:
        :type post_system_crl_revoked_certificate_endpoint_request: PostSystemCRLRevokedCertificateEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_crl_revoked_certificate_endpoint_serialize(
            post_system_crl_revoked_certificate_endpoint_request=post_system_crl_revoked_certificate_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLRevokedCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_system_crl_revoked_certificate_endpoint_without_preload_content(
        self,
        post_system_crl_revoked_certificate_endpoint_request: Optional[PostSystemCRLRevokedCertificateEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_system_crl_revoked_certificate_endpoint

        <h3>Description:</h3>Creates a new Certificate Revocation List Revoked Certificate.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: CertificateRevocationListRevokedCertificate<br>**Parent model**: CertificateRevocationList<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-crl-revoked-certificate-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_system_crl_revoked_certificate_endpoint_request:
        :type post_system_crl_revoked_certificate_endpoint_request: PostSystemCRLRevokedCertificateEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_crl_revoked_certificate_endpoint_serialize(
            post_system_crl_revoked_certificate_endpoint_request=post_system_crl_revoked_certificate_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemCRLRevokedCertificateEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_system_crl_revoked_certificate_endpoint_serialize(
        self,
        post_system_crl_revoked_certificate_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if post_system_crl_revoked_certificate_endpoint_request is not None:
            _body_params = post_system_crl_revoked_certificate_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/system/crl/revoked_certificate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_system_package_endpoint(
        self,
        post_system_package_endpoint_request: Optional[PostSystemPackageEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemPackageEndpoint200Response:
        """post_system_package_endpoint

        <h3>Description:</h3>Installs a new Package.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: Package<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-package-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param post_system_package_endpoint_request:
        :type post_system_package_endpoint_request: PostSystemPackageEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_package_endpoint_serialize(
            post_system_package_endpoint_request=post_system_package_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemPackageEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_system_package_endpoint_with_http_info(
        self,
        post_system_package_endpoint_request: Optional[PostSystemPackageEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemPackageEndpoint200Response]:
        """post_system_package_endpoint

        <h3>Description:</h3>Installs a new Package.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: Package<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-package-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param post_system_package_endpoint_request:
        :type post_system_package_endpoint_request: PostSystemPackageEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_package_endpoint_serialize(
            post_system_package_endpoint_request=post_system_package_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemPackageEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_system_package_endpoint_without_preload_content(
        self,
        post_system_package_endpoint_request: Optional[PostSystemPackageEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_system_package_endpoint

        <h3>Description:</h3>Installs a new Package.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: Package<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-package-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param post_system_package_endpoint_request:
        :type post_system_package_endpoint_request: PostSystemPackageEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_package_endpoint_serialize(
            post_system_package_endpoint_request=post_system_package_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemPackageEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_system_package_endpoint_serialize(
        self,
        post_system_package_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if post_system_package_endpoint_request is not None:
            _body_params = post_system_package_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/system/package',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_system_restapi_access_list_entry_endpoint(
        self,
        put_system_restapi_access_list_endpoint_request_inner: Optional[PutSystemRESTAPIAccessListEndpointRequestInner] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemRESTAPIAccessListEntryEndpoint200Response:
        """post_system_restapi_access_list_entry_endpoint

        <h3>Description:</h3>Creates a new RESTAPI Access List Entry.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIAccessListEntry<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-access-list-entry-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param put_system_restapi_access_list_endpoint_request_inner:
        :type put_system_restapi_access_list_endpoint_request_inner: PutSystemRESTAPIAccessListEndpointRequestInner
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_restapi_access_list_entry_endpoint_serialize(
            put_system_restapi_access_list_endpoint_request_inner=put_system_restapi_access_list_endpoint_request_inner,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIAccessListEntryEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_system_restapi_access_list_entry_endpoint_with_http_info(
        self,
        put_system_restapi_access_list_endpoint_request_inner: Optional[PutSystemRESTAPIAccessListEndpointRequestInner] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemRESTAPIAccessListEntryEndpoint200Response]:
        """post_system_restapi_access_list_entry_endpoint

        <h3>Description:</h3>Creates a new RESTAPI Access List Entry.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIAccessListEntry<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-access-list-entry-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param put_system_restapi_access_list_endpoint_request_inner:
        :type put_system_restapi_access_list_endpoint_request_inner: PutSystemRESTAPIAccessListEndpointRequestInner
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_restapi_access_list_entry_endpoint_serialize(
            put_system_restapi_access_list_endpoint_request_inner=put_system_restapi_access_list_endpoint_request_inner,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIAccessListEntryEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_system_restapi_access_list_entry_endpoint_without_preload_content(
        self,
        put_system_restapi_access_list_endpoint_request_inner: Optional[PutSystemRESTAPIAccessListEndpointRequestInner] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_system_restapi_access_list_entry_endpoint

        <h3>Description:</h3>Creates a new RESTAPI Access List Entry.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIAccessListEntry<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-access-list-entry-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param put_system_restapi_access_list_endpoint_request_inner:
        :type put_system_restapi_access_list_endpoint_request_inner: PutSystemRESTAPIAccessListEndpointRequestInner
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_restapi_access_list_entry_endpoint_serialize(
            put_system_restapi_access_list_endpoint_request_inner=put_system_restapi_access_list_endpoint_request_inner,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIAccessListEntryEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_system_restapi_access_list_entry_endpoint_serialize(
        self,
        put_system_restapi_access_list_endpoint_request_inner,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if put_system_restapi_access_list_endpoint_request_inner is not None:
            _body_params = put_system_restapi_access_list_endpoint_request_inner


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/system/restapi/access_list/entry',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_system_restapi_settings_sync_endpoint(
        self,
        post_system_restapi_settings_sync_endpoint_request: Optional[PostSystemRESTAPISettingsSyncEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostSystemRESTAPISettingsSyncEndpoint200Response:
        """post_system_restapi_settings_sync_endpoint

        <h3>Description:</h3>Creates REST API Settings Sync.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPISettingsSync<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-settings-sync-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param post_system_restapi_settings_sync_endpoint_request:
        :type post_system_restapi_settings_sync_endpoint_request: PostSystemRESTAPISettingsSyncEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_restapi_settings_sync_endpoint_serialize(
            post_system_restapi_settings_sync_endpoint_request=post_system_restapi_settings_sync_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostSystemRESTAPISettingsSyncEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_system_restapi_settings_sync_endpoint_with_http_info(
        self,
        post_system_restapi_settings_sync_endpoint_request: Optional[PostSystemRESTAPISettingsSyncEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostSystemRESTAPISettingsSyncEndpoint200Response]:
        """post_system_restapi_settings_sync_endpoint

        <h3>Description:</h3>Creates REST API Settings Sync.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPISettingsSync<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-settings-sync-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param post_system_restapi_settings_sync_endpoint_request:
        :type post_system_restapi_settings_sync_endpoint_request: PostSystemRESTAPISettingsSyncEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_restapi_settings_sync_endpoint_serialize(
            post_system_restapi_settings_sync_endpoint_request=post_system_restapi_settings_sync_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostSystemRESTAPISettingsSyncEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_system_restapi_settings_sync_endpoint_without_preload_content(
        self,
        post_system_restapi_settings_sync_endpoint_request: Optional[PostSystemRESTAPISettingsSyncEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_system_restapi_settings_sync_endpoint

        <h3>Description:</h3>Creates REST API Settings Sync.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPISettingsSync<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-settings-sync-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param post_system_restapi_settings_sync_endpoint_request:
        :type post_system_restapi_settings_sync_endpoint_request: PostSystemRESTAPISettingsSyncEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_restapi_settings_sync_endpoint_serialize(
            post_system_restapi_settings_sync_endpoint_request=post_system_restapi_settings_sync_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostSystemRESTAPISettingsSyncEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_system_restapi_settings_sync_endpoint_serialize(
        self,
        post_system_restapi_settings_sync_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if post_system_restapi_settings_sync_endpoint_request is not None:
            _body_params = post_system_restapi_settings_sync_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/system/restapi/settings/sync',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_system_tunable_endpoint(
        self,
        post_system_tunable_endpoint_request: Optional[PostSystemTunableEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemTunableEndpoint200Response:
        """post_system_tunable_endpoint

        <h3>Description:</h3>Creates a new System Tunable.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemTunable<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-tunable-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param post_system_tunable_endpoint_request:
        :type post_system_tunable_endpoint_request: PostSystemTunableEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_tunable_endpoint_serialize(
            post_system_tunable_endpoint_request=post_system_tunable_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemTunableEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_system_tunable_endpoint_with_http_info(
        self,
        post_system_tunable_endpoint_request: Optional[PostSystemTunableEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemTunableEndpoint200Response]:
        """post_system_tunable_endpoint

        <h3>Description:</h3>Creates a new System Tunable.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemTunable<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-tunable-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param post_system_tunable_endpoint_request:
        :type post_system_tunable_endpoint_request: PostSystemTunableEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_tunable_endpoint_serialize(
            post_system_tunable_endpoint_request=post_system_tunable_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemTunableEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_system_tunable_endpoint_without_preload_content(
        self,
        post_system_tunable_endpoint_request: Optional[PostSystemTunableEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_system_tunable_endpoint

        <h3>Description:</h3>Creates a new System Tunable.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: SystemTunable<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-tunable-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param post_system_tunable_endpoint_request:
        :type post_system_tunable_endpoint_request: PostSystemTunableEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_system_tunable_endpoint_serialize(
            post_system_tunable_endpoint_request=post_system_tunable_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemTunableEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_system_tunable_endpoint_serialize(
        self,
        post_system_tunable_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if post_system_tunable_endpoint_request is not None:
            _body_params = post_system_tunable_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/system/tunable',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_system_restapi_access_list_endpoint(
        self,
        put_system_restapi_access_list_endpoint_request_inner: Optional[List[PutSystemRESTAPIAccessListEndpointRequestInner]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemRESTAPIAccessListEndpoint200Response:
        """put_system_restapi_access_list_endpoint

        <h3>Description:</h3>Replaces all existing REST API Access List Entries.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: RESTAPIAccessListEntry<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-access-list-put ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param put_system_restapi_access_list_endpoint_request_inner:
        :type put_system_restapi_access_list_endpoint_request_inner: List[PutSystemRESTAPIAccessListEndpointRequestInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_system_restapi_access_list_endpoint_serialize(
            put_system_restapi_access_list_endpoint_request_inner=put_system_restapi_access_list_endpoint_request_inner,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIAccessListEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_system_restapi_access_list_endpoint_with_http_info(
        self,
        put_system_restapi_access_list_endpoint_request_inner: Optional[List[PutSystemRESTAPIAccessListEndpointRequestInner]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemRESTAPIAccessListEndpoint200Response]:
        """put_system_restapi_access_list_endpoint

        <h3>Description:</h3>Replaces all existing REST API Access List Entries.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: RESTAPIAccessListEntry<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-access-list-put ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param put_system_restapi_access_list_endpoint_request_inner:
        :type put_system_restapi_access_list_endpoint_request_inner: List[PutSystemRESTAPIAccessListEndpointRequestInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_system_restapi_access_list_endpoint_serialize(
            put_system_restapi_access_list_endpoint_request_inner=put_system_restapi_access_list_endpoint_request_inner,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIAccessListEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_system_restapi_access_list_endpoint_without_preload_content(
        self,
        put_system_restapi_access_list_endpoint_request_inner: Optional[List[PutSystemRESTAPIAccessListEndpointRequestInner]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """put_system_restapi_access_list_endpoint

        <h3>Description:</h3>Replaces all existing REST API Access List Entries.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: RESTAPIAccessListEntry<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-restapi-access-list-put ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param put_system_restapi_access_list_endpoint_request_inner:
        :type put_system_restapi_access_list_endpoint_request_inner: List[PutSystemRESTAPIAccessListEndpointRequestInner]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_system_restapi_access_list_endpoint_serialize(
            put_system_restapi_access_list_endpoint_request_inner=put_system_restapi_access_list_endpoint_request_inner,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemRESTAPIAccessListEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_system_restapi_access_list_endpoint_serialize(
        self,
        put_system_restapi_access_list_endpoint_request_inner,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'PutSystemRESTAPIAccessListEndpointRequestInner': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if put_system_restapi_access_list_endpoint_request_inner is not None:
            _body_params = put_system_restapi_access_list_endpoint_request_inner


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/api/v2/system/restapi/access_list',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_system_tunables_endpoint(
        self,
        post_system_tunable_endpoint_request: Optional[List[PostSystemTunableEndpointRequest]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSystemTunablesEndpoint200Response:
        """put_system_tunables_endpoint

        <h3>Description:</h3>Replaces all existing System Tunables.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: SystemTunable<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-tunables-put ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param post_system_tunable_endpoint_request:
        :type post_system_tunable_endpoint_request: List[PostSystemTunableEndpointRequest]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_system_tunables_endpoint_serialize(
            post_system_tunable_endpoint_request=post_system_tunable_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemTunablesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_system_tunables_endpoint_with_http_info(
        self,
        post_system_tunable_endpoint_request: Optional[List[PostSystemTunableEndpointRequest]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSystemTunablesEndpoint200Response]:
        """put_system_tunables_endpoint

        <h3>Description:</h3>Replaces all existing System Tunables.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: SystemTunable<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-tunables-put ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param post_system_tunable_endpoint_request:
        :type post_system_tunable_endpoint_request: List[PostSystemTunableEndpointRequest]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_system_tunables_endpoint_serialize(
            post_system_tunable_endpoint_request=post_system_tunable_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemTunablesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_system_tunables_endpoint_without_preload_content(
        self,
        post_system_tunable_endpoint_request: Optional[List[PostSystemTunableEndpointRequest]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """put_system_tunables_endpoint

        <h3>Description:</h3>Replaces all existing System Tunables.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: SystemTunable<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-system-tunables-put ]<br>**Required packages**: [ None ]<br>**Applies immediately**: No<br>**Utilizes cache**: None

        :param post_system_tunable_endpoint_request:
        :type post_system_tunable_endpoint_request: List[PostSystemTunableEndpointRequest]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_system_tunables_endpoint_serialize(
            post_system_tunable_endpoint_request=post_system_tunable_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetSystemTunablesEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_system_tunables_endpoint_serialize(
        self,
        post_system_tunable_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'PostSystemTunableEndpointRequest': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if post_system_tunable_endpoint_request is not None:
            _body_params = post_system_tunable_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/api/v2/system/tunables',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


