# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated
from pfsense_api_client.models.get_auth_keys_endpoint200_response import GetAuthKeysEndpoint200Response
from pfsense_api_client.models.post_auth_jwt_endpoint200_response import PostAuthJWTEndpoint200Response
from pfsense_api_client.models.post_auth_jwt_endpoint_request import PostAuthJWTEndpointRequest
from pfsense_api_client.models.post_auth_key_endpoint200_response import PostAuthKeyEndpoint200Response
from pfsense_api_client.models.post_auth_key_endpoint_request import PostAuthKeyEndpointRequest

from pfsense_api_client.api_client import ApiClient, RequestSerialized
from pfsense_api_client.api_response import ApiResponse
from pfsense_api_client.rest import RESTResponseType


class AUTHApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def delete_auth_key_endpoint(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostAuthKeyEndpoint200Response:
        """delete_auth_key_endpoint

        <h3>Description:</h3>Deletes an existing REST API Key.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIKey<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth ]<br>**Allowed privileges**: [ page-all, api-v2-auth-key-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_auth_key_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostAuthKeyEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_auth_key_endpoint_with_http_info(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostAuthKeyEndpoint200Response]:
        """delete_auth_key_endpoint

        <h3>Description:</h3>Deletes an existing REST API Key.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIKey<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth ]<br>**Allowed privileges**: [ page-all, api-v2-auth-key-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_auth_key_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostAuthKeyEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_auth_key_endpoint_without_preload_content(
        self,
        id: Annotated[Any, Field(description="The ID of the object to target.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_auth_key_endpoint

        <h3>Description:</h3>Deletes an existing REST API Key.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIKey<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth ]<br>**Allowed privileges**: [ page-all, api-v2-auth-key-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param id: The ID of the object to target. (required)
        :type id: DeleteAuthKeyEndpointIdParameter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_auth_key_endpoint_serialize(
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostAuthKeyEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_auth_key_endpoint_serialize(
        self,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v2/auth/key',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_auth_keys_endpoint(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to delete at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetAuthKeysEndpoint200Response:
        """delete_auth_keys_endpoint

        <h3>Description:</h3>Deletes multiple existing REST API Keys using a query.<br><br>WARNING: This will delete all objects that match the query, use with caution.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: RESTAPIKey<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-auth-keys-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param limit: The maximum number of objects to delete at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_auth_keys_endpoint_serialize(
            limit=limit,
            offset=offset,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetAuthKeysEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_auth_keys_endpoint_with_http_info(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to delete at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetAuthKeysEndpoint200Response]:
        """delete_auth_keys_endpoint

        <h3>Description:</h3>Deletes multiple existing REST API Keys using a query.<br><br>WARNING: This will delete all objects that match the query, use with caution.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: RESTAPIKey<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-auth-keys-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param limit: The maximum number of objects to delete at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_auth_keys_endpoint_serialize(
            limit=limit,
            offset=offset,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetAuthKeysEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_auth_keys_endpoint_without_preload_content(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of objects to delete at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_auth_keys_endpoint

        <h3>Description:</h3>Deletes multiple existing REST API Keys using a query.<br><br>WARNING: This will delete all objects that match the query, use with caution.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: RESTAPIKey<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-auth-keys-delete ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param limit: The maximum number of objects to delete at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define an actual parameter, rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_auth_keys_endpoint_serialize(
            limit=limit,
            offset=offset,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetAuthKeysEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_auth_keys_endpoint_serialize(
        self,
        limit,
        offset,
        query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v2/auth/keys',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_auth_keys_endpoint(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetAuthKeysEndpoint200Response:
        """get_auth_keys_endpoint

        <h3>Description:</h3>Reads all existing REST API Keys.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: RESTAPIKey<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-auth-keys-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_auth_keys_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetAuthKeysEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_auth_keys_endpoint_with_http_info(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetAuthKeysEndpoint200Response]:
        """get_auth_keys_endpoint

        <h3>Description:</h3>Reads all existing REST API Keys.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: RESTAPIKey<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-auth-keys-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_auth_keys_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetAuthKeysEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_auth_keys_endpoint_without_preload_content(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The number of objects to obtain at once. Set to 0 for no limit.")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="The starting point in the dataset to begin fetching objects.")] = None,
        sort_by: Annotated[Optional[List[StrictStr]], Field(description="The fields to sort response data by.")] = None,
        sort_order: Annotated[Optional[StrictStr], Field(description="The order to sort response data by.")] = None,
        sort_flags: Annotated[Optional[StrictStr], Field(description="The sort flag to use to customize the behavior of the sort.")] = None,
        query: Annotated[Optional[Dict[str, StrictStr]], Field(description="The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_auth_keys_endpoint

        <h3>Description:</h3>Reads all existing REST API Keys.<br><h3>Details:</h3>**Endpoint type**: Plural<br>**Associated model**: RESTAPIKey<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth, JWTAuth, KeyAuth ]<br>**Allowed privileges**: [ page-all, api-v2-auth-keys-get ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param limit: The number of objects to obtain at once. Set to 0 for no limit.
        :type limit: int
        :param offset: The starting point in the dataset to begin fetching objects.
        :type offset: int
        :param sort_by: The fields to sort response data by.
        :type sort_by: List[str]
        :param sort_order: The order to sort response data by.
        :type sort_order: str
        :param sort_flags: The sort flag to use to customize the behavior of the sort.
        :type sort_flags: str
        :param query: The arbitrary query parameters to include in the request.<br><br>Note: This does not define a real parameter (e.g. there is no `query` parameter), rather it allows for any arbitrary query parameters to be included in the request.
        :type query: Dict[str, str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_auth_keys_endpoint_serialize(
            limit=limit,
            offset=offset,
            sort_by=sort_by,
            sort_order=sort_order,
            sort_flags=sort_flags,
            query=query,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "GetAuthKeysEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_auth_keys_endpoint_serialize(
        self,
        limit,
        offset,
        sort_by,
        sort_order,
        sort_flags,
        query,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sort_by': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        if sort_order is not None:
            
            _query_params.append(('sort_order', sort_order))
            
        if sort_flags is not None:
            
            _query_params.append(('sort_flags', sort_flags))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'KeyAuth', 
            'BasicAuth', 
            'JWTAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/auth/keys',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_auth_jwt_endpoint(
        self,
        post_auth_jwt_endpoint_request: Optional[PostAuthJWTEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostAuthJWTEndpoint200Response:
        """post_auth_jwt_endpoint

        <h3>Description:</h3>Creates REST API JWT.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIJWT<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth ]<br>**Allowed privileges**: [ page-all, api-v2-auth-jwt-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param post_auth_jwt_endpoint_request:
        :type post_auth_jwt_endpoint_request: PostAuthJWTEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_auth_jwt_endpoint_serialize(
            post_auth_jwt_endpoint_request=post_auth_jwt_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostAuthJWTEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_auth_jwt_endpoint_with_http_info(
        self,
        post_auth_jwt_endpoint_request: Optional[PostAuthJWTEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostAuthJWTEndpoint200Response]:
        """post_auth_jwt_endpoint

        <h3>Description:</h3>Creates REST API JWT.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIJWT<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth ]<br>**Allowed privileges**: [ page-all, api-v2-auth-jwt-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param post_auth_jwt_endpoint_request:
        :type post_auth_jwt_endpoint_request: PostAuthJWTEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_auth_jwt_endpoint_serialize(
            post_auth_jwt_endpoint_request=post_auth_jwt_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostAuthJWTEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_auth_jwt_endpoint_without_preload_content(
        self,
        post_auth_jwt_endpoint_request: Optional[PostAuthJWTEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_auth_jwt_endpoint

        <h3>Description:</h3>Creates REST API JWT.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIJWT<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth ]<br>**Allowed privileges**: [ page-all, api-v2-auth-jwt-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Not Applicable<br>**Utilizes cache**: None

        :param post_auth_jwt_endpoint_request:
        :type post_auth_jwt_endpoint_request: PostAuthJWTEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_auth_jwt_endpoint_serialize(
            post_auth_jwt_endpoint_request=post_auth_jwt_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostAuthJWTEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_auth_jwt_endpoint_serialize(
        self,
        post_auth_jwt_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if post_auth_jwt_endpoint_request is not None:
            _body_params = post_auth_jwt_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/auth/jwt',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def post_auth_key_endpoint(
        self,
        post_auth_key_endpoint_request: Optional[PostAuthKeyEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PostAuthKeyEndpoint200Response:
        """post_auth_key_endpoint

        <h3>Description:</h3>Creates a new REST API Key.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIKey<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth ]<br>**Allowed privileges**: [ page-all, api-v2-auth-key-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_auth_key_endpoint_request:
        :type post_auth_key_endpoint_request: PostAuthKeyEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_auth_key_endpoint_serialize(
            post_auth_key_endpoint_request=post_auth_key_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostAuthKeyEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def post_auth_key_endpoint_with_http_info(
        self,
        post_auth_key_endpoint_request: Optional[PostAuthKeyEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PostAuthKeyEndpoint200Response]:
        """post_auth_key_endpoint

        <h3>Description:</h3>Creates a new REST API Key.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIKey<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth ]<br>**Allowed privileges**: [ page-all, api-v2-auth-key-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_auth_key_endpoint_request:
        :type post_auth_key_endpoint_request: PostAuthKeyEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_auth_key_endpoint_serialize(
            post_auth_key_endpoint_request=post_auth_key_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostAuthKeyEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def post_auth_key_endpoint_without_preload_content(
        self,
        post_auth_key_endpoint_request: Optional[PostAuthKeyEndpointRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """post_auth_key_endpoint

        <h3>Description:</h3>Creates a new REST API Key.<br><h3>Details:</h3>**Endpoint type**: Singular<br>**Associated model**: RESTAPIKey<br>**Parent model**: None<br>**Requires authentication**: Yes<br>**Supported authentication modes:** [ BasicAuth ]<br>**Allowed privileges**: [ page-all, api-v2-auth-key-post ]<br>**Required packages**: [ None ]<br>**Applies immediately**: Yes<br>**Utilizes cache**: None

        :param post_auth_key_endpoint_request:
        :type post_auth_key_endpoint_request: PostAuthKeyEndpointRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._post_auth_key_endpoint_serialize(
            post_auth_key_endpoint_request=post_auth_key_endpoint_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '401': "PostAuthJWTEndpoint401Response",
            '409': "PostAuthJWTEndpoint409Response",
            '424': "PostAuthJWTEndpoint424Response",
            '403': "PostAuthJWTEndpoint403Response",
            '200': "PostAuthKeyEndpoint200Response",
            '415': "PostAuthJWTEndpoint415Response",
            '405': "PostAuthJWTEndpoint405Response",
            '406': "PostAuthJWTEndpoint406Response",
            '404': "PostAuthJWTEndpoint404Response",
            '500': "PostAuthJWTEndpoint500Response",
            '503': "PostAuthJWTEndpoint503Response",
            '422': "PostAuthJWTEndpoint422Response",
            '400': "PostAuthJWTEndpoint400Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _post_auth_key_endpoint_serialize(
        self,
        post_auth_key_endpoint_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if post_auth_key_endpoint_request is not None:
            _body_params = post_auth_key_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'BasicAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/auth/key',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


