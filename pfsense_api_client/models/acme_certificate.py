# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from pfsense_api_client.models.acme_certificate_a_actionlist_inner import ACMECertificateAActionlistInner
from pfsense_api_client.models.acme_certificate_a_domainlist_inner import ACMECertificateADomainlistInner
from typing import Optional, Set
from typing_extensions import Self

class ACMECertificate(BaseModel):
    """
    ACMECertificate
    """ # noqa: E501
    name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The name of the ACME certificate.<br>")
    descr: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="A description of the ACME certificate.<br>")
    status: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='active', description="The activation status of the ACME certificate.<br>")
    acmeaccount: Optional[StrictStr] = Field(default=None, description="The ACME account key to use for the ACME certificate.<br>")
    keylength: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='2048', description="The length of the private key to use for the ACME certificate.<br>")
    keypaste: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The custom private key to use for the ACME certificate.<br><br>This field is only available when the following conditions are met:<br>- `keylength` must be equal to `'custom'`<br>")
    preferredchain: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The preferred certificate chain to use for the ACME certificate.<br>")
    oscpstaple: Optional[StrictBool] = Field(default=None, description="Whether to enable OCSP Stapling for the ACME certificate.<br>")
    dnssleep: Optional[Annotated[int, Field(le=3600, strict=True, ge=1)]] = Field(default=None, description="The number of seconds to wait for DNS propagation before requesting verification.<br>")
    renewafter: Optional[Annotated[int, Field(le=365, strict=True, ge=1)]] = Field(default=60, description="The number of days before expiration to renew the ACME certificate.<br>")
    a_domainlist: Optional[Annotated[List[ACMECertificateADomainlistInner], Field(min_length=1, max_length=100)]] = Field(default=None, description="The list of domain verifications  to include in the ACME certificate.<br>")
    a_actionlist: Optional[Annotated[List[ACMECertificateAActionlistInner], Field(min_length=0, max_length=65535)]] = Field(default=None, description="The list of actions to perform on the ACME certificate after being issued/renewed.<br>")
    __properties: ClassVar[List[str]] = ["name", "descr", "status", "acmeaccount", "keylength", "keypaste", "preferredchain", "oscpstaple", "dnssleep", "renewafter", "a_domainlist", "a_actionlist"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['active', 'disabled']):
            raise ValueError("must be one of enum values ('active', 'disabled')")
        return value

    @field_validator('keylength')
    def keylength_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['2048', '3072', '4096', 'ec-256', 'ec-384', 'custom']):
            raise ValueError("must be one of enum values ('2048', '3072', '4096', 'ec-256', 'ec-384', 'custom')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ACMECertificate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in a_domainlist (list)
        _items = []
        if self.a_domainlist:
            for _item_a_domainlist in self.a_domainlist:
                if _item_a_domainlist:
                    _items.append(_item_a_domainlist.to_dict())
            _dict['a_domainlist'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in a_actionlist (list)
        _items = []
        if self.a_actionlist:
            for _item_a_actionlist in self.a_actionlist:
                if _item_a_actionlist:
                    _items.append(_item_a_actionlist.to_dict())
            _dict['a_actionlist'] = _items
        # set to None if preferredchain (nullable) is None
        # and model_fields_set contains the field
        if self.preferredchain is None and "preferredchain" in self.model_fields_set:
            _dict['preferredchain'] = None

        # set to None if dnssleep (nullable) is None
        # and model_fields_set contains the field
        if self.dnssleep is None and "dnssleep" in self.model_fields_set:
            _dict['dnssleep'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ACMECertificate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "descr": obj.get("descr"),
            "status": obj.get("status") if obj.get("status") is not None else 'active',
            "acmeaccount": obj.get("acmeaccount"),
            "keylength": obj.get("keylength") if obj.get("keylength") is not None else '2048',
            "keypaste": obj.get("keypaste"),
            "preferredchain": obj.get("preferredchain"),
            "oscpstaple": obj.get("oscpstaple"),
            "dnssleep": obj.get("dnssleep"),
            "renewafter": obj.get("renewafter") if obj.get("renewafter") is not None else 60,
            "a_domainlist": [ACMECertificateADomainlistInner.from_dict(_item) for _item in obj["a_domainlist"]] if obj.get("a_domainlist") is not None else None,
            "a_actionlist": [ACMECertificateAActionlistInner.from_dict(_item) for _item in obj["a_actionlist"]] if obj.get("a_actionlist") is not None else None
        })
        return _obj


