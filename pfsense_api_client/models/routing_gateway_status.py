# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class RoutingGatewayStatus(BaseModel):
    """
    RoutingGatewayStatus
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name of the gateway this status corresponds to.<br>")
    srcip: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The current source IP being used to send monitoring probes to this gateway.<br>")
    monitorip: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The current IP being monitored for this gateway.<br>")
    delay: Optional[Union[Annotated[float, Field(le=99999999999999, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]] = Field(default=None, description="The current latency (in milliseconds) for this gateway.<br>")
    stddev: Optional[Union[Annotated[float, Field(le=99999999999999, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]] = Field(default=None, description="The standard deviation in latency (in milliseconds) for this gateway.<br>")
    loss: Optional[Union[Annotated[float, Field(le=99999999999999, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]] = Field(default=None, description="The current amount of packet loss (in percentage) for this gateway. This uses a whole percentage (0.0-100.0).<br>")
    status: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The current status of this gateway. Typically, this will indicate if the gateway is consider online or offline.<br>")
    substatus: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The current sub-status of this gateway. Typically, this provide details into problems this gateway is seeing such as latency or packet loss.<br>")
    __properties: ClassVar[List[str]] = ["name", "srcip", "monitorip", "delay", "stddev", "loss", "status", "substatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoutingGatewayStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "srcip",
            "monitorip",
            "delay",
            "stddev",
            "loss",
            "status",
            "substatus",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if srcip (nullable) is None
        # and model_fields_set contains the field
        if self.srcip is None and "srcip" in self.model_fields_set:
            _dict['srcip'] = None

        # set to None if monitorip (nullable) is None
        # and model_fields_set contains the field
        if self.monitorip is None and "monitorip" in self.model_fields_set:
            _dict['monitorip'] = None

        # set to None if delay (nullable) is None
        # and model_fields_set contains the field
        if self.delay is None and "delay" in self.model_fields_set:
            _dict['delay'] = None

        # set to None if stddev (nullable) is None
        # and model_fields_set contains the field
        if self.stddev is None and "stddev" in self.model_fields_set:
            _dict['stddev'] = None

        # set to None if loss (nullable) is None
        # and model_fields_set contains the field
        if self.loss is None and "loss" in self.model_fields_set:
            _dict['loss'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if substatus (nullable) is None
        # and model_fields_set contains the field
        if self.substatus is None and "substatus" in self.model_fields_set:
            _dict['substatus'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoutingGatewayStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "srcip": obj.get("srcip"),
            "monitorip": obj.get("monitorip"),
            "delay": obj.get("delay"),
            "stddev": obj.get("stddev"),
            "loss": obj.get("loss"),
            "status": obj.get("status"),
            "substatus": obj.get("substatus")
        })
        return _obj


