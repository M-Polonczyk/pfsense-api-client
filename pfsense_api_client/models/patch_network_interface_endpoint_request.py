# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PatchNetworkInterfaceEndpointRequest(BaseModel):
    """
    PatchNetworkInterfaceEndpointRequest
    """ # noqa: E501
    var_if: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=128)]] = Field(default=None, description="The real interface this configuration will be applied to.<br>", alias="if")
    enable: Optional[StrictBool] = Field(default=None, description="Enable or disable this interface.<br>")
    descr: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=128)]] = Field(default=None, description="The descriptive name for this interface.<br>")
    spoofmac: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=17)]] = Field(default=None, description="Assigns (spoofs) the MAC address for this interface instead of using the interface's real MAC.<br>")
    mtu: Optional[Annotated[int, Field(le=8192, strict=True, ge=1280)]] = Field(default=None, description="Sets the MTU for this interface. Assumes default MTU if value is `null`.<br>")
    mss: Optional[Annotated[int, Field(le=65535, strict=True, ge=576)]] = Field(default=None, description="Sets the MSS for this interface. Assumes default MSS if value is `null`.<br>")
    media: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Sets the link speed for this interface. In most situations this can be left as the default.<br>")
    mediaopt: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Sets the link duplex for this interface. In most situations this can be left as the default.<br>")
    blockpriv: Optional[StrictBool] = Field(default=None, description="Enable or disable automatically blocking RFC 1918 private networks on this interface.<br>")
    blockbogons: Optional[StrictBool] = Field(default=None, description="Enable or disable automatically blocking bogon networks on this interface.<br>")
    typev4: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Selects the IPv4 address type to assign this interface.<br>")
    ipaddr: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Sets the IPv4 address to assign to this interface.<br><br>This field is only available when the following conditions are met:<br>- `typev4` must be one of [ static, dhcp ]<br>")
    subnet: Optional[Annotated[int, Field(le=32, strict=True, ge=1)]] = Field(default=None, description="Sets the subnet bit count to assign this interface.<br><br>This field is only available when the following conditions are met:<br>- `typev4` must be equal to `'static'`<br>")
    gateway: Optional[StrictStr] = Field(default=None, description="Sets the upstream gateway this interface will use. This is only applicable for WAN-type interfaces.<br><br>This field is only available when the following conditions are met:<br>- `typev4` must be equal to `'static'`<br>")
    dhcphostname: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Sets the DHCP hostname this interface will advertise via DHCP.<br><br>This field is only available when the following conditions are met:<br>- `typev4` must be equal to `'dhcp'`<br>")
    alias_address: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Sets the value used as a fixed alias IPv4 address by the DHCP client.<br><br>This field is only available when the following conditions are met:<br>- `typev4` must be equal to `'dhcp'`<br>")
    alias_subnet: Optional[Annotated[int, Field(le=32, strict=True, ge=0)]] = Field(default=32, description="Sets the value used as the fixed alias IPv4 address's subnet bit count by the DHCP client.<br><br>This field is only available when the following conditions are met:<br>- `typev4` must be equal to `'dhcp'`<br>")
    dhcprejectfrom: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]], Field(min_length=0, max_length=128)]] = Field(default=None, description="Sets a list of IPv4 DHCP server addresses to reject DHCP offers for on this interface.<br><br>This field is only available when the following conditions are met:<br>- `typev4` must be equal to `'dhcp'`<br>")
    adv_dhcp_config_advanced: Optional[StrictBool] = Field(default=None, description="Enables or disables the advanced DHCP settings on this interface.<br><br>This field is only available when the following conditions are met:<br>- `typev4` must be equal to `'dhcp'`<br>")
    adv_dhcp_pt_values: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='SavedCfg', description="Selects the advanced DHCP timing preset.<br><br>This field is only available when the following conditions are met:<br>- `typev4` must be equal to `'dhcp'`<br>- `adv_dhcp_config_advanced` must be equal to `true`<br>")
    adv_dhcp_pt_timeout: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=1)]] = Field(default=None, description="Manually sets the timeout timing value used when requested DHCP leases on this interface.<br><br>This field is only available when the following conditions are met:<br>- `typev4` must be equal to `'dhcp'`<br>- `adv_dhcp_config_advanced` must be equal to `true`<br>")
    adv_dhcp_pt_retry: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=1)]] = Field(default=None, description="Manually sets the retry timing value used when requested DHCP leases on this interface.<br><br>This field is only available when the following conditions are met:<br>- `typev4` must be equal to `'dhcp'`<br>- `adv_dhcp_config_advanced` must be equal to `true`<br>")
    adv_dhcp_pt_select_timeout: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="Manually sets the select timing value used when requested DHCP leases on this interface.<br><br>This field is only available when the following conditions are met:<br>- `typev4` must be equal to `'dhcp'`<br>- `adv_dhcp_config_advanced` must be equal to `true`<br>")
    adv_dhcp_pt_reboot: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=1)]] = Field(default=None, description="Manually sets the reboot timing value used when requested DHCP leases on this interface.<br><br>This field is only available when the following conditions are met:<br>- `typev4` must be equal to `'dhcp'`<br>- `adv_dhcp_config_advanced` must be equal to `true`<br>")
    adv_dhcp_pt_backoff_cutoff: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=1)]] = Field(default=None, description="Manually sets the backoff cutoff timing value used when requested DHCP leases on this interface.<br><br>This field is only available when the following conditions are met:<br>- `typev4` must be equal to `'dhcp'`<br>- `adv_dhcp_config_advanced` must be equal to `true`<br>")
    adv_dhcp_pt_initial_interval: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=1)]] = Field(default=None, description="Manually sets the initial interval timing value used when requested DHCP leases on this interface.<br><br>This field is only available when the following conditions are met:<br>- `typev4` must be equal to `'dhcp'`<br>- `adv_dhcp_config_advanced` must be equal to `true`<br>")
    adv_dhcp_send_options: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Sets DHCP options to be sent when requesting a DHCP lease for this interface.<br><br>This field is only available when the following conditions are met:<br>- `typev4` must be equal to `'dhcp'`<br>- `adv_dhcp_config_advanced` must be equal to `true`<br>")
    adv_dhcp_request_options: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Sets DHCP option 55 values to be sent when requesting a DHCP lease for this interface.<br><br>This field is only available when the following conditions are met:<br>- `typev4` must be equal to `'dhcp'`<br>- `adv_dhcp_config_advanced` must be equal to `true`<br>")
    adv_dhcp_required_options: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Sets DHCP options required by the client when requesting a DHCP lease for this interface.<br><br>This field is only available when the following conditions are met:<br>- `typev4` must be equal to `'dhcp'`<br>- `adv_dhcp_config_advanced` must be equal to `true`<br>")
    adv_dhcp_option_modifiers: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Sets DHCP option modifiers applied to the obtained DHCP lease.<br><br>This field is only available when the following conditions are met:<br>- `typev4` must be equal to `'dhcp'`<br>- `adv_dhcp_config_advanced` must be equal to `true`<br>")
    adv_dhcp_config_file_override: Optional[StrictBool] = Field(default=None, description="Enables or disables overriding the entire DHCP configuration file for this interface.<br><br>This field is only available when the following conditions are met:<br>- `typev4` must be equal to `'dhcp'`<br>")
    adv_dhcp_config_file_override_path: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Sets the local file path of the custom DHCP configuration file.<br><br>This field is only available when the following conditions are met:<br>- `typev4` must be equal to `'dhcp'`<br>- `adv_dhcp_config_file_override` must be equal to `true`<br>")
    typev6: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Selects the IPv6 address type to assign this interface.<br>")
    ipaddrv6: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Sets the IPv6 address to assign to this interface.<br><br>This field is only available when the following conditions are met:<br>- `typev6` must be one of [ staticv6, dhcp6, slaac, 6rd, track6, 6to4 ]<br>")
    subnetv6: Optional[Annotated[int, Field(le=128, strict=True, ge=1)]] = Field(default=None, description="Sets the subnet bit count to assign this interface.<br><br>This field is only available when the following conditions are met:<br>- `typev6` must be equal to `'staticv6'`<br>")
    gatewayv6: Optional[StrictStr] = Field(default=None, description="Sets the upstream IPv6 gateway this interface will use. This is only applicable for WAN-type interfaces.<br><br>This field is only available when the following conditions are met:<br>- `typev6` must be equal to `'staticv6'`<br>")
    ipv6usev4iface: Optional[StrictBool] = Field(default=None, description="Enable or disable IPv6 using the IPv4 connectivity link (PPPoE).<br><br>This field is only available when the following conditions are met:<br>- `typev6` must be equal to `'staticv6'`<br>")
    slaacusev4iface: Optional[StrictBool] = Field(default=None, description="Enable or disable IPv6 using the IPv4 connectivity link (PPPoE).<br><br>This field is only available when the following conditions are met:<br>- `typev6` must be equal to `'slaac'`<br>")
    prefix_6rd: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Sets the 6RD IPv6 prefix assigned by the ISP for this interface.<br><br>This field is only available when the following conditions are met:<br>- `typev6` must be equal to `'6rd'`<br>")
    gateway_6rd: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Sets the 6RD IPv4 gateway address assigned by the ISP for this interface.<br><br>This field is only available when the following conditions are met:<br>- `typev6` must be equal to `'6rd'`<br>")
    prefix_6rd_v4plen: Optional[Annotated[int, Field(le=32, strict=True, ge=0)]] = Field(default=None, description="Sets the 6RD IPv4 prefix length. Normally specified by the ISP. A value of 0 means embed theentire IPv4 address in the 6RD prefix.<br><br>This field is only available when the following conditions are met:<br>- `typev6` must be equal to `'6rd'`<br>")
    track6_interface: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Sets the dynamic IPv6 WAN interface to track for configuration.<br><br>This field is only available when the following conditions are met:<br>- `typev6` must be equal to `'track6'`<br>")
    track6_prefix_id_hex: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Sets the hexadecimal IPv6 prefix ID. This determines the configurable network ID based on the dynamic IPv6 connection.<br><br>This field is only available when the following conditions are met:<br>- `typev6` must be equal to `'track6'`<br>")
    id: StrictInt = Field(description="The ID of the object or resource to interact with.")
    __properties: ClassVar[List[str]] = ["if", "enable", "descr", "spoofmac", "mtu", "mss", "media", "mediaopt", "blockpriv", "blockbogons", "typev4", "ipaddr", "subnet", "gateway", "dhcphostname", "alias_address", "alias_subnet", "dhcprejectfrom", "adv_dhcp_config_advanced", "adv_dhcp_pt_values", "adv_dhcp_pt_timeout", "adv_dhcp_pt_retry", "adv_dhcp_pt_select_timeout", "adv_dhcp_pt_reboot", "adv_dhcp_pt_backoff_cutoff", "adv_dhcp_pt_initial_interval", "adv_dhcp_send_options", "adv_dhcp_request_options", "adv_dhcp_required_options", "adv_dhcp_option_modifiers", "adv_dhcp_config_file_override", "adv_dhcp_config_file_override_path", "typev6", "ipaddrv6", "subnetv6", "gatewayv6", "ipv6usev4iface", "slaacusev4iface", "prefix_6rd", "gateway_6rd", "prefix_6rd_v4plen", "track6_interface", "track6_prefix_id_hex", "id"]

    @field_validator('typev4')
    def typev4_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['static', 'dhcp', 'none']):
            raise ValueError("must be one of enum values ('static', 'dhcp', 'none')")
        return value

    @field_validator('adv_dhcp_pt_values')
    def adv_dhcp_pt_values_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SavedCfg']):
            raise ValueError("must be one of enum values ('SavedCfg')")
        return value

    @field_validator('typev6')
    def typev6_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['staticv6', 'dhcp6', 'slaac', '6rd', 'track6', '6to4', 'none']):
            raise ValueError("must be one of enum values ('staticv6', 'dhcp6', 'slaac', '6rd', 'track6', '6to4', 'none')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchNetworkInterfaceEndpointRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if mtu (nullable) is None
        # and model_fields_set contains the field
        if self.mtu is None and "mtu" in self.model_fields_set:
            _dict['mtu'] = None

        # set to None if mss (nullable) is None
        # and model_fields_set contains the field
        if self.mss is None and "mss" in self.model_fields_set:
            _dict['mss'] = None

        # set to None if gateway (nullable) is None
        # and model_fields_set contains the field
        if self.gateway is None and "gateway" in self.model_fields_set:
            _dict['gateway'] = None

        # set to None if alias_subnet (nullable) is None
        # and model_fields_set contains the field
        if self.alias_subnet is None and "alias_subnet" in self.model_fields_set:
            _dict['alias_subnet'] = None

        # set to None if adv_dhcp_pt_timeout (nullable) is None
        # and model_fields_set contains the field
        if self.adv_dhcp_pt_timeout is None and "adv_dhcp_pt_timeout" in self.model_fields_set:
            _dict['adv_dhcp_pt_timeout'] = None

        # set to None if adv_dhcp_pt_retry (nullable) is None
        # and model_fields_set contains the field
        if self.adv_dhcp_pt_retry is None and "adv_dhcp_pt_retry" in self.model_fields_set:
            _dict['adv_dhcp_pt_retry'] = None

        # set to None if adv_dhcp_pt_select_timeout (nullable) is None
        # and model_fields_set contains the field
        if self.adv_dhcp_pt_select_timeout is None and "adv_dhcp_pt_select_timeout" in self.model_fields_set:
            _dict['adv_dhcp_pt_select_timeout'] = None

        # set to None if adv_dhcp_pt_reboot (nullable) is None
        # and model_fields_set contains the field
        if self.adv_dhcp_pt_reboot is None and "adv_dhcp_pt_reboot" in self.model_fields_set:
            _dict['adv_dhcp_pt_reboot'] = None

        # set to None if adv_dhcp_pt_backoff_cutoff (nullable) is None
        # and model_fields_set contains the field
        if self.adv_dhcp_pt_backoff_cutoff is None and "adv_dhcp_pt_backoff_cutoff" in self.model_fields_set:
            _dict['adv_dhcp_pt_backoff_cutoff'] = None

        # set to None if adv_dhcp_pt_initial_interval (nullable) is None
        # and model_fields_set contains the field
        if self.adv_dhcp_pt_initial_interval is None and "adv_dhcp_pt_initial_interval" in self.model_fields_set:
            _dict['adv_dhcp_pt_initial_interval'] = None

        # set to None if adv_dhcp_send_options (nullable) is None
        # and model_fields_set contains the field
        if self.adv_dhcp_send_options is None and "adv_dhcp_send_options" in self.model_fields_set:
            _dict['adv_dhcp_send_options'] = None

        # set to None if adv_dhcp_request_options (nullable) is None
        # and model_fields_set contains the field
        if self.adv_dhcp_request_options is None and "adv_dhcp_request_options" in self.model_fields_set:
            _dict['adv_dhcp_request_options'] = None

        # set to None if adv_dhcp_required_options (nullable) is None
        # and model_fields_set contains the field
        if self.adv_dhcp_required_options is None and "adv_dhcp_required_options" in self.model_fields_set:
            _dict['adv_dhcp_required_options'] = None

        # set to None if adv_dhcp_option_modifiers (nullable) is None
        # and model_fields_set contains the field
        if self.adv_dhcp_option_modifiers is None and "adv_dhcp_option_modifiers" in self.model_fields_set:
            _dict['adv_dhcp_option_modifiers'] = None

        # set to None if adv_dhcp_config_file_override_path (nullable) is None
        # and model_fields_set contains the field
        if self.adv_dhcp_config_file_override_path is None and "adv_dhcp_config_file_override_path" in self.model_fields_set:
            _dict['adv_dhcp_config_file_override_path'] = None

        # set to None if typev6 (nullable) is None
        # and model_fields_set contains the field
        if self.typev6 is None and "typev6" in self.model_fields_set:
            _dict['typev6'] = None

        # set to None if gatewayv6 (nullable) is None
        # and model_fields_set contains the field
        if self.gatewayv6 is None and "gatewayv6" in self.model_fields_set:
            _dict['gatewayv6'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchNetworkInterfaceEndpointRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "if": obj.get("if"),
            "enable": obj.get("enable"),
            "descr": obj.get("descr"),
            "spoofmac": obj.get("spoofmac"),
            "mtu": obj.get("mtu"),
            "mss": obj.get("mss"),
            "media": obj.get("media"),
            "mediaopt": obj.get("mediaopt"),
            "blockpriv": obj.get("blockpriv"),
            "blockbogons": obj.get("blockbogons"),
            "typev4": obj.get("typev4"),
            "ipaddr": obj.get("ipaddr"),
            "subnet": obj.get("subnet"),
            "gateway": obj.get("gateway"),
            "dhcphostname": obj.get("dhcphostname"),
            "alias_address": obj.get("alias_address"),
            "alias_subnet": obj.get("alias_subnet") if obj.get("alias_subnet") is not None else 32,
            "dhcprejectfrom": obj.get("dhcprejectfrom"),
            "adv_dhcp_config_advanced": obj.get("adv_dhcp_config_advanced"),
            "adv_dhcp_pt_values": obj.get("adv_dhcp_pt_values") if obj.get("adv_dhcp_pt_values") is not None else 'SavedCfg',
            "adv_dhcp_pt_timeout": obj.get("adv_dhcp_pt_timeout"),
            "adv_dhcp_pt_retry": obj.get("adv_dhcp_pt_retry"),
            "adv_dhcp_pt_select_timeout": obj.get("adv_dhcp_pt_select_timeout"),
            "adv_dhcp_pt_reboot": obj.get("adv_dhcp_pt_reboot"),
            "adv_dhcp_pt_backoff_cutoff": obj.get("adv_dhcp_pt_backoff_cutoff"),
            "adv_dhcp_pt_initial_interval": obj.get("adv_dhcp_pt_initial_interval"),
            "adv_dhcp_send_options": obj.get("adv_dhcp_send_options"),
            "adv_dhcp_request_options": obj.get("adv_dhcp_request_options"),
            "adv_dhcp_required_options": obj.get("adv_dhcp_required_options"),
            "adv_dhcp_option_modifiers": obj.get("adv_dhcp_option_modifiers"),
            "adv_dhcp_config_file_override": obj.get("adv_dhcp_config_file_override"),
            "adv_dhcp_config_file_override_path": obj.get("adv_dhcp_config_file_override_path"),
            "typev6": obj.get("typev6"),
            "ipaddrv6": obj.get("ipaddrv6"),
            "subnetv6": obj.get("subnetv6"),
            "gatewayv6": obj.get("gatewayv6"),
            "ipv6usev4iface": obj.get("ipv6usev4iface"),
            "slaacusev4iface": obj.get("slaacusev4iface"),
            "prefix_6rd": obj.get("prefix_6rd"),
            "gateway_6rd": obj.get("gateway_6rd"),
            "prefix_6rd_v4plen": obj.get("prefix_6rd_v4plen"),
            "track6_interface": obj.get("track6_interface"),
            "track6_prefix_id_hex": obj.get("track6_prefix_id_hex"),
            "id": obj.get("id")
        })
        return _obj


