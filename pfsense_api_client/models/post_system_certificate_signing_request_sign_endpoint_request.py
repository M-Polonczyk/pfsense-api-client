# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PostSystemCertificateSigningRequestSignEndpointRequest(BaseModel):
    """
    PostSystemCertificateSigningRequestSignEndpointRequest
    """ # noqa: E501
    descr: Annotated[str, Field(min_length=0, strict=True, max_length=1024)] = Field(description="The descriptive name for this certificate.<br>")
    refid: Optional[StrictStr] = Field(default='67ed081a85c9c', description="The unique ID assigned to this certificate for internal system use. This value is generated by this system and cannot be changed.<br>")
    caref: StrictStr = Field(description="The certificate authority to sign the certificate with.<br>")
    csr: StrictStr = Field(description="The X509 certificate signing request to sign.<br>")
    crt: Optional[StrictStr] = Field(default=None, description="The X509 certificate string.<br>")
    prv: Optional[StrictStr] = Field(default=None, description="The X509 private key string.<br>")
    digest_alg: Annotated[str, Field(min_length=0, strict=True, max_length=1024)] = Field(description="The digest method used when the certificate is signed.<br>")
    lifetime: Optional[Annotated[int, Field(le=12000, strict=True, ge=1)]] = Field(default=3650, description="The number of days the certificate is valid for.<br>")
    type: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='user', description="The type of certificate to generate.<br>")
    dn_dns_sans: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]], Field(min_length=0, max_length=128)]] = Field(default=None, description="The DNS Subject Alternative Names (SANs) for the certificate.<br>")
    dn_email_sans: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]], Field(min_length=0, max_length=128)]] = Field(default=None, description="The Email Subject Alternative Names (SANs) for the certificate.<br>")
    dn_ip_sans: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]], Field(min_length=0, max_length=128)]] = Field(default=None, description="The IP Subject Alternative Names (SANs) for the certificate.<br>")
    dn_uri_sans: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]], Field(min_length=0, max_length=128)]] = Field(default=None, description="The URI Subject Alternative Names (SANs) for the certificate.<br>")
    __properties: ClassVar[List[str]] = ["descr", "refid", "caref", "csr", "crt", "prv", "digest_alg", "lifetime", "type", "dn_dns_sans", "dn_email_sans", "dn_ip_sans", "dn_uri_sans"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['server', 'user']):
            raise ValueError("must be one of enum values ('server', 'user')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostSystemCertificateSigningRequestSignEndpointRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "refid",
            "crt",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if refid (nullable) is None
        # and model_fields_set contains the field
        if self.refid is None and "refid" in self.model_fields_set:
            _dict['refid'] = None

        # set to None if crt (nullable) is None
        # and model_fields_set contains the field
        if self.crt is None and "crt" in self.model_fields_set:
            _dict['crt'] = None

        # set to None if prv (nullable) is None
        # and model_fields_set contains the field
        if self.prv is None and "prv" in self.model_fields_set:
            _dict['prv'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostSystemCertificateSigningRequestSignEndpointRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "descr": obj.get("descr"),
            "refid": obj.get("refid") if obj.get("refid") is not None else '67ed081a85c9c',
            "caref": obj.get("caref"),
            "csr": obj.get("csr"),
            "crt": obj.get("crt"),
            "prv": obj.get("prv"),
            "digest_alg": obj.get("digest_alg"),
            "lifetime": obj.get("lifetime") if obj.get("lifetime") is not None else 3650,
            "type": obj.get("type") if obj.get("type") is not None else 'user',
            "dn_dns_sans": obj.get("dn_dns_sans"),
            "dn_email_sans": obj.get("dn_email_sans"),
            "dn_ip_sans": obj.get("dn_ip_sans"),
            "dn_uri_sans": obj.get("dn_uri_sans")
        })
        return _obj


