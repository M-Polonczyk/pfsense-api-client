# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class InterfaceStats(BaseModel):
    """
    InterfaceStats
    """ # noqa: E501
    name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The name of the interface.<br>")
    descr: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The description of the interface.<br>")
    hwif: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The hardware interface name of the interface.<br>")
    macaddr: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The MAC address of the interface.<br>")
    mtu: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The MTU of the interface.<br>")
    enable: Optional[StrictBool] = Field(default=None, description="Whether the interface is enabled.<br>")
    status: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The status of the interface.<br>")
    ipaddr: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The IPv4 address of the interface.<br>")
    subnet: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The IPv4 subnet of the interface.<br>")
    linklocal: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The IPv6 link-local address of the interface.<br>")
    ipaddrv6: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The IPv6 address of the interface.<br>")
    subnetv6: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The IPv6 subnet of the interface.<br>")
    inerrs: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The number of inbound errors on the interface.<br>")
    outerrs: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The number of outbound errors on the interface.<br>")
    collisions: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The number of collisions on the interface.<br>")
    inbytes: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The number of inbound bytes on the interface.<br>")
    inbytespass: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The number of inbound bytes passed on the interface.<br>")
    outbytes: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The number of outbound bytes on the interface.<br>")
    outbytespass: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The number of outbound bytes passed on the interface.<br>")
    inpkts: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The number of inbound packets on the interface.<br>")
    inpktspass: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The number of inbound packets passed on the interface.<br>")
    outpkts: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The number of outbound packets on the interface.<br>")
    outpktspass: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The number of outbound packets passed on the interface.<br>")
    dhcplink: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The DHCP link status of the interface.<br>")
    media: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The speed/duplex of the interface.<br>")
    gateway: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The IPv4 gateway of the interface.<br>")
    gatewayv6: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The IPv6 gateway of the interface.<br>")
    __properties: ClassVar[List[str]] = ["name", "descr", "hwif", "macaddr", "mtu", "enable", "status", "ipaddr", "subnet", "linklocal", "ipaddrv6", "subnetv6", "inerrs", "outerrs", "collisions", "inbytes", "inbytespass", "outbytes", "outbytespass", "inpkts", "inpktspass", "outpkts", "outpktspass", "dhcplink", "media", "gateway", "gatewayv6"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InterfaceStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if descr (nullable) is None
        # and model_fields_set contains the field
        if self.descr is None and "descr" in self.model_fields_set:
            _dict['descr'] = None

        # set to None if hwif (nullable) is None
        # and model_fields_set contains the field
        if self.hwif is None and "hwif" in self.model_fields_set:
            _dict['hwif'] = None

        # set to None if macaddr (nullable) is None
        # and model_fields_set contains the field
        if self.macaddr is None and "macaddr" in self.model_fields_set:
            _dict['macaddr'] = None

        # set to None if mtu (nullable) is None
        # and model_fields_set contains the field
        if self.mtu is None and "mtu" in self.model_fields_set:
            _dict['mtu'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if ipaddr (nullable) is None
        # and model_fields_set contains the field
        if self.ipaddr is None and "ipaddr" in self.model_fields_set:
            _dict['ipaddr'] = None

        # set to None if subnet (nullable) is None
        # and model_fields_set contains the field
        if self.subnet is None and "subnet" in self.model_fields_set:
            _dict['subnet'] = None

        # set to None if linklocal (nullable) is None
        # and model_fields_set contains the field
        if self.linklocal is None and "linklocal" in self.model_fields_set:
            _dict['linklocal'] = None

        # set to None if ipaddrv6 (nullable) is None
        # and model_fields_set contains the field
        if self.ipaddrv6 is None and "ipaddrv6" in self.model_fields_set:
            _dict['ipaddrv6'] = None

        # set to None if subnetv6 (nullable) is None
        # and model_fields_set contains the field
        if self.subnetv6 is None and "subnetv6" in self.model_fields_set:
            _dict['subnetv6'] = None

        # set to None if dhcplink (nullable) is None
        # and model_fields_set contains the field
        if self.dhcplink is None and "dhcplink" in self.model_fields_set:
            _dict['dhcplink'] = None

        # set to None if media (nullable) is None
        # and model_fields_set contains the field
        if self.media is None and "media" in self.model_fields_set:
            _dict['media'] = None

        # set to None if gateway (nullable) is None
        # and model_fields_set contains the field
        if self.gateway is None and "gateway" in self.model_fields_set:
            _dict['gateway'] = None

        # set to None if gatewayv6 (nullable) is None
        # and model_fields_set contains the field
        if self.gatewayv6 is None and "gatewayv6" in self.model_fields_set:
            _dict['gatewayv6'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InterfaceStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "descr": obj.get("descr"),
            "hwif": obj.get("hwif"),
            "macaddr": obj.get("macaddr"),
            "mtu": obj.get("mtu"),
            "enable": obj.get("enable"),
            "status": obj.get("status"),
            "ipaddr": obj.get("ipaddr"),
            "subnet": obj.get("subnet"),
            "linklocal": obj.get("linklocal"),
            "ipaddrv6": obj.get("ipaddrv6"),
            "subnetv6": obj.get("subnetv6"),
            "inerrs": obj.get("inerrs"),
            "outerrs": obj.get("outerrs"),
            "collisions": obj.get("collisions"),
            "inbytes": obj.get("inbytes"),
            "inbytespass": obj.get("inbytespass"),
            "outbytes": obj.get("outbytes"),
            "outbytespass": obj.get("outbytespass"),
            "inpkts": obj.get("inpkts"),
            "inpktspass": obj.get("inpktspass"),
            "outpkts": obj.get("outpkts"),
            "outpktspass": obj.get("outpktspass"),
            "dhcplink": obj.get("dhcplink"),
            "media": obj.get("media"),
            "gateway": obj.get("gateway"),
            "gatewayv6": obj.get("gatewayv6")
        })
        return _obj


