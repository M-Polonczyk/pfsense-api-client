# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class WireGuardSettings(BaseModel):
    """
    WireGuardSettings
    """ # noqa: E501
    enable: Optional[StrictBool] = Field(default=None, description="Enables or disables WireGuard on this system. WireGuard cannot be disabled when one or more tunnels is assigned to a pfSense interface.<br>")
    keep_conf: Optional[StrictBool] = Field(default=True, description="Enables or disables keeping the WireGuard configuration when the package is uninstalled/reinstalled.<br>")
    resolve_interval_track: Optional[StrictBool] = Field(default=None, description="Enables or disables tracking the 'Aliases Hostnames Resolve Interval' value as the `resolve_internal` value instead of specifying a value directly.<br>")
    resolve_interval: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=300, description="The interval (in seconds) for re-resolving endpoint host/domain names.<br><br>This field is only available when the following conditions are met:<br>- `resolve_interval_track` must be equal to `false`<br>")
    interface_group: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='all', description="Configures which WireGuard tunnels are members of the WireGuard interface group.<br>")
    hide_secrets: Optional[StrictBool] = Field(default=None, description="Enables or disables hiding all secrets (private and pre-shared keys) in the user interface.<br>")
    hide_peers: Optional[StrictBool] = Field(default=None, description="Enables or disables initially hiding all peers in the user interface.<br>")
    __properties: ClassVar[List[str]] = ["enable", "keep_conf", "resolve_interval_track", "resolve_interval", "interface_group", "hide_secrets", "hide_peers"]

    @field_validator('interface_group')
    def interface_group_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['all', 'unassigned', 'none']):
            raise ValueError("must be one of enum values ('all', 'unassigned', 'none')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WireGuardSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WireGuardSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enable": obj.get("enable"),
            "keep_conf": obj.get("keep_conf") if obj.get("keep_conf") is not None else True,
            "resolve_interval_track": obj.get("resolve_interval_track"),
            "resolve_interval": obj.get("resolve_interval") if obj.get("resolve_interval") is not None else 300,
            "interface_group": obj.get("interface_group") if obj.get("interface_group") is not None else 'all',
            "hide_secrets": obj.get("hide_secrets"),
            "hide_peers": obj.get("hide_peers")
        })
        return _obj


