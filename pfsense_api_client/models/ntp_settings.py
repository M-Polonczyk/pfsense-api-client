# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class NTPSettings(BaseModel):
    """
    NTPSettings
    """ # noqa: E501
    enable: Optional[StrictBool] = Field(default=True, description="Enables or disabled the NTP server.<br>")
    interface: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]], Field(min_length=0, max_length=128)]] = Field(default=None, description="The interfaces the NTP server will listen on.<br>")
    ntpmaxpeers: Optional[Annotated[int, Field(le=25, strict=True, ge=4)]] = Field(default=5, description="The maximum number of candidate peers in the NTP pool.<br>")
    orphan: Optional[Annotated[int, Field(le=15, strict=True, ge=1)]] = Field(default=12, description="The orphan mode stratum to set. Orphan mode allows the system clock to be used when no other clocks are available. The number here specifies the stratum reported during orphan mode and should normally be set to a number high enough to ensure that any other servers available to clients are preferred over this server<br>")
    ntpminpoll: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The minimum poll interval for NTP messages. Use empty string to assume system default, and `omit` to not set this value.<br>")
    ntpmaxpoll: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The maximum poll interval for NTP messages. Use empty string to assume system default, and `omit` to not set this value. This value must be greater than the `ntpminpoll`.<br>")
    dnsresolv: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='auto', description="The IP protocol peers are forced to use for DNS resolution.<br>")
    logpeer: Optional[StrictBool] = Field(default=None, description="Enable or disable logging peer messages.<br>")
    logsys: Optional[StrictBool] = Field(default=None, description="Enable or disable logging system messages.<br>")
    clockstats: Optional[StrictBool] = Field(default=None, description="Enable or disable logging reference clock statistics.<br>")
    loopstats: Optional[StrictBool] = Field(default=None, description="Enable or disable logging clock discipline statistics.<br>")
    peerstats: Optional[StrictBool] = Field(default=None, description="Enable or disable logging peer statistics.<br>")
    statsgraph: Optional[StrictBool] = Field(default=None, description="Enable or disable RRD graphs for NTP statistics.<br>")
    leapsec: Optional[StrictStr] = Field(default=None, description="The Leap second configuration as text.<br>")
    serverauth: Optional[StrictBool] = Field(default=None, description="Enable or disable NTPv3 server authentication. (RFC 1305)<br>")
    serverauthkey: Optional[StrictStr] = Field(default=None, description="The NTP server authentication key.<br><br>This field is only available when the following conditions are met:<br>- `serverauth` must be equal to `true`<br>")
    serverauthalgo: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='md5', description="The digest algorithm for the server authentication key.<br>")
    __properties: ClassVar[List[str]] = ["enable", "interface", "ntpmaxpeers", "orphan", "ntpminpoll", "ntpmaxpoll", "dnsresolv", "logpeer", "logsys", "clockstats", "loopstats", "peerstats", "statsgraph", "leapsec", "serverauth", "serverauthkey", "serverauthalgo"]

    @field_validator('ntpminpoll')
    def ntpminpoll_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', 'omit']):
            raise ValueError("must be one of enum values ('', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', 'omit')")
        return value

    @field_validator('ntpmaxpoll')
    def ntpmaxpoll_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', 'omit']):
            raise ValueError("must be one of enum values ('', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', 'omit')")
        return value

    @field_validator('dnsresolv')
    def dnsresolv_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['auto', 'inet', 'inet6']):
            raise ValueError("must be one of enum values ('auto', 'inet', 'inet6')")
        return value

    @field_validator('serverauthalgo')
    def serverauthalgo_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['md5', 'sha1', 'sha256']):
            raise ValueError("must be one of enum values ('md5', 'sha1', 'sha256')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NTPSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NTPSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enable": obj.get("enable") if obj.get("enable") is not None else True,
            "interface": obj.get("interface"),
            "ntpmaxpeers": obj.get("ntpmaxpeers") if obj.get("ntpmaxpeers") is not None else 5,
            "orphan": obj.get("orphan") if obj.get("orphan") is not None else 12,
            "ntpminpoll": obj.get("ntpminpoll"),
            "ntpmaxpoll": obj.get("ntpmaxpoll"),
            "dnsresolv": obj.get("dnsresolv") if obj.get("dnsresolv") is not None else 'auto',
            "logpeer": obj.get("logpeer"),
            "logsys": obj.get("logsys"),
            "clockstats": obj.get("clockstats"),
            "loopstats": obj.get("loopstats"),
            "peerstats": obj.get("peerstats"),
            "statsgraph": obj.get("statsgraph"),
            "leapsec": obj.get("leapsec"),
            "serverauth": obj.get("serverauth"),
            "serverauthkey": obj.get("serverauthkey"),
            "serverauthalgo": obj.get("serverauthalgo") if obj.get("serverauthalgo") is not None else 'md5'
        })
        return _obj


