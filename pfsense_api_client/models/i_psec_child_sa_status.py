# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class IPsecChildSAStatus(BaseModel):
    """
    IPsecChildSAStatus
    """ # noqa: E501
    name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The name of the connection ID for the child SA.<br>")
    uniqueid: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The unique ID of the child SA.<br>")
    reqid: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The request ID of the child SA.<br>")
    state: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The current state of the child SA.<br>")
    mode: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The mode of the child SA.<br>")
    protocol: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The protocol of the child SA.<br>")
    encap: Optional[StrictBool] = Field(default=None, description="Whether encapsulation is used for the child SA.<br>")
    spi_in: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The incoming SPI of the child SA.<br>")
    spi_out: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The outgoing SPI of the child SA.<br>")
    encr_alg: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The encryption algorithm used by the child SA.<br>")
    encr_keysize: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The encryption key size used by the child SA.<br>")
    integ_alg: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The integrity algorithm used by the child SA.<br>")
    dh_group: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The Diffie-Hellman group used by the child SA.<br>")
    bytes_in: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The number of bytes received by the child SA.<br>")
    bytes_out: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The number of bytes sent by the child SA.<br>")
    packets_in: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The number of packets received by the child SA.<br>")
    packets_out: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The number of packets sent by the child SA.<br>")
    use_in: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The number of times the child SA has been used to receive data.<br>")
    use_out: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The number of times the child SA has been used to send data.<br>")
    rekey_time: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The time at which the child SA will be rekeyed.<br>")
    life_time: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The time at which the child SA will expire.<br>")
    install_time: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The time at which the child SA was installed.<br>")
    local_ts: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]], Field(min_length=0, max_length=128)]] = Field(default=None, description="The local traffic selector of the child SA.<br>")
    remote_ts: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]], Field(min_length=0, max_length=128)]] = Field(default=None, description="The remote traffic selector of the child SA.<br>")
    __properties: ClassVar[List[str]] = ["name", "uniqueid", "reqid", "state", "mode", "protocol", "encap", "spi_in", "spi_out", "encr_alg", "encr_keysize", "integ_alg", "dh_group", "bytes_in", "bytes_out", "packets_in", "packets_out", "use_in", "use_out", "rekey_time", "life_time", "install_time", "local_ts", "remote_ts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IPsecChildSAStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "uniqueid",
            "reqid",
            "state",
            "mode",
            "protocol",
            "encap",
            "spi_in",
            "spi_out",
            "encr_alg",
            "encr_keysize",
            "integ_alg",
            "dh_group",
            "bytes_in",
            "bytes_out",
            "packets_in",
            "packets_out",
            "use_in",
            "use_out",
            "rekey_time",
            "life_time",
            "install_time",
            "local_ts",
            "remote_ts",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if uniqueid (nullable) is None
        # and model_fields_set contains the field
        if self.uniqueid is None and "uniqueid" in self.model_fields_set:
            _dict['uniqueid'] = None

        # set to None if reqid (nullable) is None
        # and model_fields_set contains the field
        if self.reqid is None and "reqid" in self.model_fields_set:
            _dict['reqid'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if mode (nullable) is None
        # and model_fields_set contains the field
        if self.mode is None and "mode" in self.model_fields_set:
            _dict['mode'] = None

        # set to None if protocol (nullable) is None
        # and model_fields_set contains the field
        if self.protocol is None and "protocol" in self.model_fields_set:
            _dict['protocol'] = None

        # set to None if encap (nullable) is None
        # and model_fields_set contains the field
        if self.encap is None and "encap" in self.model_fields_set:
            _dict['encap'] = None

        # set to None if spi_in (nullable) is None
        # and model_fields_set contains the field
        if self.spi_in is None and "spi_in" in self.model_fields_set:
            _dict['spi_in'] = None

        # set to None if spi_out (nullable) is None
        # and model_fields_set contains the field
        if self.spi_out is None and "spi_out" in self.model_fields_set:
            _dict['spi_out'] = None

        # set to None if encr_alg (nullable) is None
        # and model_fields_set contains the field
        if self.encr_alg is None and "encr_alg" in self.model_fields_set:
            _dict['encr_alg'] = None

        # set to None if encr_keysize (nullable) is None
        # and model_fields_set contains the field
        if self.encr_keysize is None and "encr_keysize" in self.model_fields_set:
            _dict['encr_keysize'] = None

        # set to None if integ_alg (nullable) is None
        # and model_fields_set contains the field
        if self.integ_alg is None and "integ_alg" in self.model_fields_set:
            _dict['integ_alg'] = None

        # set to None if dh_group (nullable) is None
        # and model_fields_set contains the field
        if self.dh_group is None and "dh_group" in self.model_fields_set:
            _dict['dh_group'] = None

        # set to None if bytes_in (nullable) is None
        # and model_fields_set contains the field
        if self.bytes_in is None and "bytes_in" in self.model_fields_set:
            _dict['bytes_in'] = None

        # set to None if bytes_out (nullable) is None
        # and model_fields_set contains the field
        if self.bytes_out is None and "bytes_out" in self.model_fields_set:
            _dict['bytes_out'] = None

        # set to None if packets_in (nullable) is None
        # and model_fields_set contains the field
        if self.packets_in is None and "packets_in" in self.model_fields_set:
            _dict['packets_in'] = None

        # set to None if packets_out (nullable) is None
        # and model_fields_set contains the field
        if self.packets_out is None and "packets_out" in self.model_fields_set:
            _dict['packets_out'] = None

        # set to None if use_in (nullable) is None
        # and model_fields_set contains the field
        if self.use_in is None and "use_in" in self.model_fields_set:
            _dict['use_in'] = None

        # set to None if use_out (nullable) is None
        # and model_fields_set contains the field
        if self.use_out is None and "use_out" in self.model_fields_set:
            _dict['use_out'] = None

        # set to None if rekey_time (nullable) is None
        # and model_fields_set contains the field
        if self.rekey_time is None and "rekey_time" in self.model_fields_set:
            _dict['rekey_time'] = None

        # set to None if life_time (nullable) is None
        # and model_fields_set contains the field
        if self.life_time is None and "life_time" in self.model_fields_set:
            _dict['life_time'] = None

        # set to None if install_time (nullable) is None
        # and model_fields_set contains the field
        if self.install_time is None and "install_time" in self.model_fields_set:
            _dict['install_time'] = None

        # set to None if local_ts (nullable) is None
        # and model_fields_set contains the field
        if self.local_ts is None and "local_ts" in self.model_fields_set:
            _dict['local_ts'] = None

        # set to None if remote_ts (nullable) is None
        # and model_fields_set contains the field
        if self.remote_ts is None and "remote_ts" in self.model_fields_set:
            _dict['remote_ts'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IPsecChildSAStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "uniqueid": obj.get("uniqueid"),
            "reqid": obj.get("reqid"),
            "state": obj.get("state"),
            "mode": obj.get("mode"),
            "protocol": obj.get("protocol"),
            "encap": obj.get("encap"),
            "spi_in": obj.get("spi_in"),
            "spi_out": obj.get("spi_out"),
            "encr_alg": obj.get("encr_alg"),
            "encr_keysize": obj.get("encr_keysize"),
            "integ_alg": obj.get("integ_alg"),
            "dh_group": obj.get("dh_group"),
            "bytes_in": obj.get("bytes_in"),
            "bytes_out": obj.get("bytes_out"),
            "packets_in": obj.get("packets_in"),
            "packets_out": obj.get("packets_out"),
            "use_in": obj.get("use_in"),
            "use_out": obj.get("use_out"),
            "rekey_time": obj.get("rekey_time"),
            "life_time": obj.get("life_time"),
            "install_time": obj.get("install_time"),
            "local_ts": obj.get("local_ts"),
            "remote_ts": obj.get("remote_ts")
        })
        return _obj


