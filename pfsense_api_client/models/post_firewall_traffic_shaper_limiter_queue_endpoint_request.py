# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PostFirewallTrafficShaperLimiterQueueEndpointRequest(BaseModel):
    """
    PostFirewallTrafficShaperLimiterQueueEndpointRequest
    """ # noqa: E501
    name: Annotated[str, Field(min_length=0, strict=True, max_length=1024)] = Field(description="The unique name for this limiter queue.<br>")
    number: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=1, description="A unique number auto-assigned to this limiter. This is only used internally by the system and cannot be manually set or changed.<br>")
    enabled: Optional[StrictBool] = Field(default=None, description="Enables or disables this limiter queue.<br>")
    mask: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='none', description="If `source` or `destination` slots is chosen a dynamic pipe with the bandwidth, delay, packet loss and queue size given above will be created for each source/destination IP address encountered, respectively. This makes it possible to easily specify bandwidth limits per host or subnet.<br>")
    maskbits: Optional[Annotated[int, Field(le=32, strict=True, ge=1)]] = Field(default=32, description="The IPv4 mask bits to use when determine the scope of the dynamic pipe for IPv4 traffic.<br><br>This field is only available when the following conditions are met:<br>- `mask` must be one of [ srcaddress, dstaddress ]<br>")
    maskbitsv6: Optional[Annotated[int, Field(le=128, strict=True, ge=1)]] = Field(default=128, description="The IPv6 mask bits to use when determine the scope of the dynamic pipe for IPv4 traffic.<br><br>This field is only available when the following conditions are met:<br>- `mask` must be one of [ srcaddress, dstaddress ]<br>")
    qlimit: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=1)]] = Field(default=None, description="The length of the limiter's queue which the scheduler and AQM are responsible for. Set to `null` to assume default.<br>")
    ecn: Optional[StrictBool] = Field(default=None, description="Enable or disable ECN. ECN sets a reserved TCP flag when the queue is nearing or exceeding capacity. Not all AQMs or schedulers support this.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be one of [ codel, pie, red, gred ]<br>- `sched` must be one of [ fq_codel, fq_pie ]<br>")
    description: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The verbose description for this limiter queue.<br>")
    aqm: Annotated[str, Field(min_length=0, strict=True, max_length=1024)] = Field(description="The Active Queue Management (AQM) algorithm to use for this queue. AQM is the intelligent drop of network packets inside the queue, when it becomes full or gets close to becoming full, with the goal of reducing network congestion.<br>")
    param_codel_target: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the CoDel target parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'codel'`<br>")
    param_codel_interval: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the CoDel interval parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'codel'`<br>")
    param_pie_target: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the PIE target parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'pie'`<br>")
    param_pie_tupdate: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the PIE tupdate parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'pie'`<br>")
    param_pie_alpha: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the PIE alpha parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'pie'`<br>")
    param_pie_beta: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the PIE beta parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'pie'`<br>")
    param_pie_max_burst: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the PIE max_burst parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'pie'`<br>")
    param_pie_max_ecnth: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the PIE ecnth parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'pie'`<br>")
    pie_onoff: Optional[StrictBool] = Field(default=None, description="Enable or disable turning PIE on and off depending on queue load.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'pie'`<br>")
    pie_capdrop: Optional[StrictBool] = Field(default=None, description="Enable or disable cap drop adjustment.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'pie'`<br>")
    pie_qdelay: Optional[StrictBool] = Field(default=None, description="Set queue delay type to timestamps (true) or departure rate estimation (false).<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'pie'`<br>")
    pie_pderand: Optional[StrictBool] = Field(default=None, description="Enable or disable drop probability de-randomisation.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'pie'`<br>")
    param_red_w_q: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=1, description="The value for the RED w_q parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'red'`<br>")
    param_red_min_th: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the RED min_th parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'red'`<br>")
    param_red_max_th: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=1, description="The value for the RED max_th parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'red'`<br>")
    param_red_max_p: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=1, description="The value for the RED max_p parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'red'`<br>")
    param_gred_w_q: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=1, description="The value for the GRED w_q parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'gred'`<br>")
    param_gred_min_th: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the GRED min_th parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'gred'`<br>")
    param_gred_max_th: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=1, description="The value for the GRED max_th parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'gred'`<br>")
    param_gred_max_p: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=1, description="The value for the GRED max_p parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'gred'`<br>")
    weight: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = Field(default=None, description="The share of the parent limiter this queue gets.<br>")
    plr: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=None, description="The amount of packet loss (in percentage) added to traffic passing through this limiter queue.<br>")
    buckets: Optional[Annotated[int, Field(le=65535, strict=True, ge=16)]] = Field(default=None, description="The limiter queue's bucket size (slots).<br>")
    parent_id: StrictInt = Field(description="The ID of the parent this object is nested under.")
    __properties: ClassVar[List[str]] = ["name", "number", "enabled", "mask", "maskbits", "maskbitsv6", "qlimit", "ecn", "description", "aqm", "param_codel_target", "param_codel_interval", "param_pie_target", "param_pie_tupdate", "param_pie_alpha", "param_pie_beta", "param_pie_max_burst", "param_pie_max_ecnth", "pie_onoff", "pie_capdrop", "pie_qdelay", "pie_pderand", "param_red_w_q", "param_red_min_th", "param_red_max_th", "param_red_max_p", "param_gred_w_q", "param_gred_min_th", "param_gred_max_th", "param_gred_max_p", "weight", "plr", "buckets", "parent_id"]

    @field_validator('mask')
    def mask_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['none', 'srcaddress', 'dstaddress']):
            raise ValueError("must be one of enum values ('none', 'srcaddress', 'dstaddress')")
        return value

    @field_validator('aqm')
    def aqm_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['droptail', 'codel', 'pie', 'red', 'gred']):
            raise ValueError("must be one of enum values ('droptail', 'codel', 'pie', 'red', 'gred')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostFirewallTrafficShaperLimiterQueueEndpointRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "number",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if number (nullable) is None
        # and model_fields_set contains the field
        if self.number is None and "number" in self.model_fields_set:
            _dict['number'] = None

        # set to None if qlimit (nullable) is None
        # and model_fields_set contains the field
        if self.qlimit is None and "qlimit" in self.model_fields_set:
            _dict['qlimit'] = None

        # set to None if weight (nullable) is None
        # and model_fields_set contains the field
        if self.weight is None and "weight" in self.model_fields_set:
            _dict['weight'] = None

        # set to None if plr (nullable) is None
        # and model_fields_set contains the field
        if self.plr is None and "plr" in self.model_fields_set:
            _dict['plr'] = None

        # set to None if buckets (nullable) is None
        # and model_fields_set contains the field
        if self.buckets is None and "buckets" in self.model_fields_set:
            _dict['buckets'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostFirewallTrafficShaperLimiterQueueEndpointRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "number": obj.get("number") if obj.get("number") is not None else 1,
            "enabled": obj.get("enabled"),
            "mask": obj.get("mask") if obj.get("mask") is not None else 'none',
            "maskbits": obj.get("maskbits") if obj.get("maskbits") is not None else 32,
            "maskbitsv6": obj.get("maskbitsv6") if obj.get("maskbitsv6") is not None else 128,
            "qlimit": obj.get("qlimit"),
            "ecn": obj.get("ecn"),
            "description": obj.get("description"),
            "aqm": obj.get("aqm"),
            "param_codel_target": obj.get("param_codel_target"),
            "param_codel_interval": obj.get("param_codel_interval"),
            "param_pie_target": obj.get("param_pie_target"),
            "param_pie_tupdate": obj.get("param_pie_tupdate"),
            "param_pie_alpha": obj.get("param_pie_alpha"),
            "param_pie_beta": obj.get("param_pie_beta"),
            "param_pie_max_burst": obj.get("param_pie_max_burst"),
            "param_pie_max_ecnth": obj.get("param_pie_max_ecnth"),
            "pie_onoff": obj.get("pie_onoff"),
            "pie_capdrop": obj.get("pie_capdrop"),
            "pie_qdelay": obj.get("pie_qdelay"),
            "pie_pderand": obj.get("pie_pderand"),
            "param_red_w_q": obj.get("param_red_w_q") if obj.get("param_red_w_q") is not None else 1,
            "param_red_min_th": obj.get("param_red_min_th"),
            "param_red_max_th": obj.get("param_red_max_th") if obj.get("param_red_max_th") is not None else 1,
            "param_red_max_p": obj.get("param_red_max_p") if obj.get("param_red_max_p") is not None else 1,
            "param_gred_w_q": obj.get("param_gred_w_q") if obj.get("param_gred_w_q") is not None else 1,
            "param_gred_min_th": obj.get("param_gred_min_th"),
            "param_gred_max_th": obj.get("param_gred_max_th") if obj.get("param_gred_max_th") is not None else 1,
            "param_gred_max_p": obj.get("param_gred_max_p") if obj.get("param_gred_max_p") is not None else 1,
            "weight": obj.get("weight"),
            "plr": obj.get("plr"),
            "buckets": obj.get("buckets"),
            "parent_id": obj.get("parent_id")
        })
        return _obj


