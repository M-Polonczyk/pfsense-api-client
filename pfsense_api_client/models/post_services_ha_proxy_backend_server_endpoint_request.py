# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PostServicesHAProxyBackendServerEndpointRequest(BaseModel):
    """
    PostServicesHAProxyBackendServerEndpointRequest
    """ # noqa: E501
    name: Annotated[str, Field(min_length=2, strict=True, max_length=1024)] = Field(description="The unique name for this backend server.<br>")
    status: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='active', description="The eligibility status for this backend server.<br>")
    address: Annotated[str, Field(min_length=0, strict=True, max_length=1024)] = Field(description="The hostname or IP address of this backend server. Hostname values are only resolved at service startup.<br>")
    port: StrictStr = Field(description="The port to forward to for this backend server. Valid options are: a TCP/UDP port number<br>")
    weight: Optional[Annotated[int, Field(le=256, strict=True, ge=0)]] = Field(default=1, description="The weight of this backend server when load balancing.<br>")
    ssl: Optional[StrictBool] = Field(default=None, description="Enables or disables using SSL/TLS when forwarding to this backend server.<br>")
    sslserververify: Optional[StrictBool] = Field(default=None, description="Enables or disables verifying the SSL/TLS certificate when forwarding to this backend server.<br>")
    serverid: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=175, description="The unique ID for this backend server. This value is set by the system for internal use and cannot be changed.<br>")
    parent_id: StrictInt = Field(description="The ID of the parent this object is nested under.")
    __properties: ClassVar[List[str]] = ["name", "status", "address", "port", "weight", "ssl", "sslserververify", "serverid", "parent_id"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['active', 'backup', 'disabled', 'inactive']):
            raise ValueError("must be one of enum values ('active', 'backup', 'disabled', 'inactive')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostServicesHAProxyBackendServerEndpointRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "serverid",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if serverid (nullable) is None
        # and model_fields_set contains the field
        if self.serverid is None and "serverid" in self.model_fields_set:
            _dict['serverid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostServicesHAProxyBackendServerEndpointRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "status": obj.get("status") if obj.get("status") is not None else 'active',
            "address": obj.get("address"),
            "port": obj.get("port"),
            "weight": obj.get("weight") if obj.get("weight") is not None else 1,
            "ssl": obj.get("ssl"),
            "sslserververify": obj.get("sslserververify"),
            "serverid": obj.get("serverid") if obj.get("serverid") is not None else 175,
            "parent_id": obj.get("parent_id")
        })
        return _obj


