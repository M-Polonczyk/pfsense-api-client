# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PatchSystemRESTAPIAccessListEntryEndpointRequest(BaseModel):
    """
    PatchSystemRESTAPIAccessListEntryEndpointRequest
    """ # noqa: E501
    type: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='allow', description="The type of access this entry provides. \"allow\" entries permit access to the REST API from the specified networks. \"deny\" entries block access to the REST API from the specified networks.<br>")
    weight: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = Field(default=1, description="The weight of this entry. Entries with lower weights are evaluated first. If multiple entries match a request, the entry with the lowest weight will be applied.<br>")
    network: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The network (in CIDR notation) that this entry applies to. Clients interacting with the REST API from this network will be affected by this entry.<br>")
    users: Optional[Annotated[List[StrictStr], Field(min_length=0, max_length=128)]] = Field(default=None, description="The users that this entry applies to. Only users in this list will be affected by this entry.<br>")
    sched: Optional[StrictStr] = Field(default=None, description="The firewall schedule that this entry will use. This entry will only be active during the                  times specified in the schedule. Leave empty to apply this entry at all times.<br>")
    descr: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=256)]] = Field(default=None, description="A description of this access list entry. This field is optional.<br>")
    id: StrictInt = Field(description="The ID of the object or resource to interact with.")
    __properties: ClassVar[List[str]] = ["type", "weight", "network", "users", "sched", "descr", "id"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['allow', 'deny']):
            raise ValueError("must be one of enum values ('allow', 'deny')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchSystemRESTAPIAccessListEntryEndpointRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchSystemRESTAPIAccessListEntryEndpointRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type") if obj.get("type") is not None else 'allow',
            "weight": obj.get("weight") if obj.get("weight") is not None else 1,
            "network": obj.get("network"),
            "users": obj.get("users"),
            "sched": obj.get("sched"),
            "descr": obj.get("descr"),
            "id": obj.get("id")
        })
        return _obj


