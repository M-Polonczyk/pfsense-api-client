# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from pfsense_api_client.models.open_vpn_server_status_conns_inner import OpenVPNServerStatusConnsInner
from pfsense_api_client.models.open_vpn_server_status_routes_inner import OpenVPNServerStatusRoutesInner
from typing import Optional, Set
from typing_extensions import Self

class OpenVPNServerStatus(BaseModel):
    """
    OpenVPNServerStatus
    """ # noqa: E501
    name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The name of the OpenVPN server.<br>")
    mode: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The mode of the OpenVPN server.<br>")
    port: Optional[StrictStr] = Field(default=None, description="The port number of the OpenVPN server. Valid options are: a TCP/UDP port number<br>")
    vpnid: Optional[StrictInt] = Field(default=None, description="The VPN ID of the OpenVPN server this status corresponds to.<br>")
    mgmt: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The management interface of the OpenVPN server.<br>")
    conns: Optional[Annotated[List[OpenVPNServerStatusConnsInner], Field(min_length=0, max_length=65535)]] = Field(default=None, description="The current connections to the OpenVPN server.<br>")
    routes: Optional[Annotated[List[OpenVPNServerStatusRoutesInner], Field(min_length=0, max_length=65535)]] = Field(default=None, description="The current routes of the OpenVPN server.<br>")
    __properties: ClassVar[List[str]] = ["name", "mode", "port", "vpnid", "mgmt", "conns", "routes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpenVPNServerStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "mode",
            "port",
            "vpnid",
            "mgmt",
            "conns",
            "routes",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in conns (list)
        _items = []
        if self.conns:
            for _item_conns in self.conns:
                if _item_conns:
                    _items.append(_item_conns.to_dict())
            _dict['conns'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in routes (list)
        _items = []
        if self.routes:
            for _item_routes in self.routes:
                if _item_routes:
                    _items.append(_item_routes.to_dict())
            _dict['routes'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if mode (nullable) is None
        # and model_fields_set contains the field
        if self.mode is None and "mode" in self.model_fields_set:
            _dict['mode'] = None

        # set to None if port (nullable) is None
        # and model_fields_set contains the field
        if self.port is None and "port" in self.model_fields_set:
            _dict['port'] = None

        # set to None if vpnid (nullable) is None
        # and model_fields_set contains the field
        if self.vpnid is None and "vpnid" in self.model_fields_set:
            _dict['vpnid'] = None

        # set to None if mgmt (nullable) is None
        # and model_fields_set contains the field
        if self.mgmt is None and "mgmt" in self.model_fields_set:
            _dict['mgmt'] = None

        # set to None if conns (nullable) is None
        # and model_fields_set contains the field
        if self.conns is None and "conns" in self.model_fields_set:
            _dict['conns'] = None

        # set to None if routes (nullable) is None
        # and model_fields_set contains the field
        if self.routes is None and "routes" in self.model_fields_set:
            _dict['routes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpenVPNServerStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "mode": obj.get("mode"),
            "port": obj.get("port"),
            "vpnid": obj.get("vpnid"),
            "mgmt": obj.get("mgmt"),
            "conns": [OpenVPNServerStatusConnsInner.from_dict(_item) for _item in obj["conns"]] if obj.get("conns") is not None else None,
            "routes": [OpenVPNServerStatusRoutesInner.from_dict(_item) for _item in obj["routes"]] if obj.get("routes") is not None else None
        })
        return _obj


