# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from pfsense_api_client.models.routing_gateway_group_priorities_inner import RoutingGatewayGroupPrioritiesInner
from typing import Optional, Set
from typing_extensions import Self

class RoutingGatewayGroup(BaseModel):
    """
    RoutingGatewayGroup
    """ # noqa: E501
    name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=31)]] = Field(default=None, description="The name of the gateway group.<br>")
    trigger: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='down', description="The trigger that will cause a gateway to be excluded from the group.<br>")
    descr: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="A description of the gateway group.<br>")
    ipprotocol: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='unknown', description="The assumed IP protocol of the gateways in this group.<br>")
    priorities: Optional[Annotated[List[RoutingGatewayGroupPrioritiesInner], Field(min_length=1, max_length=65535)]] = Field(default=None, description="The priorities of the gateways in this group.<br>")
    __properties: ClassVar[List[str]] = ["name", "trigger", "descr", "ipprotocol", "priorities"]

    @field_validator('trigger')
    def trigger_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['down', 'downloss', 'downlatency', 'downlosslatency']):
            raise ValueError("must be one of enum values ('down', 'downloss', 'downlatency', 'downlosslatency')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoutingGatewayGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "ipprotocol",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in priorities (list)
        _items = []
        if self.priorities:
            for _item_priorities in self.priorities:
                if _item_priorities:
                    _items.append(_item_priorities.to_dict())
            _dict['priorities'] = _items
        # set to None if ipprotocol (nullable) is None
        # and model_fields_set contains the field
        if self.ipprotocol is None and "ipprotocol" in self.model_fields_set:
            _dict['ipprotocol'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoutingGatewayGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "trigger": obj.get("trigger") if obj.get("trigger") is not None else 'down',
            "descr": obj.get("descr"),
            "ipprotocol": obj.get("ipprotocol") if obj.get("ipprotocol") is not None else 'unknown',
            "priorities": [RoutingGatewayGroupPrioritiesInner.from_dict(_item) for _item in obj["priorities"]] if obj.get("priorities") is not None else None
        })
        return _obj


