# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class OpenVPNServerRouteStatus(BaseModel):
    """
    OpenVPNServerRouteStatus
    """ # noqa: E501
    common_name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The common name of the OpenVPN server connection.<br>")
    remote_host: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The remote host of the OpenVPN server connection.<br>")
    virtual_addr: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The virtual address of the OpenVPN server connection.<br>")
    last_time: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The last time of the route was used.<br>")
    __properties: ClassVar[List[str]] = ["common_name", "remote_host", "virtual_addr", "last_time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpenVPNServerRouteStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "common_name",
            "remote_host",
            "virtual_addr",
            "last_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if common_name (nullable) is None
        # and model_fields_set contains the field
        if self.common_name is None and "common_name" in self.model_fields_set:
            _dict['common_name'] = None

        # set to None if remote_host (nullable) is None
        # and model_fields_set contains the field
        if self.remote_host is None and "remote_host" in self.model_fields_set:
            _dict['remote_host'] = None

        # set to None if virtual_addr (nullable) is None
        # and model_fields_set contains the field
        if self.virtual_addr is None and "virtual_addr" in self.model_fields_set:
            _dict['virtual_addr'] = None

        # set to None if last_time (nullable) is None
        # and model_fields_set contains the field
        if self.last_time is None and "last_time" in self.model_fields_set:
            _dict['last_time'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpenVPNServerRouteStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "common_name": obj.get("common_name"),
            "remote_host": obj.get("remote_host"),
            "virtual_addr": obj.get("virtual_addr"),
            "last_time": obj.get("last_time")
        })
        return _obj


