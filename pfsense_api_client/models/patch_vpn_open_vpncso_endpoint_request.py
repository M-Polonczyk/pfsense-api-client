# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PatchVPNOpenVPNCSOEndpointRequest(BaseModel):
    """
    PatchVPNOpenVPNCSOEndpointRequest
    """ # noqa: E501
    common_name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The X.509 common name for the client certificate, or the username for VPNs utilizing password authentication.<br>")
    disable: Optional[StrictBool] = Field(default=None, description="Disables this client specific override.<br>")
    block: Optional[StrictBool] = Field(default=None, description="Enables or disables the client from connecting to this server. Do not use this option to permanently disable a client due to a compromised key or password. Use a CRL instead.<br>")
    description: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The description for this client specific override.<br>")
    server_list: Optional[Annotated[List[StrictStr], Field(min_length=0, max_length=128)]] = Field(default=None, description="The OpenVPN servers that will utilize this override. When no servers are specified, the override will apply to all servers.<br>")
    tunnel_network: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The IPv4 virtual network used for private communications between the server and client hosts.<br>")
    tunnel_networkv6: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The IPv6 virtual network used for private communications between the server and client hosts.<br>")
    local_network: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]], Field(min_length=0, max_length=128)]] = Field(default=None, description="The IPv4 server-side networks that will be accessible from this particular client.<br>")
    local_networkv6: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]], Field(min_length=0, max_length=128)]] = Field(default=None, description="the IPv6 server-side networks that will be accessible from this particular client.<br>")
    remote_network: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]], Field(min_length=0, max_length=128)]] = Field(default=None, description="The IPv4 client-side networks that will be routed to this client specifically using iroute, so that a site-to-site VPN can be established.<br>")
    remote_networkv6: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]], Field(min_length=0, max_length=128)]] = Field(default=None, description="The IPv6 client-side networks that will be routed to this client specifically using iroute, so that a site-to-site VPN can be established.<br>")
    gwredir: Optional[StrictBool] = Field(default=None, description="Enable forcing all client-generated traffic through the tunnel.<br>")
    push_reset: Optional[StrictBool] = Field(default=None, description="Enables or disables preventing this client from receiving any server-defined client settings.<br>")
    remove_route: Optional[StrictBool] = Field(default=None, description="Enables or disables preventing this client from receiving any server-defined routes without removing any other options.<br>")
    dns_domain: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The default domain to provide to the client.<br>")
    dns_server1: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The primary DNS server to provide to the client.<br>")
    dns_server2: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The secondary DNS server to provide to the client.<br>")
    dns_server3: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The tertiary DNS server to provide to the client.<br>")
    dns_server4: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The quaternary DNS server to provide to the client.<br>")
    ntp_server1: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The primary NTP server to provide to the client.<br>")
    ntp_server2: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The secondary NTP server to provide to the client.<br>")
    netbios_enable: Optional[StrictBool] = Field(default=None, description="Enables or disables NetBIOS over TCP/IP.<br>")
    netbios_ntype: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The NetBIOS node type.<br><br>This field is only available when the following conditions are met:<br>- `netbios_enable` must be equal to `true`<br>")
    netbios_scope: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The NetBIOS Scope ID. This provides an extended naming service for NetBIOS over TCP/IP. The NetBIOS scope ID isolates NetBIOS traffic on a single network to only those nodes with the same NetBIOS scope ID.<br><br>This field is only available when the following conditions are met:<br>- `netbios_enable` must be equal to `true`<br>")
    wins_server1: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The primary WINS server to provide to the client.<br><br>This field is only available when the following conditions are met:<br>- `netbios_enable` must be equal to `true`<br>")
    wins_server2: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The secondary WINS server to provide to the client.<br><br>This field is only available when the following conditions are met:<br>- `netbios_enable` must be equal to `true`<br>")
    custom_options: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]], Field(min_length=0, max_length=128)]] = Field(default=None, description="Additional OpenVPN options to add for this client.<br>")
    id: StrictInt = Field(description="The ID of the object or resource to interact with.")
    __properties: ClassVar[List[str]] = ["common_name", "disable", "block", "description", "server_list", "tunnel_network", "tunnel_networkv6", "local_network", "local_networkv6", "remote_network", "remote_networkv6", "gwredir", "push_reset", "remove_route", "dns_domain", "dns_server1", "dns_server2", "dns_server3", "dns_server4", "ntp_server1", "ntp_server2", "netbios_enable", "netbios_ntype", "netbios_scope", "wins_server1", "wins_server2", "custom_options", "id"]

    @field_validator('netbios_ntype')
    def netbios_ntype_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 4, 8]):
            raise ValueError("must be one of enum values (0, 1, 2, 4, 8)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchVPNOpenVPNCSOEndpointRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchVPNOpenVPNCSOEndpointRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "common_name": obj.get("common_name"),
            "disable": obj.get("disable"),
            "block": obj.get("block"),
            "description": obj.get("description"),
            "server_list": obj.get("server_list"),
            "tunnel_network": obj.get("tunnel_network"),
            "tunnel_networkv6": obj.get("tunnel_networkv6"),
            "local_network": obj.get("local_network"),
            "local_networkv6": obj.get("local_networkv6"),
            "remote_network": obj.get("remote_network"),
            "remote_networkv6": obj.get("remote_networkv6"),
            "gwredir": obj.get("gwredir"),
            "push_reset": obj.get("push_reset"),
            "remove_route": obj.get("remove_route"),
            "dns_domain": obj.get("dns_domain"),
            "dns_server1": obj.get("dns_server1"),
            "dns_server2": obj.get("dns_server2"),
            "dns_server3": obj.get("dns_server3"),
            "dns_server4": obj.get("dns_server4"),
            "ntp_server1": obj.get("ntp_server1"),
            "ntp_server2": obj.get("ntp_server2"),
            "netbios_enable": obj.get("netbios_enable"),
            "netbios_ntype": obj.get("netbios_ntype"),
            "netbios_scope": obj.get("netbios_scope"),
            "wins_server1": obj.get("wins_server1"),
            "wins_server2": obj.get("wins_server2"),
            "custom_options": obj.get("custom_options"),
            "id": obj.get("id")
        })
        return _obj


