# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PatchFirewallScheduleTimeRangeEndpointRequest(BaseModel):
    """
    PatchFirewallScheduleTimeRangeEndpointRequest
    """ # noqa: E501
    position: Optional[Annotated[List[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]], Field(min_length=0, max_length=7)]] = Field(default=None, description="The day of the week this schedule should be active for. Use `1` for every Monday, `2` for every Tuesday, `3` for every Wednesday, `4` for every Thursday, `5` for every Friday, `6` for every Saturday, or `7` for every Sunday. If this field has a value specified, the `month` and `day` fields will be unavailable.<br>")
    month: Optional[Annotated[List[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]], Field(min_length=1, max_length=128)]] = Field(default=None, description="The month for each specified `day` value. Each value specified must correspond with a `day` field value and must match the order exactly. For example, a `month` value of `[3, 6]` and a `day` value of `[2, 17]` would evaluate to March 2nd and June 17th respectively.<br><br>This field is only available when the following conditions are met:<br>- `position` must be equal to `NULL`<br>")
    day: Optional[Annotated[List[Annotated[int, Field(le=31, strict=True, ge=1)]], Field(min_length=1, max_length=128)]] = Field(default=None, description="The day for each specified `month` value. Each value specified must correspond with a `month` field value and must match the order exactly. For example, a `month` value of `[3, 6]` and a `day` value of `[2, 17]` would evaluate to March 2nd and June 17th respectively.<br><br>This field is only available when the following conditions are met:<br>- `position` must be equal to `NULL`<br>")
    hour: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=11)]] = Field(default=None, description="The start time and end time for this time range in 24-hour format (i.e. HH:MM-HH:MM).<br>")
    rangedescr: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="A description detailing this firewall schedule time range's purpose.<br>")
    parent_id: StrictInt = Field(description="The ID of the parent this object is nested under.")
    id: StrictInt = Field(description="The ID of the object or resource to interact with.")
    __properties: ClassVar[List[str]] = ["position", "month", "day", "hour", "rangedescr", "parent_id", "id"]

    @field_validator('position')
    def position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set([1, 2, 3, 4, 5, 6, 7]):
                raise ValueError("each list item must be one of (1, 2, 3, 4, 5, 6, 7)")
        return value

    @field_validator('month')
    def month_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]):
                raise ValueError("each list item must be one of (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchFirewallScheduleTimeRangeEndpointRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if position (nullable) is None
        # and model_fields_set contains the field
        if self.position is None and "position" in self.model_fields_set:
            _dict['position'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchFirewallScheduleTimeRangeEndpointRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "position": obj.get("position"),
            "month": obj.get("month"),
            "day": obj.get("day"),
            "hour": obj.get("hour"),
            "rangedescr": obj.get("rangedescr"),
            "parent_id": obj.get("parent_id"),
            "id": obj.get("id")
        })
        return _obj


