# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PatchSystemRESTAPISettingsEndpointRequest(BaseModel):
    """
    PatchSystemRESTAPISettingsEndpointRequest
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=True, description="Enables or disables the API. If set to `false`, the API will no longer respond to API requests              and can only be re-enabled via webConfigurator.<br>")
    read_only: Optional[StrictBool] = Field(default=None, description="Enables or disables read-only API access. If enabled, the API will only respond to GET requests             and can only be disabled via webConfigurator.<br>")
    keep_backup: Optional[StrictBool] = Field(default=True, description="Enables or disables keeping a persistent backup of the API configuration that can be used             to restore the API configuration after package and systems updates.<br>")
    login_protection: Optional[StrictBool] = Field(default=True, description="Enables or disables Login Protection for API authentication. When enabled, Login Protection will             monitor API attempts and temporarily block clients who fail API authentication too many times within a             period of time. When disabled, Login Protection will not monitor API authentication but will continue to              monitor webConfigurator and SSH logins (if configured). Login Protection can be configured globally in             System > Advanced.<br>")
    log_successful_auth: Optional[StrictBool] = Field(default=None, description="Enables or disables logging of API authentication attempts that are successful. By default, only             failed API authentication attempts are logged to prevent flooding the authentication logs. This field is             only applicable when the API `login_protection` setting is enabled.<br>")
    allow_pre_releases: Optional[StrictBool] = Field(default=None, description="Enables or disables displaying pre-releases in available API updates. Pre-releases contain fixes             and features that are currently under development and may not be fully stable. Use of pre-release versions             is at your own risk.<br>")
    hateoas: Optional[StrictBool] = Field(default=None, description="Enables or disables HATEOAS. Enabling HATEOAS will allow the API to include links to related resources in API responses. This is primarily useful for frontend web applications and self-navigating client scripts that integrate with HAL standards. Enabling HATEOAS may increase API response times, especially on systems with large configurations.<br>")
    expose_sensitive_fields: Optional[StrictBool] = Field(default=None, description="Enables or disables exposing sensitive fields in API responses. When enabled, sensitive fields such as passwords, private keys, and other sensitive data will be included in API responses.<br>")
    override_sensitive_fields: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]], Field(min_length=0, max_length=128)]] = Field(default=None, description="Specifies a list of fields (formatted as ModelName:FieldName) that should have their sensitive attribute overridden. Fields selected here will not be considered sensitive and will be included in API responses regardless of the `expose_sensitive_fields` setting.<br><br>This field is only available when the following conditions are met:<br>- `expose_sensitive_fields` must be equal to `false`<br>")
    allowed_interfaces: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]], Field(min_length=0, max_length=128)]] = Field(default=None, description="Sets the interfaces allowed to accept incoming API calls.<br>")
    represent_interfaces_as: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='descr', description="Specifies how the API should represent interface names. Use `descr` to represent              interface objects by their description name, use `id` to represent interface objects by their             internal pfSense ID (e.g. wan, lan, opt1), or use `if` to represent interface objects by their             real interface name (e.g. em0, igb1, bxe3).<br>")
    auth_methods: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]], Field(min_length=1, max_length=128)]] = Field(default=None, description="Sets the API authentication methods allowed to authenticate API calls.<br>")
    jwt_exp: Optional[Annotated[int, Field(le=86400, strict=True, ge=300)]] = Field(default=3600, description="Sets the amount of time (in seconds) JWTs are valid for.<br>")
    ha_sync: Optional[StrictBool] = Field(default=None, description="Enables or disables syncing API settings to HA peers. When enabled, API settings from this             host will automatically be synced to any hosts defined in `ha_sync_hosts`.<br>")
    ha_sync_validate_certs: Optional[StrictBool] = Field(default=True, description="Enables or disables certificate validation when syncing API configurations to HA sync peers. If             enabled, all hosts defined in `ha_sync_hosts` must have their webConfigurator configured with a certificate             trusted by this system. It is strongly recommended this be enabled at all times to help mitigate              Man-in-the-Middle attacks.<br>")
    ha_sync_hosts: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]], Field(min_length=0, max_length=10)]] = Field(default=None, description="Set a list of IP addresses or hostnames to sync API settings to.<br>")
    ha_sync_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Sets the username to use when authenticating for HA sync processes. This user must be the present             on all hosts defined in `ha_sync_hosts`.<br>")
    ha_sync_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Sets the password to use when authenticating for HA sync processes. This must be the password             for the user defined in `ha_sync_username` and must be the same on all hosts defined in `ha_sync_hosts`.<br>")
    __properties: ClassVar[List[str]] = ["enabled", "read_only", "keep_backup", "login_protection", "log_successful_auth", "allow_pre_releases", "hateoas", "expose_sensitive_fields", "override_sensitive_fields", "allowed_interfaces", "represent_interfaces_as", "auth_methods", "jwt_exp", "ha_sync", "ha_sync_validate_certs", "ha_sync_hosts", "ha_sync_username", "ha_sync_password"]

    @field_validator('represent_interfaces_as')
    def represent_interfaces_as_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['descr', 'id', 'if']):
            raise ValueError("must be one of enum values ('descr', 'id', 'if')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchSystemRESTAPISettingsEndpointRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchSystemRESTAPISettingsEndpointRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else True,
            "read_only": obj.get("read_only"),
            "keep_backup": obj.get("keep_backup") if obj.get("keep_backup") is not None else True,
            "login_protection": obj.get("login_protection") if obj.get("login_protection") is not None else True,
            "log_successful_auth": obj.get("log_successful_auth"),
            "allow_pre_releases": obj.get("allow_pre_releases"),
            "hateoas": obj.get("hateoas"),
            "expose_sensitive_fields": obj.get("expose_sensitive_fields"),
            "override_sensitive_fields": obj.get("override_sensitive_fields"),
            "allowed_interfaces": obj.get("allowed_interfaces"),
            "represent_interfaces_as": obj.get("represent_interfaces_as") if obj.get("represent_interfaces_as") is not None else 'descr',
            "auth_methods": obj.get("auth_methods"),
            "jwt_exp": obj.get("jwt_exp") if obj.get("jwt_exp") is not None else 3600,
            "ha_sync": obj.get("ha_sync"),
            "ha_sync_validate_certs": obj.get("ha_sync_validate_certs") if obj.get("ha_sync_validate_certs") is not None else True,
            "ha_sync_hosts": obj.get("ha_sync_hosts"),
            "ha_sync_username": obj.get("ha_sync_username"),
            "ha_sync_password": obj.get("ha_sync_password")
        })
        return _obj


