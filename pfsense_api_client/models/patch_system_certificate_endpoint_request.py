# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PatchSystemCertificateEndpointRequest(BaseModel):
    """
    PatchSystemCertificateEndpointRequest
    """ # noqa: E501
    descr: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The descriptive name for this certificate.<br>")
    refid: Optional[StrictStr] = Field(default='67ed081a8684d', description="The unique ID assigned to this certificate for internal system use. This value is generated by this system and cannot be changed.<br>")
    caref: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The unique ID of the existing pfSense Certificate Authority that signed this certificate.This value is assigned by this system and cannot be changed.<br>")
    type: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='server', description="The certificate type. Use `server` when this certificate is to be used by one or more services on this system. Use `user` when this certificate is intended to be assigned to a user for authentication purposes.<br>")
    csr: Optional[StrictStr] = Field(default=None, description="The X509 certificate signing request string if this certificate is pending an external signature.<br>")
    crt: Optional[StrictStr] = Field(default=None, description="The X509 certificate string.<br>")
    prv: Optional[StrictStr] = Field(default=None, description="The X509 private key string.<br>")
    id: StrictInt = Field(description="The ID of the object or resource to interact with.")
    __properties: ClassVar[List[str]] = ["descr", "refid", "caref", "type", "csr", "crt", "prv", "id"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['server', 'user']):
            raise ValueError("must be one of enum values ('server', 'user')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchSystemCertificateEndpointRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "refid",
            "caref",
            "csr",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if refid (nullable) is None
        # and model_fields_set contains the field
        if self.refid is None and "refid" in self.model_fields_set:
            _dict['refid'] = None

        # set to None if caref (nullable) is None
        # and model_fields_set contains the field
        if self.caref is None and "caref" in self.model_fields_set:
            _dict['caref'] = None

        # set to None if csr (nullable) is None
        # and model_fields_set contains the field
        if self.csr is None and "csr" in self.model_fields_set:
            _dict['csr'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchSystemCertificateEndpointRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "descr": obj.get("descr"),
            "refid": obj.get("refid") if obj.get("refid") is not None else '67ed081a8684d',
            "caref": obj.get("caref"),
            "type": obj.get("type") if obj.get("type") is not None else 'server',
            "csr": obj.get("csr"),
            "crt": obj.get("crt"),
            "prv": obj.get("prv"),
            "id": obj.get("id")
        })
        return _obj


