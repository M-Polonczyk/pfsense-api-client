# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class SystemStatus(BaseModel):
    """
    SystemStatus
    """ # noqa: E501
    platform: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The verbose name of this system's platform.<br>")
    serial: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The system's unique serial number/ID.<br>")
    netgate_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The unique ID issued for this pfSense instance by Netgate.<br>")
    uptime: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The amount of time this system has been up since the last reboot.<br>")
    bios_vendor: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The name of the BIOS vendor.<br>")
    bios_version: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The BIOS version installed on this system.<br>")
    bios_date: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The build date of the BIOS version.<br>")
    kernel_pti: Optional[StrictBool] = Field(default=None, description="Indicates whether kernel PTI is enabled or not.<br>")
    mds_mitigation: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Indicates whether MDS mitigation is enabled or not.<br>")
    temp_c: Optional[Union[Annotated[float, Field(le=99999999999999, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]] = Field(default=None, description="The current system temperature in celsius.<br>")
    temp_f: Optional[Union[Annotated[float, Field(le=99999999999999, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]] = Field(default=None, description="The current system temperature in fahrenheit.<br>")
    cpu_model: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The model of CPU installed in this system and other CPU info.<br>")
    cpu_load_avg: Optional[Annotated[List[Union[Annotated[float, Field(le=99999999999999, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]], Field(min_length=0, max_length=128)]] = Field(default=None, description="The CPU load averages. The first value represents the load average for the last minute, the second value represents the load average for the last 5 minutes, and the third value represents the load average for the last 15 minutes.<br>")
    cpu_count: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The total number of CPUs cores available on this system.<br>")
    cpu_usage: Optional[Union[Annotated[float, Field(le=99999999999999, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]] = Field(default=None, description="The current CPU usage as a whole percentage. Note: This is an approximate usage based on the last minute load average and total number of CPU cores. This may not represent exact CPU usage.<br>")
    mbuf_usage: Optional[Union[Annotated[float, Field(le=99999999999999, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]] = Field(default=None, description="The current MBUF usage as a whole percentage.<br>")
    mem_usage: Optional[Union[Annotated[float, Field(le=99999999999999, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]] = Field(default=None, description="The current memory usage as a whole percentage.<br>")
    swap_usage: Optional[Union[Annotated[float, Field(le=99999999999999, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]] = Field(default=None, description="The current swap usage as a whole percentage.<br>")
    disk_usage: Optional[Union[Annotated[float, Field(le=99999999999999, strict=True, ge=0)], Annotated[int, Field(le=2147483647, strict=True, ge=0)]]] = Field(default=None, description="The current disk usage as a whole percentage.<br>")
    __properties: ClassVar[List[str]] = ["platform", "serial", "netgate_id", "uptime", "bios_vendor", "bios_version", "bios_date", "kernel_pti", "mds_mitigation", "temp_c", "temp_f", "cpu_model", "cpu_load_avg", "cpu_count", "cpu_usage", "mbuf_usage", "mem_usage", "swap_usage", "disk_usage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SystemStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "platform",
            "serial",
            "netgate_id",
            "uptime",
            "bios_vendor",
            "bios_version",
            "bios_date",
            "kernel_pti",
            "mds_mitigation",
            "temp_c",
            "temp_f",
            "cpu_model",
            "cpu_load_avg",
            "cpu_count",
            "cpu_usage",
            "mbuf_usage",
            "mem_usage",
            "swap_usage",
            "disk_usage",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if platform (nullable) is None
        # and model_fields_set contains the field
        if self.platform is None and "platform" in self.model_fields_set:
            _dict['platform'] = None

        # set to None if serial (nullable) is None
        # and model_fields_set contains the field
        if self.serial is None and "serial" in self.model_fields_set:
            _dict['serial'] = None

        # set to None if netgate_id (nullable) is None
        # and model_fields_set contains the field
        if self.netgate_id is None and "netgate_id" in self.model_fields_set:
            _dict['netgate_id'] = None

        # set to None if uptime (nullable) is None
        # and model_fields_set contains the field
        if self.uptime is None and "uptime" in self.model_fields_set:
            _dict['uptime'] = None

        # set to None if bios_vendor (nullable) is None
        # and model_fields_set contains the field
        if self.bios_vendor is None and "bios_vendor" in self.model_fields_set:
            _dict['bios_vendor'] = None

        # set to None if bios_version (nullable) is None
        # and model_fields_set contains the field
        if self.bios_version is None and "bios_version" in self.model_fields_set:
            _dict['bios_version'] = None

        # set to None if bios_date (nullable) is None
        # and model_fields_set contains the field
        if self.bios_date is None and "bios_date" in self.model_fields_set:
            _dict['bios_date'] = None

        # set to None if kernel_pti (nullable) is None
        # and model_fields_set contains the field
        if self.kernel_pti is None and "kernel_pti" in self.model_fields_set:
            _dict['kernel_pti'] = None

        # set to None if mds_mitigation (nullable) is None
        # and model_fields_set contains the field
        if self.mds_mitigation is None and "mds_mitigation" in self.model_fields_set:
            _dict['mds_mitigation'] = None

        # set to None if temp_c (nullable) is None
        # and model_fields_set contains the field
        if self.temp_c is None and "temp_c" in self.model_fields_set:
            _dict['temp_c'] = None

        # set to None if temp_f (nullable) is None
        # and model_fields_set contains the field
        if self.temp_f is None and "temp_f" in self.model_fields_set:
            _dict['temp_f'] = None

        # set to None if cpu_model (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_model is None and "cpu_model" in self.model_fields_set:
            _dict['cpu_model'] = None

        # set to None if cpu_load_avg (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_load_avg is None and "cpu_load_avg" in self.model_fields_set:
            _dict['cpu_load_avg'] = None

        # set to None if cpu_count (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_count is None and "cpu_count" in self.model_fields_set:
            _dict['cpu_count'] = None

        # set to None if cpu_usage (nullable) is None
        # and model_fields_set contains the field
        if self.cpu_usage is None and "cpu_usage" in self.model_fields_set:
            _dict['cpu_usage'] = None

        # set to None if mbuf_usage (nullable) is None
        # and model_fields_set contains the field
        if self.mbuf_usage is None and "mbuf_usage" in self.model_fields_set:
            _dict['mbuf_usage'] = None

        # set to None if mem_usage (nullable) is None
        # and model_fields_set contains the field
        if self.mem_usage is None and "mem_usage" in self.model_fields_set:
            _dict['mem_usage'] = None

        # set to None if swap_usage (nullable) is None
        # and model_fields_set contains the field
        if self.swap_usage is None and "swap_usage" in self.model_fields_set:
            _dict['swap_usage'] = None

        # set to None if disk_usage (nullable) is None
        # and model_fields_set contains the field
        if self.disk_usage is None and "disk_usage" in self.model_fields_set:
            _dict['disk_usage'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SystemStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "platform": obj.get("platform"),
            "serial": obj.get("serial"),
            "netgate_id": obj.get("netgate_id"),
            "uptime": obj.get("uptime"),
            "bios_vendor": obj.get("bios_vendor"),
            "bios_version": obj.get("bios_version"),
            "bios_date": obj.get("bios_date"),
            "kernel_pti": obj.get("kernel_pti"),
            "mds_mitigation": obj.get("mds_mitigation"),
            "temp_c": obj.get("temp_c"),
            "temp_f": obj.get("temp_f"),
            "cpu_model": obj.get("cpu_model"),
            "cpu_load_avg": obj.get("cpu_load_avg"),
            "cpu_count": obj.get("cpu_count"),
            "cpu_usage": obj.get("cpu_usage"),
            "mbuf_usage": obj.get("mbuf_usage"),
            "mem_usage": obj.get("mem_usage"),
            "swap_usage": obj.get("swap_usage"),
            "disk_usage": obj.get("disk_usage")
        })
        return _obj


