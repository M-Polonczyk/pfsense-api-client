# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class DHCPServerStaticMapping(BaseModel):
    """
    DHCPServerStaticMapping
    """ # noqa: E501
    mac: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The MAC address of the client this mapping is for.<br>")
    ipaddr: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The IP address to assign this client via DHCP.<br>")
    cid: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The client identifier of the client this mapping is for.<br>")
    hostname: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The hostname to assign this client via DHCP.<br>")
    domain: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="The domain to be assigned via DHCP.<br>")
    domainsearchlist: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=255)]], Field(min_length=0, max_length=128)]] = Field(default=None, description="The domain search list to provide via DHCP.<br>")
    defaultleasetime: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=60)]] = Field(default=7200, description="The default DHCP lease validity period (in seconds). This is used for clients that do not ask for a specific expiration time.<br>")
    maxleasetime: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=60)]] = Field(default=86400, description="The maximum DHCP lease validity period (in seconds) this client can request.<br>")
    gateway: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=15)]] = Field(default=None, description="The gateway IPv4 address to provide via DHCP. This is only necessary if you are not using the interface's IP as the gateway. Specify `none` for no gateway assignment.<br>")
    dnsserver: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=15)]], Field(min_length=0, max_length=4)]] = Field(default=None, description="The DNS servers to provide via DHCP. Leave empty to default to system nameservers.<br>")
    winsserver: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=15)]], Field(min_length=0, max_length=2)]] = Field(default=None, description="The WINS servers to provide via DHCP.<br>")
    ntpserver: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=256)]], Field(min_length=0, max_length=3)]] = Field(default=None, description="The NTP servers to provide via DHCP.<br>")
    arp_table_static_entry: Optional[StrictBool] = Field(default=None, description="Assign a static ARP entry for this static mapping.<br>")
    descr: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="The description of this static mapping.<br>")
    __properties: ClassVar[List[str]] = ["mac", "ipaddr", "cid", "hostname", "domain", "domainsearchlist", "defaultleasetime", "maxleasetime", "gateway", "dnsserver", "winsserver", "ntpserver", "arp_table_static_entry", "descr"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DHCPServerStaticMapping from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if ipaddr (nullable) is None
        # and model_fields_set contains the field
        if self.ipaddr is None and "ipaddr" in self.model_fields_set:
            _dict['ipaddr'] = None

        # set to None if cid (nullable) is None
        # and model_fields_set contains the field
        if self.cid is None and "cid" in self.model_fields_set:
            _dict['cid'] = None

        # set to None if hostname (nullable) is None
        # and model_fields_set contains the field
        if self.hostname is None and "hostname" in self.model_fields_set:
            _dict['hostname'] = None

        # set to None if defaultleasetime (nullable) is None
        # and model_fields_set contains the field
        if self.defaultleasetime is None and "defaultleasetime" in self.model_fields_set:
            _dict['defaultleasetime'] = None

        # set to None if maxleasetime (nullable) is None
        # and model_fields_set contains the field
        if self.maxleasetime is None and "maxleasetime" in self.model_fields_set:
            _dict['maxleasetime'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DHCPServerStaticMapping from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mac": obj.get("mac"),
            "ipaddr": obj.get("ipaddr"),
            "cid": obj.get("cid"),
            "hostname": obj.get("hostname"),
            "domain": obj.get("domain"),
            "domainsearchlist": obj.get("domainsearchlist"),
            "defaultleasetime": obj.get("defaultleasetime") if obj.get("defaultleasetime") is not None else 7200,
            "maxleasetime": obj.get("maxleasetime") if obj.get("maxleasetime") is not None else 86400,
            "gateway": obj.get("gateway"),
            "dnsserver": obj.get("dnsserver"),
            "winsserver": obj.get("winsserver"),
            "ntpserver": obj.get("ntpserver"),
            "arp_table_static_entry": obj.get("arp_table_static_entry"),
            "descr": obj.get("descr")
        })
        return _obj


