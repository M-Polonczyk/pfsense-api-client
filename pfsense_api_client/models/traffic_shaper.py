# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from pfsense_api_client.models.traffic_shaper_queue_inner import TrafficShaperQueueInner
from typing import Optional, Set
from typing_extensions import Self

class TrafficShaper(BaseModel):
    """
    TrafficShaper
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=True, description="Enables or disables this traffic shaper.<br>")
    interface: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The interface this traffic shaper will be applied to.<br>")
    name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The name of this traffic shaper. This value is automatically set by the system and cannot be changed.<br>")
    scheduler: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The scheduler type to use for this traffic shaper. Changing this value will automatically update any child queues assigned to this traffic shaper.<br>")
    bandwidthtype: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The scale type of the `bandwidth` field's value.<br>")
    bandwidth: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=1)]] = Field(default=None, description="The total bandwidth amount allowed by this traffic shaper.<br>")
    qlimit: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=1)]] = Field(default=50, description="The number of packets that can be held in a queue waiting to be transmitted by the shaper.<br><br>This field is only available when the following conditions are met:<br>- `scheduler` must not be one of [ CODELQ ]<br>")
    tbrconfig: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=1)]] = Field(default=None, description="The size, in bytes, of the token bucket regulator. If `null`, heuristics based on the interface bandwidth are used to determine the size.<br>")
    queue: Optional[Annotated[List[TrafficShaperQueueInner], Field(min_length=0, max_length=65535)]] = Field(default=None, description="The child queues assigned to this traffic shaper.<br>")
    __properties: ClassVar[List[str]] = ["enabled", "interface", "name", "scheduler", "bandwidthtype", "bandwidth", "qlimit", "tbrconfig", "queue"]

    @field_validator('scheduler')
    def scheduler_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HFSC', 'CBQ', 'FAIRQ', 'CODELQ', 'PRIQ']):
            raise ValueError("must be one of enum values ('HFSC', 'CBQ', 'FAIRQ', 'CODELQ', 'PRIQ')")
        return value

    @field_validator('bandwidthtype')
    def bandwidthtype_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['%', 'b', 'Kb', 'Mb', 'Gb']):
            raise ValueError("must be one of enum values ('%', 'b', 'Kb', 'Mb', 'Gb')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrafficShaper from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in queue (list)
        _items = []
        if self.queue:
            for _item_queue in self.queue:
                if _item_queue:
                    _items.append(_item_queue.to_dict())
            _dict['queue'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if qlimit (nullable) is None
        # and model_fields_set contains the field
        if self.qlimit is None and "qlimit" in self.model_fields_set:
            _dict['qlimit'] = None

        # set to None if tbrconfig (nullable) is None
        # and model_fields_set contains the field
        if self.tbrconfig is None and "tbrconfig" in self.model_fields_set:
            _dict['tbrconfig'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrafficShaper from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else True,
            "interface": obj.get("interface"),
            "name": obj.get("name"),
            "scheduler": obj.get("scheduler"),
            "bandwidthtype": obj.get("bandwidthtype"),
            "bandwidth": obj.get("bandwidth"),
            "qlimit": obj.get("qlimit") if obj.get("qlimit") is not None else 50,
            "tbrconfig": obj.get("tbrconfig"),
            "queue": [TrafficShaperQueueInner.from_dict(_item) for _item in obj["queue"]] if obj.get("queue") is not None else None
        })
        return _obj


