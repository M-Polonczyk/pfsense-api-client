# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PostUserGroupEndpointRequest(BaseModel):
    """
    PostUserGroupEndpointRequest
    """ # noqa: E501
    name: Annotated[str, Field(min_length=0, strict=True, max_length=64)] = Field(description="The name for this user group.<br>")
    gid: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=2000, description="The GID of this user group. This value is automatically assigned and cannot be changed.<br>")
    scope: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='local', description="The scope of this user group. Use `local` for user groups that only apply to this system. use `remote` for groups that also apply to remote authentication servers.<br>")
    description: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The description to assign to this user group.<br>")
    member: Optional[Annotated[List[StrictStr], Field(min_length=0, max_length=128)]] = Field(default=None, description="The local user names to assign to this user group.<br>")
    priv: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]], Field(min_length=0, max_length=128)]] = Field(default=None, description="The privileges to assign to this user group.<br>")
    __properties: ClassVar[List[str]] = ["name", "gid", "scope", "description", "member", "priv"]

    @field_validator('scope')
    def scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['local', 'remote']):
            raise ValueError("must be one of enum values ('local', 'remote')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostUserGroupEndpointRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "gid",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if gid (nullable) is None
        # and model_fields_set contains the field
        if self.gid is None and "gid" in self.model_fields_set:
            _dict['gid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostUserGroupEndpointRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "gid": obj.get("gid") if obj.get("gid") is not None else 2000,
            "scope": obj.get("scope") if obj.get("scope") is not None else 'local',
            "description": obj.get("description"),
            "member": obj.get("member"),
            "priv": obj.get("priv")
        })
        return _obj


