# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PatchSystemNotificationsEmailSettingsEndpointRequest(BaseModel):
    """
    PatchSystemNotificationsEmailSettingsEndpointRequest
    """ # noqa: E501
    disable: Optional[StrictBool] = Field(default=None, description="Disables SMTP notifications.<br>")
    ipaddress: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The IP address or hostname of the SMTP server.<br>")
    port: Optional[StrictStr] = Field(default='25', description="The port number of the SMTP server. Valid options are: a TCP/UDP port number<br>")
    timeout: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=20, description="The timeout (in seconds) for the SMTP connection.<br>")
    ssl: Optional[StrictBool] = Field(default=None, description="Enables or disables SSL/TLS for the SMTP connection.<br>")
    sslvalidate: Optional[StrictBool] = Field(default=True, description="Enables or disables SSL/TLS certificate validation for the SMTP connection.<br>")
    fromaddress: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The email address to use as the \"From\" address in notifications.<br>")
    notifyemailaddress: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The email address to send notifications to.<br>")
    authentication_mechanism: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='PLAIN', description="The authentication mechanism to use for the SMTP connection.<br>")
    username: Annotated[str, Field(min_length=0, strict=True, max_length=1024)] = Field(description="The username to use for SMTP authentication.<br><br>This field is only available when the following conditions are met:<br>- `authentication_mechanism` must be equal to `'LOGIN'`<br>")
    password: Annotated[str, Field(min_length=0, strict=True, max_length=1024)] = Field(description="The password to use for SMTP authentication.<br><br>This field is only available when the following conditions are met:<br>- `authentication_mechanism` must be equal to `'LOGIN'`<br>")
    __properties: ClassVar[List[str]] = ["disable", "ipaddress", "port", "timeout", "ssl", "sslvalidate", "fromaddress", "notifyemailaddress", "authentication_mechanism", "username", "password"]

    @field_validator('authentication_mechanism')
    def authentication_mechanism_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PLAIN', 'LOGIN']):
            raise ValueError("must be one of enum values ('PLAIN', 'LOGIN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchSystemNotificationsEmailSettingsEndpointRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchSystemNotificationsEmailSettingsEndpointRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disable": obj.get("disable"),
            "ipaddress": obj.get("ipaddress"),
            "port": obj.get("port") if obj.get("port") is not None else '25',
            "timeout": obj.get("timeout") if obj.get("timeout") is not None else 20,
            "ssl": obj.get("ssl"),
            "sslvalidate": obj.get("sslvalidate") if obj.get("sslvalidate") is not None else True,
            "fromaddress": obj.get("fromaddress"),
            "notifyemailaddress": obj.get("notifyemailaddress"),
            "authentication_mechanism": obj.get("authentication_mechanism") if obj.get("authentication_mechanism") is not None else 'PLAIN',
            "username": obj.get("username"),
            "password": obj.get("password")
        })
        return _obj


