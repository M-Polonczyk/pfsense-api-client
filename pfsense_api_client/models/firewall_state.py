# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class FirewallState(BaseModel):
    """
    FirewallState
    """ # noqa: E501
    interface: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The interface that initially received the traffic which registered the state.<br>")
    protocol: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The protocol listed in the state.<br>")
    direction: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The direction of traffic listed in the state.<br>")
    source: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The source address listed in the state. Note: Depending on the `protocol`, this value may contain the source port as well.<br>")
    destination: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The destination address listed in the state. Note: Depending on the `protocol`, this value may contain the destination port as well.<br>")
    state: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The current status of the firewall state.<br>")
    age: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The age of the firewall state in HH:MM:SS format.<br>")
    expires_in: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The amount of time remaining until the state expires in HH:MM:SS format.<br>")
    packets_total: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The total number of packets observed by the state.<br>")
    packets_in: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The total number of inbound packets observed by the state.<br>")
    packets_out: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The total number of outbound packets observed by the state.<br>")
    bytes_total: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The total number of traffic (in bytes) observed by the state.<br>")
    bytes_in: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The total number of inbound traffic (in bytes) observed by the state.<br>")
    bytes_out: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The total number of outbound traffic (in bytes) observed by the state.<br>")
    __properties: ClassVar[List[str]] = ["interface", "protocol", "direction", "source", "destination", "state", "age", "expires_in", "packets_total", "packets_in", "packets_out", "bytes_total", "bytes_in", "bytes_out"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FirewallState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if interface (nullable) is None
        # and model_fields_set contains the field
        if self.interface is None and "interface" in self.model_fields_set:
            _dict['interface'] = None

        # set to None if protocol (nullable) is None
        # and model_fields_set contains the field
        if self.protocol is None and "protocol" in self.model_fields_set:
            _dict['protocol'] = None

        # set to None if direction (nullable) is None
        # and model_fields_set contains the field
        if self.direction is None and "direction" in self.model_fields_set:
            _dict['direction'] = None

        # set to None if source (nullable) is None
        # and model_fields_set contains the field
        if self.source is None and "source" in self.model_fields_set:
            _dict['source'] = None

        # set to None if destination (nullable) is None
        # and model_fields_set contains the field
        if self.destination is None and "destination" in self.model_fields_set:
            _dict['destination'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if age (nullable) is None
        # and model_fields_set contains the field
        if self.age is None and "age" in self.model_fields_set:
            _dict['age'] = None

        # set to None if expires_in (nullable) is None
        # and model_fields_set contains the field
        if self.expires_in is None and "expires_in" in self.model_fields_set:
            _dict['expires_in'] = None

        # set to None if packets_total (nullable) is None
        # and model_fields_set contains the field
        if self.packets_total is None and "packets_total" in self.model_fields_set:
            _dict['packets_total'] = None

        # set to None if packets_in (nullable) is None
        # and model_fields_set contains the field
        if self.packets_in is None and "packets_in" in self.model_fields_set:
            _dict['packets_in'] = None

        # set to None if packets_out (nullable) is None
        # and model_fields_set contains the field
        if self.packets_out is None and "packets_out" in self.model_fields_set:
            _dict['packets_out'] = None

        # set to None if bytes_total (nullable) is None
        # and model_fields_set contains the field
        if self.bytes_total is None and "bytes_total" in self.model_fields_set:
            _dict['bytes_total'] = None

        # set to None if bytes_in (nullable) is None
        # and model_fields_set contains the field
        if self.bytes_in is None and "bytes_in" in self.model_fields_set:
            _dict['bytes_in'] = None

        # set to None if bytes_out (nullable) is None
        # and model_fields_set contains the field
        if self.bytes_out is None and "bytes_out" in self.model_fields_set:
            _dict['bytes_out'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FirewallState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "interface": obj.get("interface"),
            "protocol": obj.get("protocol"),
            "direction": obj.get("direction"),
            "source": obj.get("source"),
            "destination": obj.get("destination"),
            "state": obj.get("state"),
            "age": obj.get("age"),
            "expires_in": obj.get("expires_in"),
            "packets_total": obj.get("packets_total"),
            "packets_in": obj.get("packets_in"),
            "packets_out": obj.get("packets_out"),
            "bytes_total": obj.get("bytes_total"),
            "bytes_in": obj.get("bytes_in"),
            "bytes_out": obj.get("bytes_out")
        })
        return _obj


