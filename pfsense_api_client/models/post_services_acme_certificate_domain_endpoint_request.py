# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PostServicesACMECertificateDomainEndpointRequest(BaseModel):
    """
    PostServicesACMECertificateDomainEndpointRequest
    """ # noqa: E501
    name: Annotated[str, Field(min_length=0, strict=True, max_length=1024)] = Field(description="The fully-qualified domain name of this domain (SAN).<br>")
    status: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='enable', description="The activation status of the ACME certificate.<br>")
    method: Annotated[str, Field(min_length=0, strict=True, max_length=1024)] = Field(description="The method to use to validate this domain.<br>")
    webrootfolder: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Folder into which the acme challenge response is written; for example: /usr/local/www/.well-known/acme-challenge/<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'webroot'`<br>")
    webrootftpftpserver: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Hostname of FTP server to which ACME will connect (e.g. ftps://www.webserver.tld ). Currently supports FTPS (passive) and SFTP.<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'webrootftp'`<br>")
    webrootftpusername: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Username for the remote server<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'webrootftp'`<br>")
    webrootftppassword: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Password to authenticate this user on the remote server<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'webrootftp'`<br>")
    webrootftpfolder: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Folder into which the acme challenge response is written (e.g. /.well-known/acme-challenge/)<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'webrootftp'`<br>")
    standaloneport: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="HTTP listen port for stand-alone server. Must be 80 or have port 80 on WAN forwarded to this port. Firewall rules must allow traffic to reach this port.<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'standalone'`<br>")
    standaloneipv6: Optional[StrictBool] = Field(default=None, description="Bind to IPv6 instead of IPv4.<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'standalone'`<br>")
    standalonetlsport: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="TLS listen port for stand-alone server. Must be 443 or have port 443 on WAN forwarded to this port. Firewall rules must allow traffic to reach this port.<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'standalonetls'`<br>")
    nsupdate_server: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The DNS server to which updates are sent (IP address or hostname)<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_nsupdate'`<br>")
    nsupdate_keyname: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="(Optional) A name for the key, if it is different than _acme-challenge.[DomainName]<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_nsupdate'`<br>")
    nsupdate_keyalgo: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Algorithm used to generate the authentication Key for this zone<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_nsupdate'`<br>")
    nsupdate_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The key which authenticates updates for this zone<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_nsupdate'`<br>")
    nsupdate_zone: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="(Optional) Explicitly set the zone name for updates.<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_nsupdate'`<br>")
    one984hosting_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="1984Hosting Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_1984hosting'`<br>")
    one984hosting_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="1984Hosting Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_1984hosting'`<br>")
    acmeproxy_endpoint: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Acmeproxy Endpoint URL (https://ip:port)<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_acmeproxy'`<br>")
    acmeproxy_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Acmeproxy Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_acmeproxy'`<br>")
    acmeproxy_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Acmeproxy Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_acmeproxy'`<br>")
    acmedns_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="acme-dns.io Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_acmedns'`<br>")
    acmedns_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="acme-dns.io Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_acmedns'`<br>")
    acmedns_subdomain: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="acme-dns.io subdomain<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_acmedns'`<br>")
    acmedns_update_url: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="(optional) Custom ACME DNS Base URL<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_acmedns'`<br>")
    active24_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Active24 Token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_active24'`<br>")
    akamai_host: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Hostname<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_edgedns'`<br>")
    akamai_access_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Access Token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_edgedns'`<br>")
    akamai_client_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Client Token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_edgedns'`<br>")
    akamai_client_secret: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Client Secret<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_edgedns'`<br>")
    ali_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_ali'`<br>")
    ali_secret: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="API Secret<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_ali'`<br>")
    kas_login: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Login<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_kas'`<br>")
    kas_authtype: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Auth type (default: sha1)<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_kas'`<br>")
    kas_authdata: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Auth data<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_kas'`<br>")
    ad_api_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Alwaysdata API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_ad'`<br>")
    anx_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="API Token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_anx'`<br>")
    af_api_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="ArtFiles Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_artfiles'`<br>")
    af_api_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="ArtFiles Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_artfiles'`<br>")
    arvan_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Arvan API Token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_arvan'`<br>")
    aurora_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_aurora'`<br>")
    aurora_secret: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="API Secret. Obtain the key and secret from https://cp.pcextreme.nl/auroradns/users.<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_aurora'`<br>")
    autodns_user: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="autoDNS Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_autodns'`<br>")
    autodns_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="autoDNS Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_autodns'`<br>")
    autodns_context: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="autoDNS Context<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_autodns'`<br>")
    aws_access_key_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="AWS Access Key / API ID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_aws'`<br>")
    aws_secret_access_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="AWS Secret Access / API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_aws'`<br>")
    aws_dns_slowrate: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Sleep interval after TXT record update, in seconds (default: 1)<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_aws'`<br>")
    azion_email: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Account e-mail address<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_azion'`<br>")
    azion_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Account password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_azion'`<br>")
    azuredns_subscriptionid: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Azure Subscription ID. First, <a href=\"https://github.com/acmesh-official/acme.sh/wiki/How-to-use-Azure-DNS\">setup a service principal for access to the DNS Zone</a>.<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_azure'`<br>")
    azuredns_tenantid: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Azure Tenant ID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_azure'`<br>")
    azuredns_appid: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Azure App ID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_azure'`<br>")
    azuredns_clientsecret: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Azure Client Secret<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_azure'`<br>")
    bookmyname_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="BookMyName Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_bookmyname'`<br>")
    bookmyname_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="BookMyName Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_bookmyname'`<br>")
    bunny_api_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Bunny DNS API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_bunny'`<br>")
    clouddns_email: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="CloudDNS e-mail address<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_clouddns'`<br>")
    clouddns_client_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="CloudDNS client ID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_clouddns'`<br>")
    clouddns_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="CloudDNS Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_clouddns'`<br>")
    cloudns_auth_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Authentication ID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_cloudns'`<br>")
    cloudns_sub_auth_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Sub authentication ID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_cloudns'`<br>")
    cloudns_auth_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="ClouDNS Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_cloudns'`<br>")
    cf_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Cloudflare API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_cf'`<br>")
    cf_email: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Cloudflare API Email Address<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_cf'`<br>")
    cf_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Cloudflare API Token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_cf'`<br>")
    cf_account_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Cloudflare API Account ID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_cf'`<br>")
    cf_zone_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Cloudflare API Zone ID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_cf'`<br>")
    conoha_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Conoha Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_conoha'`<br>")
    conoha_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Conoha Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_conoha'`<br>")
    conoha_tenantid: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Conoha Tenant ID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_conoha'`<br>")
    conoha_identityserviceapi: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Conoha Identity Service API<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_conoha'`<br>")
    constellix_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Constellix Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_constellix'`<br>")
    constellix_secret: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Constellix Secret<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_constellix'`<br>")
    cpanel_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="cPanel username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_cpanel'`<br>")
    cpanel_apitoken: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="cPanel API token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_cpanel'`<br>")
    cpanel_hostname: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="URL to cPanel instance<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_cpanel'`<br>")
    cn_user: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Core Networks Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_cn'`<br>")
    cn_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Core Networks Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_cn'`<br>")
    curanet_authclientid: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Authentication Client ID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_curanet'`<br>")
    curanet_authsecret: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Authentication Secret<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_curanet'`<br>")
    cy_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="CY username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_cyon'`<br>")
    cy_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="CY Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_cyon'`<br>")
    ddnss_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="API Token (e.g. aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee)<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_ddnss'`<br>")
    dedyn_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="deSEC.io API Token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_desec'`<br>")
    dedyn_name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="deSEC.io Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_desec'`<br>")
    do_api_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="DigitalOcean API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_dgon'`<br>")
    da_api: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="DirectAdmin API URI (e.g. https://remoteUser:remotePassword@da.example.com:8443)<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_da'`<br>")
    da_api_insecure: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="DirectAdmin API Security check, 0=check for valid SSL certificate, 1=always accept<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_da'`<br>")
    dnsexit_api_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="DNSExit API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_dnsexit'`<br>")
    dnsexit_auth_user: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="DNSExit Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_dnsexit'`<br>")
    dnsexit_auth_pass: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="DNSExit Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_dnsexit'`<br>")
    dnshome_subdomain: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Subdomain<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_dnshome'`<br>")
    dnshome_subdomainpassword: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Subdomain Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_dnshome'`<br>")
    dnsimple_oauth_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="DNSimple oauth token, visit <a href=\"https://dnsimple.com/user\">https://dnsimple.com/user</a> to generate.<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_dnsimple'`<br>")
    me_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="DNSMadeEasy API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_me'`<br>")
    me_secret: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="DNSMadeEasy API Secret<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_me'`<br>")
    dnsservices_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="dns.services Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_dnsservices'`<br>")
    dnsservices_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="dns.services Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_dnsservices'`<br>")
    do_letoken: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="DO.de API Token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_doapi'`<br>")
    do_pid: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="DO Customer ID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_do'`<br>")
    do_pw: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="DO Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_do'`<br>")
    domeneshop_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Domeneshop API Token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_domeneshop'`<br>")
    domeneshop_secret: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Domeneshop API Secret<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_domeneshop'`<br>")
    dp_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Dnspod API ID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_dp'`<br>")
    dp_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Dnspod API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_dp'`<br>")
    dpi_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Dnspod API ID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_dpi'`<br>")
    dpi_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Dnspod API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_dpi'`<br>")
    dh_api_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Dreamhost API Token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_dreamhost'`<br>")
    duckdns_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="DuckDNS API Token (Look in DuckDNS account settings)<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_duckdns'`<br>")
    dd_api_user: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="DurableDNS API User<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_durabledns'`<br>")
    dd_api_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="DurableDNS API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_durabledns'`<br>")
    dyn_customer: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="dyn.com customer ID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_dyn'`<br>")
    dyn_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="dyn.com API Username (Dyn Managed DNS user, Needs Z&R Permissions for RecordAdd, RecordUpdate, RecordDelete, RecordGet, ZoneGet, ZoneAddNode, ZoneRemoveNode, ZonePublish)<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_dyn'`<br>")
    dyn_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="dyn.com Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_dyn'`<br>")
    df_user: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="dyndnsfree.de Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_df'`<br>")
    df_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="dyndnsfree.de Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_df'`<br>")
    dynu_clientid: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Dynu API Client ID created in the Dynu account settings<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_dynu'`<br>")
    dynu_secret: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Dynu API Secret<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_dynu'`<br>")
    easydns_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="easyDNS API Key. Sign up for a key at https://cp.easydns.com/manage/security/api/signup.php<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_easydns'`<br>")
    easydns_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="easyDNS API Token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_easydns'`<br>")
    euserv_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Euserv.eu Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_euserv'`<br>")
    euserv_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Euserv.eu Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_euserv'`<br>")
    exoscale_api_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Exoscale API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_exoscale'`<br>")
    exoscale_secret_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Exoscale Secret Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_exoscale'`<br>")
    fornex_api_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Fornex API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_fornex'`<br>")
    freedns_user: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="FreeDNS username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_freedns'`<br>")
    freedns_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="FreeDNS Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_freedns'`<br>")
    gandi_livedns_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Gandi LiveDNS API Key, retrieved from <a href=\"https://account.gandi.net\">https://account.gandi.net</a><br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_gandi_livedns'`<br>")
    gcore_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Gcore API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_gcore'`<br>")
    geoscaling_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_geoscaling'`<br>")
    geoscaling_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_geoscaling'`<br>")
    gd_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="GoDaddy API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_gd'`<br>")
    gd_secret: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="GoDaddy API Secret<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_gd'`<br>")
    googledomains_access_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Google Domains API Access Token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_googledomains'`<br>")
    googledomains_zone: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Google Domains DNS Zone<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_googledomains'`<br>")
    hetzner_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Hetzner API Token. Visit https://dns.hetzner.com/settings/api-token to retrieve.<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_hetzner'`<br>")
    hexonet_login: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Hexonet Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_hexonet'`<br>")
    hexonet_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Hexonet Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_hexonet'`<br>")
    huaweicloud_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_huaweicloud'`<br>")
    huaweicloud_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_huaweicloud'`<br>")
    huaweicloud_domainname: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Domain Name<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_huaweicloud'`<br>")
    he_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Hurricane Electric username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_he'`<br>")
    he_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Hurricane Electric password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_he'`<br>")
    hostingde_apikey: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Hosting.de API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_hostingde'`<br>")
    hostingde_endpoint: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Hosting.de API endpoint, e.g. https://secure.hosting.de<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_hostingde'`<br>")
    infoblox_creds: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Infoblox credentials in <strong>username:password</strong> format<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_infoblox'`<br>")
    infoblox_server: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Infoblox server IP address or hostname<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_infoblox'`<br>")
    infoblox_view: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Infoblox DNS View name, or enter \"default\"<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_infoblox'`<br>")
    infomaniak_api_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Infomaniak API token. Visit https://manager.infomaniak.com/v3/&lt;account_id&gt;/api/dashboard and generate a token with the scope Domain.<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_infomaniak'`<br>")
    default_infomaniak_api_url: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Infomaniak API URL (Default: https://api.infomaniak.com)<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_infomaniak'`<br>")
    infomaniak_ttl: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Infomaniak DNS record TTL (Default: 300)<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_infomaniak'`<br>")
    ionos_prefix: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Prefix<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_ionos'`<br>")
    ionos_secret: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Secret. Read https://beta.developer.hosting.ionos.de/docs/getstarted to learn how to get a prefix and secret.<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_ionos'`<br>")
    ipv64_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="IPv64.net Access Token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_ipv64'`<br>")
    internetbs_api_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Internet.BS API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_internetbs'`<br>")
    internetbs_api_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Internet.BS API Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_internetbs'`<br>")
    inwx_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="INWX.de username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_inwx'`<br>")
    inwx_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="INWX.de password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_inwx'`<br>")
    inwx_shared_secret: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="INWX.de shared secret<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_inwx'`<br>")
    ispc_user: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="ISPConfig remoteUser<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_ispconfig'`<br>")
    ispc_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="ISPConfig remotePassword<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_ispconfig'`<br>")
    ispc_api: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="API URL (e.g. https://ispc.domain.tld:8080/remote/json.php )<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_ispconfig'`<br>")
    ispc_api_insecure: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Set 1 for insecure and 0 for secure. Controls whether the server TLS certificate is checked for validity (0) or always accepted (1)<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_ispconfig'`<br>")
    jd_access_key_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="jdcloud Access Key ID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_jd'`<br>")
    jd_access_key_secret: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="jdcloud Access Key Secret<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_jd'`<br>")
    jd_region: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="jdcloud Region<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_jd'`<br>")
    joker_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Joker.com Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_joker'`<br>")
    joker_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Joker.com Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_joker'`<br>")
    kappernetdns_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="kapper.net API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_kappernet'`<br>")
    kappernetdns_secret: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="kapper.net API Secret<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_kappernet'`<br>")
    kinghost_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Kinghost API Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_kinghost'`<br>")
    kinghost_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Kinghost API Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_kinghost'`<br>")
    knot_server: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="IP address of the Knot server<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_knot'`<br>")
    knot_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Knot TSIG Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_knot'`<br>")
    la_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="ID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_la'`<br>")
    la_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_la'`<br>")
    lsw_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Leaseweb API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_leaseweb'`<br>")
    limacity_apikey: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="API Key must have the following roles: dns.admin, domains.reader<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_limacity'`<br>")
    linode_api_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Linode API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_linode'`<br>")
    linode_v4_api_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Linode v4 API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_linode_v4'`<br>")
    loopia_user: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Loopia username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_loopia'`<br>")
    loopia_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Loopia Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_loopia'`<br>")
    lua_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Luadns API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_lua'`<br>")
    lua_email: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Luadns API Email Address<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_lua'`<br>")
    miab_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="MailinaBox Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_miab'`<br>")
    miab_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="MailinaBox Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_miab'`<br>")
    miab_server: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="MailinaBox Server<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_miab'`<br>")
    misaka_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="misaka.io Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_misaka'`<br>")
    mydnsjp_masterid: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="MyDNS.jp Master ID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_mydnsjp'`<br>")
    mydnsjp_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="MyDNS.jp Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_mydnsjp'`<br>")
    mb_ak: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="OAuth2 Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_mythic_beasts'`<br>")
    mb_as: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="OAuth2 Secret<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_mythic_beasts'`<br>")
    namecom_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Name.com username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_namecom'`<br>")
    namecom_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Name.com API Token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_namecom'`<br>")
    namecheap_api_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Namecheap API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_namecheap'`<br>")
    namecheap_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Namecheap Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_namecheap'`<br>")
    nm_user: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="namemaster.de API username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_nm'`<br>")
    nm_sha256: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="namemaster.de API password as SHA256 hash<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_nm'`<br>")
    nanelo_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Nanelo.com Access Token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_nanelo'`<br>")
    nederhost_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="NederHost API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_nederhost'`<br>")
    namesilo_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Namesilo API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_namesilo'`<br>")
    neodigit_api_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Neodigit API Token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_neodigit'`<br>")
    nc_apikey: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Netcup API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_netcup'`<br>")
    nc_apipw: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Netcup API Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_netcup'`<br>")
    nc_cid: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Netcup Customer ID/Number<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_netcup'`<br>")
    netlify_access_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Netlify API Token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_netlify'`<br>")
    nic_clientid: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="nic.ru API Client ID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_nic'`<br>")
    nic_clientsecret: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="nic.ru API Client Secret<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_nic'`<br>")
    nic_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="nic.ru Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_nic'`<br>")
    nic_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="nic.ru Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_nic'`<br>")
    ns1_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="NS1 API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_nsone'`<br>")
    nw_api_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="NW API Token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_nw'`<br>")
    nw_api_endpoint: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Choose the NW API Endpoint<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_nw'`<br>")
    onecom_user: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="One.com Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_one'`<br>")
    onecom_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="One.com Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_one'`<br>")
    online_api_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Online.net API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_online'`<br>")
    oci_cli_tenancy: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="OCID of tenancy that contains the target DNS zone<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_oci'`<br>")
    oci_cli_user: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="OCID of user with permission to add/remove records from zones<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_oci'`<br>")
    oci_cli_region: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Tenancy home region<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_oci'`<br>")
    oci_cli_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The private API signing key in PEM format. Using an encrypted private key that needs a passphrase is not supported.<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_oci'`<br>")
    openprovider_user: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="OpenProvider Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_openprovider'`<br>")
    openprovider_passwordhash: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="OpenProvider Password Hash<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_openprovider'`<br>")
    ovh_ak: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="OVH Application Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_ovh'`<br>")
    ovh_as: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="OVH Application Secret<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_ovh'`<br>")
    ovh_ck: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="OVH Consumer Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_ovh'`<br>")
    ovh_end_point: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Choose the OVH API Endpoint / Region<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_ovh'`<br>")
    pleskxml_user: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Plesk User<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_pleskxml'`<br>")
    pleskxml_pass: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Plesk Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_pleskxml'`<br>")
    pleskxml_uri: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Plesk Server URI<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_pleskxml'`<br>")
    pointhq_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="PointHQ API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_pointhq'`<br>")
    pointhq_email: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="PointHQ account E-mail address<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_pointhq'`<br>")
    porkbun_api_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_porkbun'`<br>")
    porkbun_secret_api_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Secret API Key. Obtain the key and secret from https://porkbun.com/account/api<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_porkbun'`<br>")
    pdns_url: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="PowerDNS URL (e.g. http://ns.example.com:8081 )<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_pdns'`<br>")
    pdns_serverid: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="PowerDNS ServerId (e.g. localhost )<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_pdns'`<br>")
    pdns_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="PowerDNS Token (e.g. 0123456789ABCDEF )<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_pdns'`<br>")
    pdns_ttl: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="PowerDNS Record TTL (e.g. 60 )<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_pdns'`<br>")
    rackcorp_apiuuid: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="API UUID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_rackcorp'`<br>")
    rackcorp_apisecret: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="API Secret<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_rackcorp'`<br>")
    rackspace_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Rackspace Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_rackspace'`<br>")
    rackspace_apikey: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Rackspace API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_rackspace'`<br>")
    rage4_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_rage4'`<br>")
    rage4_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_rage4'`<br>")
    rcode0_api_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Rcode0 API Token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_rcode0'`<br>")
    rcode0_url: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Rcode0 URL<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_rcode0'`<br>")
    rcode0_ttl: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Rcode0 TTL<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_rcode0'`<br>")
    regru_api_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="reg.ru Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_regru'`<br>")
    regru_api_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="reg.ru API Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_regru'`<br>")
    scaleway_api_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="API Token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_scaleway'`<br>")
    schlundtech_user: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="schlundtech.de Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_schlundtech'`<br>")
    schlundtech_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="schlundtech.de Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_schlundtech'`<br>")
    sl_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Selectel API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_selectel'`<br>")
    selfhostdns_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Username (Customer number, not email address or DynDNS account)<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_selfhost'`<br>")
    selfhostdns_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_selfhost'`<br>")
    selfhostdns_map: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Record ID (Edit the record, value is shown in brackets)<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_selfhost'`<br>")
    servercow_api_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Servercow username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_servercow'`<br>")
    servercow_api_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Servercow password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_servercow'`<br>")
    simply_accountname: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Account Name<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_simply'`<br>")
    simply_apikey: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_simply'`<br>")
    simply_api: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="API Endpoint URL. Default: https://api.simply.com/1<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_simply'`<br>")
    tele3_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Tele3 Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_tele3'`<br>")
    tele3_secret: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Tele3 Secret<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_tele3'`<br>")
    tencent_secretid: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Tencent Secret ID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_tencent'`<br>")
    tencent_secretkey: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Tencent Secret Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_tencent'`<br>")
    udr_user: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_udr'`<br>")
    udr_pass: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_udr'`<br>")
    ultra_usr: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="UltraDNS Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_ultra'`<br>")
    ultra_pwd: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="UltraDNS Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_ultra'`<br>", alias="ULTRA_PWD")
    uno_user: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="UnoEuro username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_unoeuro'`<br>")
    uno_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="UnoEuro API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_unoeuro'`<br>")
    variomedia_api_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="variomedia.de API Token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_variomedia'`<br>")
    veesp_user: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_veesp'`<br>")
    veesp_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_veesp'`<br>")
    vercel_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Vercel Token<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_vercel'`<br>")
    vscale_api_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="vscale API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_vscale'`<br>")
    vultr_api_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="vultr.com API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_vultr'`<br>")
    ws_apikey: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="API Key / \"Identifier\" in the WS Admin<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_websupport'`<br>")
    ws_apisecret: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="API Secret / \"Secret key\" in the WS Admin. Obtain the API Key and Secret from https://admin.websupport.sk/en/auth/apiKey.<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_websupport'`<br>")
    west_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="West.cn Domain API Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_west_cn'`<br>")
    west_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="West.cn Domain API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_west_cn'`<br>")
    world4you_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_world4you'`<br>")
    world4you_password: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Password<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_world4you'`<br>")
    pdd_token: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Yandex PDD Token, generate at <a href=\"https://pddimp.yandex.ru/api2/admin/get_token\">https://pddimp.yandex.ru/api2/admin/get_token</a><br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_yandex'`<br>")
    yc_zone_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="DNS Zone ID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_yc'`<br>")
    yc_folder_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Yandex Cloud Folder ID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_yc'`<br>")
    yc_sa_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Service Account ID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_yc'`<br>")
    yc_sa_key_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Service Account IAM Key ID<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_yc'`<br>")
    yc_sa_key_file_pem_b64: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Base64 content of private key.<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_yc'`<br>")
    zm_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Zonomi API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_zonomi'`<br>")
    zone_username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Zone.ee Username<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_zone'`<br>")
    zone_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Zone.ee API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_zone'`<br>")
    zilore_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="Zilore API Key<br><br>This field is only available when the following conditions are met:<br>- `method` must be equal to `'dns_zilore'`<br>")
    anydnschallengealias: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="(Optional) Adds the --challenge-alias flag to the acme.sh call.<br/>To use a CNAME for _acme-challenge.importantDomain.tld to direct the acme validation to a different (sub)domain _acme-challenge.aliasDomainForValidationOnly.tld, configure the alternate domain here.<br/>More information can be found <a href=\"https://github.com/acmesh-official/acme.sh/wiki/DNS-alias-mode\" target=\"_new\">here</a>.<br><br>This field is only available when the following conditions are met:<br>- `method` must not be one of [ webroot, webrootftp, standalone, standalonetls ]<br>")
    anydnschallengedomain: Optional[StrictBool] = Field(default=None, description="(Optional) Uses the challenge domain alias value as --domain-alias instead in the acme.sh call.<br><br>This field is only available when the following conditions are met:<br>- `method` must not be one of [ webroot, webrootftp, standalone, standalonetls ]<br>")
    parent_id: StrictInt = Field(description="The ID of the parent this object is nested under.")
    __properties: ClassVar[List[str]] = ["name", "status", "method", "webrootfolder", "webrootftpftpserver", "webrootftpusername", "webrootftppassword", "webrootftpfolder", "standaloneport", "standaloneipv6", "standalonetlsport", "nsupdate_server", "nsupdate_keyname", "nsupdate_keyalgo", "nsupdate_key", "nsupdate_zone", "one984hosting_username", "one984hosting_password", "acmeproxy_endpoint", "acmeproxy_username", "acmeproxy_password", "acmedns_username", "acmedns_password", "acmedns_subdomain", "acmedns_update_url", "active24_token", "akamai_host", "akamai_access_token", "akamai_client_token", "akamai_client_secret", "ali_key", "ali_secret", "kas_login", "kas_authtype", "kas_authdata", "ad_api_key", "anx_token", "af_api_username", "af_api_password", "arvan_token", "aurora_key", "aurora_secret", "autodns_user", "autodns_password", "autodns_context", "aws_access_key_id", "aws_secret_access_key", "aws_dns_slowrate", "azion_email", "azion_password", "azuredns_subscriptionid", "azuredns_tenantid", "azuredns_appid", "azuredns_clientsecret", "bookmyname_username", "bookmyname_password", "bunny_api_key", "clouddns_email", "clouddns_client_id", "clouddns_password", "cloudns_auth_id", "cloudns_sub_auth_id", "cloudns_auth_password", "cf_key", "cf_email", "cf_token", "cf_account_id", "cf_zone_id", "conoha_username", "conoha_password", "conoha_tenantid", "conoha_identityserviceapi", "constellix_key", "constellix_secret", "cpanel_username", "cpanel_apitoken", "cpanel_hostname", "cn_user", "cn_password", "curanet_authclientid", "curanet_authsecret", "cy_username", "cy_password", "ddnss_token", "dedyn_token", "dedyn_name", "do_api_key", "da_api", "da_api_insecure", "dnsexit_api_key", "dnsexit_auth_user", "dnsexit_auth_pass", "dnshome_subdomain", "dnshome_subdomainpassword", "dnsimple_oauth_token", "me_key", "me_secret", "dnsservices_username", "dnsservices_password", "do_letoken", "do_pid", "do_pw", "domeneshop_token", "domeneshop_secret", "dp_id", "dp_key", "dpi_id", "dpi_key", "dh_api_key", "duckdns_token", "dd_api_user", "dd_api_key", "dyn_customer", "dyn_username", "dyn_password", "df_user", "df_password", "dynu_clientid", "dynu_secret", "easydns_key", "easydns_token", "euserv_username", "euserv_password", "exoscale_api_key", "exoscale_secret_key", "fornex_api_key", "freedns_user", "freedns_password", "gandi_livedns_key", "gcore_key", "geoscaling_username", "geoscaling_password", "gd_key", "gd_secret", "googledomains_access_token", "googledomains_zone", "hetzner_token", "hexonet_login", "hexonet_password", "huaweicloud_username", "huaweicloud_password", "huaweicloud_domainname", "he_username", "he_password", "hostingde_apikey", "hostingde_endpoint", "infoblox_creds", "infoblox_server", "infoblox_view", "infomaniak_api_token", "default_infomaniak_api_url", "infomaniak_ttl", "ionos_prefix", "ionos_secret", "ipv64_token", "internetbs_api_key", "internetbs_api_password", "inwx_username", "inwx_password", "inwx_shared_secret", "ispc_user", "ispc_password", "ispc_api", "ispc_api_insecure", "jd_access_key_id", "jd_access_key_secret", "jd_region", "joker_username", "joker_password", "kappernetdns_key", "kappernetdns_secret", "kinghost_username", "kinghost_password", "knot_server", "knot_key", "la_id", "la_key", "lsw_key", "limacity_apikey", "linode_api_key", "linode_v4_api_key", "loopia_user", "loopia_password", "lua_key", "lua_email", "miab_username", "miab_password", "miab_server", "misaka_key", "mydnsjp_masterid", "mydnsjp_password", "mb_ak", "mb_as", "namecom_username", "namecom_token", "namecheap_api_key", "namecheap_username", "nm_user", "nm_sha256", "nanelo_token", "nederhost_key", "namesilo_key", "neodigit_api_token", "nc_apikey", "nc_apipw", "nc_cid", "netlify_access_token", "nic_clientid", "nic_clientsecret", "nic_username", "nic_password", "ns1_key", "nw_api_token", "nw_api_endpoint", "onecom_user", "onecom_password", "online_api_key", "oci_cli_tenancy", "oci_cli_user", "oci_cli_region", "oci_cli_key", "openprovider_user", "openprovider_passwordhash", "ovh_ak", "ovh_as", "ovh_ck", "ovh_end_point", "pleskxml_user", "pleskxml_pass", "pleskxml_uri", "pointhq_key", "pointhq_email", "porkbun_api_key", "porkbun_secret_api_key", "pdns_url", "pdns_serverid", "pdns_token", "pdns_ttl", "rackcorp_apiuuid", "rackcorp_apisecret", "rackspace_username", "rackspace_apikey", "rage4_username", "rage4_token", "rcode0_api_token", "rcode0_url", "rcode0_ttl", "regru_api_username", "regru_api_password", "scaleway_api_token", "schlundtech_user", "schlundtech_password", "sl_key", "selfhostdns_username", "selfhostdns_password", "selfhostdns_map", "servercow_api_username", "servercow_api_password", "simply_accountname", "simply_apikey", "simply_api", "tele3_key", "tele3_secret", "tencent_secretid", "tencent_secretkey", "udr_user", "udr_pass", "ultra_usr", "ULTRA_PWD", "uno_user", "uno_key", "variomedia_api_token", "veesp_user", "veesp_password", "vercel_token", "vscale_api_key", "vultr_api_key", "ws_apikey", "ws_apisecret", "west_username", "west_key", "world4you_username", "world4you_password", "pdd_token", "yc_zone_id", "yc_folder_id", "yc_sa_id", "yc_sa_key_id", "yc_sa_key_file_pem_b64", "zm_key", "zone_username", "zone_key", "zilore_key", "anydnschallengealias", "anydnschallengedomain", "parent_id"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['enable', 'disable']):
            raise ValueError("must be one of enum values ('enable', 'disable')")
        return value

    @field_validator('nsupdate_keyalgo')
    def nsupdate_keyalgo_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['', '157', '165', '164', '163', '162', '161']):
            raise ValueError("must be one of enum values ('', '157', '165', '164', '163', '162', '161')")
        return value

    @field_validator('nw_api_endpoint')
    def nw_api_endpoint_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['', 'https://portal.nexcess.net', 'https://core.thermo.io', 'https://my.futurehosting.com']):
            raise ValueError("must be one of enum values ('', 'https://portal.nexcess.net', 'https://core.thermo.io', 'https://my.futurehosting.com')")
        return value

    @field_validator('ovh_end_point')
    def ovh_end_point_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['', 'ovh-eu', 'ovh-ca', 'kimsufi-eu', 'kimsufi-ca', 'soyoustart-eu', 'soyoustart-ca', 'runabove-ca']):
            raise ValueError("must be one of enum values ('', 'ovh-eu', 'ovh-ca', 'kimsufi-eu', 'kimsufi-ca', 'soyoustart-eu', 'soyoustart-ca', 'runabove-ca')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostServicesACMECertificateDomainEndpointRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostServicesACMECertificateDomainEndpointRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "status": obj.get("status") if obj.get("status") is not None else 'enable',
            "method": obj.get("method"),
            "webrootfolder": obj.get("webrootfolder"),
            "webrootftpftpserver": obj.get("webrootftpftpserver"),
            "webrootftpusername": obj.get("webrootftpusername"),
            "webrootftppassword": obj.get("webrootftppassword"),
            "webrootftpfolder": obj.get("webrootftpfolder"),
            "standaloneport": obj.get("standaloneport"),
            "standaloneipv6": obj.get("standaloneipv6"),
            "standalonetlsport": obj.get("standalonetlsport"),
            "nsupdate_server": obj.get("nsupdate_server"),
            "nsupdate_keyname": obj.get("nsupdate_keyname"),
            "nsupdate_keyalgo": obj.get("nsupdate_keyalgo"),
            "nsupdate_key": obj.get("nsupdate_key"),
            "nsupdate_zone": obj.get("nsupdate_zone"),
            "one984hosting_username": obj.get("one984hosting_username"),
            "one984hosting_password": obj.get("one984hosting_password"),
            "acmeproxy_endpoint": obj.get("acmeproxy_endpoint"),
            "acmeproxy_username": obj.get("acmeproxy_username"),
            "acmeproxy_password": obj.get("acmeproxy_password"),
            "acmedns_username": obj.get("acmedns_username"),
            "acmedns_password": obj.get("acmedns_password"),
            "acmedns_subdomain": obj.get("acmedns_subdomain"),
            "acmedns_update_url": obj.get("acmedns_update_url"),
            "active24_token": obj.get("active24_token"),
            "akamai_host": obj.get("akamai_host"),
            "akamai_access_token": obj.get("akamai_access_token"),
            "akamai_client_token": obj.get("akamai_client_token"),
            "akamai_client_secret": obj.get("akamai_client_secret"),
            "ali_key": obj.get("ali_key"),
            "ali_secret": obj.get("ali_secret"),
            "kas_login": obj.get("kas_login"),
            "kas_authtype": obj.get("kas_authtype"),
            "kas_authdata": obj.get("kas_authdata"),
            "ad_api_key": obj.get("ad_api_key"),
            "anx_token": obj.get("anx_token"),
            "af_api_username": obj.get("af_api_username"),
            "af_api_password": obj.get("af_api_password"),
            "arvan_token": obj.get("arvan_token"),
            "aurora_key": obj.get("aurora_key"),
            "aurora_secret": obj.get("aurora_secret"),
            "autodns_user": obj.get("autodns_user"),
            "autodns_password": obj.get("autodns_password"),
            "autodns_context": obj.get("autodns_context"),
            "aws_access_key_id": obj.get("aws_access_key_id"),
            "aws_secret_access_key": obj.get("aws_secret_access_key"),
            "aws_dns_slowrate": obj.get("aws_dns_slowrate"),
            "azion_email": obj.get("azion_email"),
            "azion_password": obj.get("azion_password"),
            "azuredns_subscriptionid": obj.get("azuredns_subscriptionid"),
            "azuredns_tenantid": obj.get("azuredns_tenantid"),
            "azuredns_appid": obj.get("azuredns_appid"),
            "azuredns_clientsecret": obj.get("azuredns_clientsecret"),
            "bookmyname_username": obj.get("bookmyname_username"),
            "bookmyname_password": obj.get("bookmyname_password"),
            "bunny_api_key": obj.get("bunny_api_key"),
            "clouddns_email": obj.get("clouddns_email"),
            "clouddns_client_id": obj.get("clouddns_client_id"),
            "clouddns_password": obj.get("clouddns_password"),
            "cloudns_auth_id": obj.get("cloudns_auth_id"),
            "cloudns_sub_auth_id": obj.get("cloudns_sub_auth_id"),
            "cloudns_auth_password": obj.get("cloudns_auth_password"),
            "cf_key": obj.get("cf_key"),
            "cf_email": obj.get("cf_email"),
            "cf_token": obj.get("cf_token"),
            "cf_account_id": obj.get("cf_account_id"),
            "cf_zone_id": obj.get("cf_zone_id"),
            "conoha_username": obj.get("conoha_username"),
            "conoha_password": obj.get("conoha_password"),
            "conoha_tenantid": obj.get("conoha_tenantid"),
            "conoha_identityserviceapi": obj.get("conoha_identityserviceapi"),
            "constellix_key": obj.get("constellix_key"),
            "constellix_secret": obj.get("constellix_secret"),
            "cpanel_username": obj.get("cpanel_username"),
            "cpanel_apitoken": obj.get("cpanel_apitoken"),
            "cpanel_hostname": obj.get("cpanel_hostname"),
            "cn_user": obj.get("cn_user"),
            "cn_password": obj.get("cn_password"),
            "curanet_authclientid": obj.get("curanet_authclientid"),
            "curanet_authsecret": obj.get("curanet_authsecret"),
            "cy_username": obj.get("cy_username"),
            "cy_password": obj.get("cy_password"),
            "ddnss_token": obj.get("ddnss_token"),
            "dedyn_token": obj.get("dedyn_token"),
            "dedyn_name": obj.get("dedyn_name"),
            "do_api_key": obj.get("do_api_key"),
            "da_api": obj.get("da_api"),
            "da_api_insecure": obj.get("da_api_insecure"),
            "dnsexit_api_key": obj.get("dnsexit_api_key"),
            "dnsexit_auth_user": obj.get("dnsexit_auth_user"),
            "dnsexit_auth_pass": obj.get("dnsexit_auth_pass"),
            "dnshome_subdomain": obj.get("dnshome_subdomain"),
            "dnshome_subdomainpassword": obj.get("dnshome_subdomainpassword"),
            "dnsimple_oauth_token": obj.get("dnsimple_oauth_token"),
            "me_key": obj.get("me_key"),
            "me_secret": obj.get("me_secret"),
            "dnsservices_username": obj.get("dnsservices_username"),
            "dnsservices_password": obj.get("dnsservices_password"),
            "do_letoken": obj.get("do_letoken"),
            "do_pid": obj.get("do_pid"),
            "do_pw": obj.get("do_pw"),
            "domeneshop_token": obj.get("domeneshop_token"),
            "domeneshop_secret": obj.get("domeneshop_secret"),
            "dp_id": obj.get("dp_id"),
            "dp_key": obj.get("dp_key"),
            "dpi_id": obj.get("dpi_id"),
            "dpi_key": obj.get("dpi_key"),
            "dh_api_key": obj.get("dh_api_key"),
            "duckdns_token": obj.get("duckdns_token"),
            "dd_api_user": obj.get("dd_api_user"),
            "dd_api_key": obj.get("dd_api_key"),
            "dyn_customer": obj.get("dyn_customer"),
            "dyn_username": obj.get("dyn_username"),
            "dyn_password": obj.get("dyn_password"),
            "df_user": obj.get("df_user"),
            "df_password": obj.get("df_password"),
            "dynu_clientid": obj.get("dynu_clientid"),
            "dynu_secret": obj.get("dynu_secret"),
            "easydns_key": obj.get("easydns_key"),
            "easydns_token": obj.get("easydns_token"),
            "euserv_username": obj.get("euserv_username"),
            "euserv_password": obj.get("euserv_password"),
            "exoscale_api_key": obj.get("exoscale_api_key"),
            "exoscale_secret_key": obj.get("exoscale_secret_key"),
            "fornex_api_key": obj.get("fornex_api_key"),
            "freedns_user": obj.get("freedns_user"),
            "freedns_password": obj.get("freedns_password"),
            "gandi_livedns_key": obj.get("gandi_livedns_key"),
            "gcore_key": obj.get("gcore_key"),
            "geoscaling_username": obj.get("geoscaling_username"),
            "geoscaling_password": obj.get("geoscaling_password"),
            "gd_key": obj.get("gd_key"),
            "gd_secret": obj.get("gd_secret"),
            "googledomains_access_token": obj.get("googledomains_access_token"),
            "googledomains_zone": obj.get("googledomains_zone"),
            "hetzner_token": obj.get("hetzner_token"),
            "hexonet_login": obj.get("hexonet_login"),
            "hexonet_password": obj.get("hexonet_password"),
            "huaweicloud_username": obj.get("huaweicloud_username"),
            "huaweicloud_password": obj.get("huaweicloud_password"),
            "huaweicloud_domainname": obj.get("huaweicloud_domainname"),
            "he_username": obj.get("he_username"),
            "he_password": obj.get("he_password"),
            "hostingde_apikey": obj.get("hostingde_apikey"),
            "hostingde_endpoint": obj.get("hostingde_endpoint"),
            "infoblox_creds": obj.get("infoblox_creds"),
            "infoblox_server": obj.get("infoblox_server"),
            "infoblox_view": obj.get("infoblox_view"),
            "infomaniak_api_token": obj.get("infomaniak_api_token"),
            "default_infomaniak_api_url": obj.get("default_infomaniak_api_url"),
            "infomaniak_ttl": obj.get("infomaniak_ttl"),
            "ionos_prefix": obj.get("ionos_prefix"),
            "ionos_secret": obj.get("ionos_secret"),
            "ipv64_token": obj.get("ipv64_token"),
            "internetbs_api_key": obj.get("internetbs_api_key"),
            "internetbs_api_password": obj.get("internetbs_api_password"),
            "inwx_username": obj.get("inwx_username"),
            "inwx_password": obj.get("inwx_password"),
            "inwx_shared_secret": obj.get("inwx_shared_secret"),
            "ispc_user": obj.get("ispc_user"),
            "ispc_password": obj.get("ispc_password"),
            "ispc_api": obj.get("ispc_api"),
            "ispc_api_insecure": obj.get("ispc_api_insecure"),
            "jd_access_key_id": obj.get("jd_access_key_id"),
            "jd_access_key_secret": obj.get("jd_access_key_secret"),
            "jd_region": obj.get("jd_region"),
            "joker_username": obj.get("joker_username"),
            "joker_password": obj.get("joker_password"),
            "kappernetdns_key": obj.get("kappernetdns_key"),
            "kappernetdns_secret": obj.get("kappernetdns_secret"),
            "kinghost_username": obj.get("kinghost_username"),
            "kinghost_password": obj.get("kinghost_password"),
            "knot_server": obj.get("knot_server"),
            "knot_key": obj.get("knot_key"),
            "la_id": obj.get("la_id"),
            "la_key": obj.get("la_key"),
            "lsw_key": obj.get("lsw_key"),
            "limacity_apikey": obj.get("limacity_apikey"),
            "linode_api_key": obj.get("linode_api_key"),
            "linode_v4_api_key": obj.get("linode_v4_api_key"),
            "loopia_user": obj.get("loopia_user"),
            "loopia_password": obj.get("loopia_password"),
            "lua_key": obj.get("lua_key"),
            "lua_email": obj.get("lua_email"),
            "miab_username": obj.get("miab_username"),
            "miab_password": obj.get("miab_password"),
            "miab_server": obj.get("miab_server"),
            "misaka_key": obj.get("misaka_key"),
            "mydnsjp_masterid": obj.get("mydnsjp_masterid"),
            "mydnsjp_password": obj.get("mydnsjp_password"),
            "mb_ak": obj.get("mb_ak"),
            "mb_as": obj.get("mb_as"),
            "namecom_username": obj.get("namecom_username"),
            "namecom_token": obj.get("namecom_token"),
            "namecheap_api_key": obj.get("namecheap_api_key"),
            "namecheap_username": obj.get("namecheap_username"),
            "nm_user": obj.get("nm_user"),
            "nm_sha256": obj.get("nm_sha256"),
            "nanelo_token": obj.get("nanelo_token"),
            "nederhost_key": obj.get("nederhost_key"),
            "namesilo_key": obj.get("namesilo_key"),
            "neodigit_api_token": obj.get("neodigit_api_token"),
            "nc_apikey": obj.get("nc_apikey"),
            "nc_apipw": obj.get("nc_apipw"),
            "nc_cid": obj.get("nc_cid"),
            "netlify_access_token": obj.get("netlify_access_token"),
            "nic_clientid": obj.get("nic_clientid"),
            "nic_clientsecret": obj.get("nic_clientsecret"),
            "nic_username": obj.get("nic_username"),
            "nic_password": obj.get("nic_password"),
            "ns1_key": obj.get("ns1_key"),
            "nw_api_token": obj.get("nw_api_token"),
            "nw_api_endpoint": obj.get("nw_api_endpoint"),
            "onecom_user": obj.get("onecom_user"),
            "onecom_password": obj.get("onecom_password"),
            "online_api_key": obj.get("online_api_key"),
            "oci_cli_tenancy": obj.get("oci_cli_tenancy"),
            "oci_cli_user": obj.get("oci_cli_user"),
            "oci_cli_region": obj.get("oci_cli_region"),
            "oci_cli_key": obj.get("oci_cli_key"),
            "openprovider_user": obj.get("openprovider_user"),
            "openprovider_passwordhash": obj.get("openprovider_passwordhash"),
            "ovh_ak": obj.get("ovh_ak"),
            "ovh_as": obj.get("ovh_as"),
            "ovh_ck": obj.get("ovh_ck"),
            "ovh_end_point": obj.get("ovh_end_point"),
            "pleskxml_user": obj.get("pleskxml_user"),
            "pleskxml_pass": obj.get("pleskxml_pass"),
            "pleskxml_uri": obj.get("pleskxml_uri"),
            "pointhq_key": obj.get("pointhq_key"),
            "pointhq_email": obj.get("pointhq_email"),
            "porkbun_api_key": obj.get("porkbun_api_key"),
            "porkbun_secret_api_key": obj.get("porkbun_secret_api_key"),
            "pdns_url": obj.get("pdns_url"),
            "pdns_serverid": obj.get("pdns_serverid"),
            "pdns_token": obj.get("pdns_token"),
            "pdns_ttl": obj.get("pdns_ttl"),
            "rackcorp_apiuuid": obj.get("rackcorp_apiuuid"),
            "rackcorp_apisecret": obj.get("rackcorp_apisecret"),
            "rackspace_username": obj.get("rackspace_username"),
            "rackspace_apikey": obj.get("rackspace_apikey"),
            "rage4_username": obj.get("rage4_username"),
            "rage4_token": obj.get("rage4_token"),
            "rcode0_api_token": obj.get("rcode0_api_token"),
            "rcode0_url": obj.get("rcode0_url"),
            "rcode0_ttl": obj.get("rcode0_ttl"),
            "regru_api_username": obj.get("regru_api_username"),
            "regru_api_password": obj.get("regru_api_password"),
            "scaleway_api_token": obj.get("scaleway_api_token"),
            "schlundtech_user": obj.get("schlundtech_user"),
            "schlundtech_password": obj.get("schlundtech_password"),
            "sl_key": obj.get("sl_key"),
            "selfhostdns_username": obj.get("selfhostdns_username"),
            "selfhostdns_password": obj.get("selfhostdns_password"),
            "selfhostdns_map": obj.get("selfhostdns_map"),
            "servercow_api_username": obj.get("servercow_api_username"),
            "servercow_api_password": obj.get("servercow_api_password"),
            "simply_accountname": obj.get("simply_accountname"),
            "simply_apikey": obj.get("simply_apikey"),
            "simply_api": obj.get("simply_api"),
            "tele3_key": obj.get("tele3_key"),
            "tele3_secret": obj.get("tele3_secret"),
            "tencent_secretid": obj.get("tencent_secretid"),
            "tencent_secretkey": obj.get("tencent_secretkey"),
            "udr_user": obj.get("udr_user"),
            "udr_pass": obj.get("udr_pass"),
            "ultra_usr": obj.get("ultra_usr"),
            "ULTRA_PWD": obj.get("ULTRA_PWD"),
            "uno_user": obj.get("uno_user"),
            "uno_key": obj.get("uno_key"),
            "variomedia_api_token": obj.get("variomedia_api_token"),
            "veesp_user": obj.get("veesp_user"),
            "veesp_password": obj.get("veesp_password"),
            "vercel_token": obj.get("vercel_token"),
            "vscale_api_key": obj.get("vscale_api_key"),
            "vultr_api_key": obj.get("vultr_api_key"),
            "ws_apikey": obj.get("ws_apikey"),
            "ws_apisecret": obj.get("ws_apisecret"),
            "west_username": obj.get("west_username"),
            "west_key": obj.get("west_key"),
            "world4you_username": obj.get("world4you_username"),
            "world4you_password": obj.get("world4you_password"),
            "pdd_token": obj.get("pdd_token"),
            "yc_zone_id": obj.get("yc_zone_id"),
            "yc_folder_id": obj.get("yc_folder_id"),
            "yc_sa_id": obj.get("yc_sa_id"),
            "yc_sa_key_id": obj.get("yc_sa_key_id"),
            "yc_sa_key_file_pem_b64": obj.get("yc_sa_key_file_pem_b64"),
            "zm_key": obj.get("zm_key"),
            "zone_username": obj.get("zone_username"),
            "zone_key": obj.get("zone_key"),
            "zilore_key": obj.get("zilore_key"),
            "anydnschallengealias": obj.get("anydnschallengealias"),
            "anydnschallengedomain": obj.get("anydnschallengedomain"),
            "parent_id": obj.get("parent_id")
        })
        return _obj


