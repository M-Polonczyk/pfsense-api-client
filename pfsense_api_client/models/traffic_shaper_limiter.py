# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from pfsense_api_client.models.traffic_shaper_limiter_bandwidth_inner import TrafficShaperLimiterBandwidthInner
from pfsense_api_client.models.traffic_shaper_limiter_queue_inner import TrafficShaperLimiterQueueInner
from typing import Optional, Set
from typing_extensions import Self

class TrafficShaperLimiter(BaseModel):
    """
    TrafficShaperLimiter
    """ # noqa: E501
    name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The unique name for this limiter.<br>")
    number: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=1, description="A unique number auto-assigned to this limiter. This is only used internally by the system and cannot be manually set or changed.<br>")
    enabled: Optional[StrictBool] = Field(default=None, description="Enables or disables this limiter and its child queues.<br>")
    mask: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='none', description="If `source` or `destination` slots is chosen a dynamic pipe with the bandwidth, delay, packet loss and queue size given above will be created for each source/destination IP address encountered, respectively. This makes it possible to easily specify bandwidth limits per host or subnet.<br>")
    maskbits: Optional[Annotated[int, Field(le=32, strict=True, ge=1)]] = Field(default=32, description="The IPv4 mask bits to use when determine the scope of the dynamic pipe for IPv4 traffic.<br><br>This field is only available when the following conditions are met:<br>- `mask` must be one of [ srcaddress, dstaddress ]<br>")
    maskbitsv6: Optional[Annotated[int, Field(le=128, strict=True, ge=1)]] = Field(default=128, description="The IPv6 mask bits to use when determine the scope of the dynamic pipe for IPv4 traffic.<br><br>This field is only available when the following conditions are met:<br>- `mask` must be one of [ srcaddress, dstaddress ]<br>")
    qlimit: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=1)]] = Field(default=None, description="The length of the limiter's queue which the scheduler and AQM are responsible for. Set to `null` to assume default.<br>")
    ecn: Optional[StrictBool] = Field(default=None, description="Enable or disable ECN. ECN sets a reserved TCP flag when the queue is nearing or exceeding capacity. Not all AQMs or schedulers support this.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be one of [ codel, pie, red, gred ]<br>- `sched` must be one of [ fq_codel, fq_pie ]<br>")
    description: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The verbose description for this limiter.<br>")
    aqm: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The Active Queue Management (AQM) algorithm to use for this limiter. AQM is the intelligent drop of network packets inside the limiter, when it becomes full or gets close to becoming full, with the goal of reducing network congestion.<br>")
    sched: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The scheduler to use for this limiter. The scheduler manages the sequence of network packets in the limiter's queue.<br>")
    param_codel_target: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the CoDel target parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'codel'`<br>")
    param_codel_interval: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the CoDel interval parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'codel'`<br>")
    param_pie_target: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the PIE target parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'pie'`<br>")
    param_pie_tupdate: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the PIE tupdate parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'pie'`<br>")
    param_pie_alpha: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the PIE alpha parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'pie'`<br>")
    param_pie_beta: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the PIE beta parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'pie'`<br>")
    param_pie_max_burst: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the PIE max_burst parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'pie'`<br>")
    param_pie_max_ecnth: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the PIE ecnth parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'pie'`<br>")
    pie_onoff: Optional[StrictBool] = Field(default=None, description="Enable or disable turning PIE on and off depending on queue load.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'pie'`<br>")
    pie_capdrop: Optional[StrictBool] = Field(default=None, description="Enable or disable cap drop adjustment.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'pie'`<br>")
    pie_qdelay: Optional[StrictBool] = Field(default=None, description="Set queue delay type to timestamps (true) or departure rate estimation (false).<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'pie'`<br>")
    pie_pderand: Optional[StrictBool] = Field(default=None, description="Enable or disable drop probability de-randomisation.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'pie'`<br>")
    param_red_w_q: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=1, description="The value for the RED w_q parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'red'`<br>")
    param_red_min_th: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the RED min_th parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'red'`<br>")
    param_red_max_th: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=1, description="The value for the RED max_th parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'red'`<br>")
    param_red_max_p: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=1, description="The value for the RED max_p parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'red'`<br>")
    param_gred_w_q: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=1, description="The value for the GRED w_q parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'gred'`<br>")
    param_gred_min_th: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the GRED min_th parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'gred'`<br>")
    param_gred_max_th: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=1, description="The value for the GRED max_th parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'gred'`<br>")
    param_gred_max_p: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=1, description="The value for the GRED max_p parameter.<br><br>This field is only available when the following conditions are met:<br>- `aqm` must be equal to `'gred'`<br>")
    param_fq_codel_target: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the FQ CoDel target parameter.<br><br>This field is only available when the following conditions are met:<br>- `sched` must be equal to `'fq_codel'`<br>")
    param_fq_codel_interval: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the FQ CoDel interval parameter.<br><br>This field is only available when the following conditions are met:<br>- `sched` must be equal to `'fq_codel'`<br>")
    param_fq_codel_quantum: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the FQ CoDel quantum parameter.<br><br>This field is only available when the following conditions are met:<br>- `sched` must be equal to `'fq_codel'`<br>")
    param_fq_codel_limit: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the FQ CoDel limit parameter.<br><br>This field is only available when the following conditions are met:<br>- `sched` must be equal to `'fq_codel'`<br>")
    param_fq_codel_flows: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the FQ CoDel flows parameter.<br><br>This field is only available when the following conditions are met:<br>- `sched` must be equal to `'fq_codel'`<br>")
    param_fq_pie_target: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the FQ PIE target parameter.<br><br>This field is only available when the following conditions are met:<br>- `sched` must be equal to `'fq_pie'`<br>")
    param_fq_pie_tupdate: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the FQ PIE tupdate parameter.<br><br>This field is only available when the following conditions are met:<br>- `sched` must be equal to `'fq_pie'`<br>")
    param_fq_pie_alpha: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the FQ PIE alpha parameter.<br><br>This field is only available when the following conditions are met:<br>- `sched` must be equal to `'fq_pie'`<br>")
    param_fq_pie_beta: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the FQ PIE beta parameter.<br><br>This field is only available when the following conditions are met:<br>- `sched` must be equal to `'fq_pie'`<br>")
    param_fq_pie_max_burst: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the FQ PIE max_burst parameter.<br><br>This field is only available when the following conditions are met:<br>- `sched` must be equal to `'fq_pie'`<br>")
    param_fq_pie_max_ecnth: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the FQ PIE ecnth parameter.<br><br>This field is only available when the following conditions are met:<br>- `sched` must be equal to `'fq_pie'`<br>")
    param_fq_pie_quantum: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the FQ PIE quantum parameter.<br><br>This field is only available when the following conditions are met:<br>- `sched` must be equal to `'fq_pie'`<br>")
    param_fq_pie_limit: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the FQ PIE limit parameter.<br><br>This field is only available when the following conditions are met:<br>- `sched` must be equal to `'fq_pie'`<br>")
    param_fq_pie_flows: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The value for the FQ PIE flows parameter.<br><br>This field is only available when the following conditions are met:<br>- `sched` must be equal to `'fq_pie'`<br>")
    delay: Optional[Annotated[int, Field(le=10000, strict=True, ge=0)]] = Field(default=None, description="The amount of delay (in milliseconds) added to traffic passing through this limiter.<br>")
    plr: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=None, description="The amount of packet loss (in percentage) added to traffic passing through the limiter.<br>")
    buckets: Optional[Annotated[int, Field(le=65535, strict=True, ge=16)]] = Field(default=None, description="The limiter's bucket size (slots).<br>")
    bandwidth: Optional[Annotated[List[TrafficShaperLimiterBandwidthInner], Field(min_length=1, max_length=65535)]] = Field(default=None, description="The bandwidth profiles for this limiter.<br>")
    queue: Optional[Annotated[List[TrafficShaperLimiterQueueInner], Field(min_length=0, max_length=65535)]] = Field(default=None, description="The child queues for this limiter.<br>")
    __properties: ClassVar[List[str]] = ["name", "number", "enabled", "mask", "maskbits", "maskbitsv6", "qlimit", "ecn", "description", "aqm", "sched", "param_codel_target", "param_codel_interval", "param_pie_target", "param_pie_tupdate", "param_pie_alpha", "param_pie_beta", "param_pie_max_burst", "param_pie_max_ecnth", "pie_onoff", "pie_capdrop", "pie_qdelay", "pie_pderand", "param_red_w_q", "param_red_min_th", "param_red_max_th", "param_red_max_p", "param_gred_w_q", "param_gred_min_th", "param_gred_max_th", "param_gred_max_p", "param_fq_codel_target", "param_fq_codel_interval", "param_fq_codel_quantum", "param_fq_codel_limit", "param_fq_codel_flows", "param_fq_pie_target", "param_fq_pie_tupdate", "param_fq_pie_alpha", "param_fq_pie_beta", "param_fq_pie_max_burst", "param_fq_pie_max_ecnth", "param_fq_pie_quantum", "param_fq_pie_limit", "param_fq_pie_flows", "delay", "plr", "buckets", "bandwidth", "queue"]

    @field_validator('mask')
    def mask_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['none', 'srcaddress', 'dstaddress']):
            raise ValueError("must be one of enum values ('none', 'srcaddress', 'dstaddress')")
        return value

    @field_validator('aqm')
    def aqm_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['droptail', 'codel', 'pie', 'red', 'gred']):
            raise ValueError("must be one of enum values ('droptail', 'codel', 'pie', 'red', 'gred')")
        return value

    @field_validator('sched')
    def sched_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['wf2q+', 'fifo', 'qfq', 'rr', 'prio', 'fq_codel', 'fq_pie']):
            raise ValueError("must be one of enum values ('wf2q+', 'fifo', 'qfq', 'rr', 'prio', 'fq_codel', 'fq_pie')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrafficShaperLimiter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "number",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bandwidth (list)
        _items = []
        if self.bandwidth:
            for _item_bandwidth in self.bandwidth:
                if _item_bandwidth:
                    _items.append(_item_bandwidth.to_dict())
            _dict['bandwidth'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in queue (list)
        _items = []
        if self.queue:
            for _item_queue in self.queue:
                if _item_queue:
                    _items.append(_item_queue.to_dict())
            _dict['queue'] = _items
        # set to None if number (nullable) is None
        # and model_fields_set contains the field
        if self.number is None and "number" in self.model_fields_set:
            _dict['number'] = None

        # set to None if qlimit (nullable) is None
        # and model_fields_set contains the field
        if self.qlimit is None and "qlimit" in self.model_fields_set:
            _dict['qlimit'] = None

        # set to None if param_fq_codel_quantum (nullable) is None
        # and model_fields_set contains the field
        if self.param_fq_codel_quantum is None and "param_fq_codel_quantum" in self.model_fields_set:
            _dict['param_fq_codel_quantum'] = None

        # set to None if param_fq_codel_limit (nullable) is None
        # and model_fields_set contains the field
        if self.param_fq_codel_limit is None and "param_fq_codel_limit" in self.model_fields_set:
            _dict['param_fq_codel_limit'] = None

        # set to None if param_fq_codel_flows (nullable) is None
        # and model_fields_set contains the field
        if self.param_fq_codel_flows is None and "param_fq_codel_flows" in self.model_fields_set:
            _dict['param_fq_codel_flows'] = None

        # set to None if param_fq_pie_quantum (nullable) is None
        # and model_fields_set contains the field
        if self.param_fq_pie_quantum is None and "param_fq_pie_quantum" in self.model_fields_set:
            _dict['param_fq_pie_quantum'] = None

        # set to None if param_fq_pie_limit (nullable) is None
        # and model_fields_set contains the field
        if self.param_fq_pie_limit is None and "param_fq_pie_limit" in self.model_fields_set:
            _dict['param_fq_pie_limit'] = None

        # set to None if param_fq_pie_flows (nullable) is None
        # and model_fields_set contains the field
        if self.param_fq_pie_flows is None and "param_fq_pie_flows" in self.model_fields_set:
            _dict['param_fq_pie_flows'] = None

        # set to None if delay (nullable) is None
        # and model_fields_set contains the field
        if self.delay is None and "delay" in self.model_fields_set:
            _dict['delay'] = None

        # set to None if plr (nullable) is None
        # and model_fields_set contains the field
        if self.plr is None and "plr" in self.model_fields_set:
            _dict['plr'] = None

        # set to None if buckets (nullable) is None
        # and model_fields_set contains the field
        if self.buckets is None and "buckets" in self.model_fields_set:
            _dict['buckets'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrafficShaperLimiter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "number": obj.get("number") if obj.get("number") is not None else 1,
            "enabled": obj.get("enabled"),
            "mask": obj.get("mask") if obj.get("mask") is not None else 'none',
            "maskbits": obj.get("maskbits") if obj.get("maskbits") is not None else 32,
            "maskbitsv6": obj.get("maskbitsv6") if obj.get("maskbitsv6") is not None else 128,
            "qlimit": obj.get("qlimit"),
            "ecn": obj.get("ecn"),
            "description": obj.get("description"),
            "aqm": obj.get("aqm"),
            "sched": obj.get("sched"),
            "param_codel_target": obj.get("param_codel_target"),
            "param_codel_interval": obj.get("param_codel_interval"),
            "param_pie_target": obj.get("param_pie_target"),
            "param_pie_tupdate": obj.get("param_pie_tupdate"),
            "param_pie_alpha": obj.get("param_pie_alpha"),
            "param_pie_beta": obj.get("param_pie_beta"),
            "param_pie_max_burst": obj.get("param_pie_max_burst"),
            "param_pie_max_ecnth": obj.get("param_pie_max_ecnth"),
            "pie_onoff": obj.get("pie_onoff"),
            "pie_capdrop": obj.get("pie_capdrop"),
            "pie_qdelay": obj.get("pie_qdelay"),
            "pie_pderand": obj.get("pie_pderand"),
            "param_red_w_q": obj.get("param_red_w_q") if obj.get("param_red_w_q") is not None else 1,
            "param_red_min_th": obj.get("param_red_min_th"),
            "param_red_max_th": obj.get("param_red_max_th") if obj.get("param_red_max_th") is not None else 1,
            "param_red_max_p": obj.get("param_red_max_p") if obj.get("param_red_max_p") is not None else 1,
            "param_gred_w_q": obj.get("param_gred_w_q") if obj.get("param_gred_w_q") is not None else 1,
            "param_gred_min_th": obj.get("param_gred_min_th"),
            "param_gred_max_th": obj.get("param_gred_max_th") if obj.get("param_gred_max_th") is not None else 1,
            "param_gred_max_p": obj.get("param_gred_max_p") if obj.get("param_gred_max_p") is not None else 1,
            "param_fq_codel_target": obj.get("param_fq_codel_target"),
            "param_fq_codel_interval": obj.get("param_fq_codel_interval"),
            "param_fq_codel_quantum": obj.get("param_fq_codel_quantum"),
            "param_fq_codel_limit": obj.get("param_fq_codel_limit"),
            "param_fq_codel_flows": obj.get("param_fq_codel_flows"),
            "param_fq_pie_target": obj.get("param_fq_pie_target"),
            "param_fq_pie_tupdate": obj.get("param_fq_pie_tupdate"),
            "param_fq_pie_alpha": obj.get("param_fq_pie_alpha"),
            "param_fq_pie_beta": obj.get("param_fq_pie_beta"),
            "param_fq_pie_max_burst": obj.get("param_fq_pie_max_burst"),
            "param_fq_pie_max_ecnth": obj.get("param_fq_pie_max_ecnth"),
            "param_fq_pie_quantum": obj.get("param_fq_pie_quantum"),
            "param_fq_pie_limit": obj.get("param_fq_pie_limit"),
            "param_fq_pie_flows": obj.get("param_fq_pie_flows"),
            "delay": obj.get("delay"),
            "plr": obj.get("plr"),
            "buckets": obj.get("buckets"),
            "bandwidth": [TrafficShaperLimiterBandwidthInner.from_dict(_item) for _item in obj["bandwidth"]] if obj.get("bandwidth") is not None else None,
            "queue": [TrafficShaperLimiterQueueInner.from_dict(_item) for _item in obj["queue"]] if obj.get("queue") is not None else None
        })
        return _obj


