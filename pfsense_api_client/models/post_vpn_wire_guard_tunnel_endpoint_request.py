# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from pfsense_api_client.models.wire_guard_tunnel_addresses_inner import WireGuardTunnelAddressesInner
from typing import Optional, Set
from typing_extensions import Self

class PostVPNWireGuardTunnelEndpointRequest(BaseModel):
    """
    PostVPNWireGuardTunnelEndpointRequest
    """ # noqa: E501
    name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The name of the WireGuard interface. This value is automatically assigned by the system and cannot be changed.<br>")
    enabled: Optional[StrictBool] = Field(default=True, description="Enables or disables this tunnels and any associated peers.<br>")
    listenport: Optional[StrictStr] = Field(default='51820', description="The port WireGuard will listen on for this tunnel. Valid options are: a TCP/UDP port number<br>")
    publickey: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The public key for this tunnel. This value is automatically derived from the `privatekey` value and cannot be set manually.<br>")
    privatekey: Annotated[str, Field(min_length=0, strict=True, max_length=1024)] = Field(description="The private key for this tunnel.<br>")
    mtu: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=1420, description="The MTU for this WireGuard tunnel interface. This value is ignored if this tunnel is assigned as a pfSense interface.<br>")
    addresses: Optional[Annotated[List[WireGuardTunnelAddressesInner], Field(min_length=0, max_length=65535)]] = Field(default=None, description="The IPv4 or IPv6 addresses to assign this WireGuard tunnel interface. This field is ignored if this tunnel interface is assigned to an existing pfSense interface object.<br>")
    __properties: ClassVar[List[str]] = ["name", "enabled", "listenport", "publickey", "privatekey", "mtu", "addresses"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostVPNWireGuardTunnelEndpointRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "publickey",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in addresses (list)
        _items = []
        if self.addresses:
            for _item_addresses in self.addresses:
                if _item_addresses:
                    _items.append(_item_addresses.to_dict())
            _dict['addresses'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if publickey (nullable) is None
        # and model_fields_set contains the field
        if self.publickey is None and "publickey" in self.model_fields_set:
            _dict['publickey'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostVPNWireGuardTunnelEndpointRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else True,
            "listenport": obj.get("listenport") if obj.get("listenport") is not None else '51820',
            "publickey": obj.get("publickey"),
            "privatekey": obj.get("privatekey"),
            "mtu": obj.get("mtu") if obj.get("mtu") is not None else 1420,
            "addresses": [WireGuardTunnelAddressesInner.from_dict(_item) for _item in obj["addresses"]] if obj.get("addresses") is not None else None
        })
        return _obj


