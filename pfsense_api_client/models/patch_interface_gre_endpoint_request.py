# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PatchInterfaceGREEndpointRequest(BaseModel):
    """
    PatchInterfaceGREEndpointRequest
    """ # noqa: E501
    var_if: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The pfSense interface interface serving as the local address to be used for the GRE tunnel.<br>", alias="if")
    greif: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The real interface name for this GRE interface.<br>")
    descr: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="A description for this GRE interface.<br>")
    add_static_route: Optional[StrictBool] = Field(default=None, description="Whether to add an explicit static route for the remote inner tunnel address/subnet via the local tunnel address.<br>")
    remote_addr: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The remote address to use for the GRE tunnel.<br>")
    tunnel_local_addr: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The local IPv4 address to use for the GRE tunnel.<br>")
    tunnel_remote_addr: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The remote IPv4 address to use for the GRE tunnel.<br><br>This field is only available when the following conditions are met:<br>- `tunnel_local_addr` must not be equal to `NULL`<br>")
    tunnel_remote_net: Optional[Annotated[int, Field(le=32, strict=True, ge=1)]] = Field(default=32, description="The remote IPv4 subnet bitmask to use for the GRE tunnel.<br><br>This field is only available when the following conditions are met:<br>- `tunnel_local_addr` must not be equal to `NULL`<br>")
    tunnel_local_addr6: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The local IPv6 address to use for the GRE tunnel.<br>")
    tunnel_remote_addr6: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The remote IPv6 address to use for the GRE tunnel.<br><br>This field is only available when the following conditions are met:<br>- `tunnel_local_addr6` must not be equal to `NULL`<br>")
    tunnel_remote_net6: Optional[Annotated[int, Field(le=128, strict=True, ge=1)]] = Field(default=128, description="The remote IPv6 subnet bitmask to use for the GRE tunnel.<br><br>This field is only available when the following conditions are met:<br>- `tunnel_local_addr6` must not be equal to `NULL`<br>")
    id: StrictInt = Field(description="The ID of the object or resource to interact with.")
    __properties: ClassVar[List[str]] = ["if", "greif", "descr", "add_static_route", "remote_addr", "tunnel_local_addr", "tunnel_remote_addr", "tunnel_remote_net", "tunnel_local_addr6", "tunnel_remote_addr6", "tunnel_remote_net6", "id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchInterfaceGREEndpointRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "greif",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if greif (nullable) is None
        # and model_fields_set contains the field
        if self.greif is None and "greif" in self.model_fields_set:
            _dict['greif'] = None

        # set to None if tunnel_local_addr (nullable) is None
        # and model_fields_set contains the field
        if self.tunnel_local_addr is None and "tunnel_local_addr" in self.model_fields_set:
            _dict['tunnel_local_addr'] = None

        # set to None if tunnel_local_addr6 (nullable) is None
        # and model_fields_set contains the field
        if self.tunnel_local_addr6 is None and "tunnel_local_addr6" in self.model_fields_set:
            _dict['tunnel_local_addr6'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchInterfaceGREEndpointRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "if": obj.get("if"),
            "greif": obj.get("greif"),
            "descr": obj.get("descr"),
            "add_static_route": obj.get("add_static_route"),
            "remote_addr": obj.get("remote_addr"),
            "tunnel_local_addr": obj.get("tunnel_local_addr"),
            "tunnel_remote_addr": obj.get("tunnel_remote_addr"),
            "tunnel_remote_net": obj.get("tunnel_remote_net") if obj.get("tunnel_remote_net") is not None else 32,
            "tunnel_local_addr6": obj.get("tunnel_local_addr6"),
            "tunnel_remote_addr6": obj.get("tunnel_remote_addr6"),
            "tunnel_remote_net6": obj.get("tunnel_remote_net6") if obj.get("tunnel_remote_net6") is not None else 128,
            "id": obj.get("id")
        })
        return _obj


