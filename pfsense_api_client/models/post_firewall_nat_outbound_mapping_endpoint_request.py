# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PostFirewallNATOutboundMappingEndpointRequest(BaseModel):
    """
    PostFirewallNATOutboundMappingEndpointRequest
    """ # noqa: E501
    interface: Annotated[str, Field(min_length=0, strict=True, max_length=1024)] = Field(description="The interface on which traffic is matched as it exits the firewall. In most cases this is a WAN-type or another externally-connected interface.<br>")
    protocol: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The protocol this rule should match. Use `null` for any protocol.<br>")
    disabled: Optional[StrictBool] = Field(default=None, description="Disable this outbound NAT rule.<br>")
    nonat: Optional[StrictBool] = Field(default=None, description="Do not NAT traffic matching this rule.<br>")
    nosync: Optional[StrictBool] = Field(default=None, description="Do not sync this rule to HA peers.<br>")
    source: Annotated[str, Field(min_length=0, strict=True, max_length=1024)] = Field(description="The source network this rule should match. Valid value options are: an existing interface, a subnet CIDR, an existing alias, `any`, `(self)`, `pppoe`. The context of this address can be inverted by prefixing the value with `!`. For interface values, the `:ip`  modifier can be appended to the value to use the interface's IP address instead of its entire subnet.<br>")
    source_port: Optional[StrictStr] = Field(default=None, description="The source port this rule should match. Valid options are: a TCP/UDP port number, a TCP/UDP port range separated by `:`, an existing port type firewall alias<br>")
    destination: Annotated[str, Field(min_length=0, strict=True, max_length=1024)] = Field(description="The destination network this rule should match. Valid value options are: an existing interface, a subnet CIDR, an existing alias, `any`, `pppoe`. The context of this address can be inverted by prefixing the value with `!`. For interface values, the `:ip`  modifier can be appended to the value to use the interface's IP address instead of its entire subnet.<br>")
    destination_port: Optional[StrictStr] = Field(default=None, description="The destination port this rule should match. Valid options are: a TCP/UDP port number, a TCP/UDP port range separated by `:`, an existing port type firewall alias<br>")
    target: Annotated[str, Field(min_length=0, strict=True, max_length=1024)] = Field(description="The target network traffic matching this rule should be translated to. Valid value options are: an IP address, an existing alias. For interface values, the `:ip`  modifier can be appended to the value to use the interface's IP address instead of its entire subnet.<br><br>This field is only available when the following conditions are met:<br>- `nonat` must be equal to `false`<br>")
    target_subnet: Optional[Annotated[int, Field(le=128, strict=True, ge=1)]] = Field(default=128, description="The subnet bits for the assigned `target`. This field is only applicable if `target` is set to an IP address. This has no affect for alias or interface `targets`.<br><br>This field is only available when the following conditions are met:<br>- `nonat` must be equal to `false`<br>")
    nat_port: Optional[StrictStr] = Field(default=None, description="The external source port or port range used for rewriting the original source port on connections matching the rule. Valid options are: a TCP/UDP port number, a TCP/UDP port range separated by `:`<br><br>This field is only available when the following conditions are met:<br>- `static_nat_port` must be equal to `false`<br>- `nonat` must be equal to `false`<br>")
    static_nat_port: Optional[StrictBool] = Field(default=None, description="Do not rewrite source port for traffic matching this rule.<br><br>This field is only available when the following conditions are met:<br>- `nonat` must be equal to `false`<br>")
    poolopts: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The pool option used to load balance external IP mapping when `target` is set to a subnet or alias of many addresses. Set to `null` to revert to the system default.<br><br>This field is only available when the following conditions are met:<br>- `nonat` must be equal to `false`<br>")
    source_hash_key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='0x3971d34cd39dfa892480e6beb923e0bd', description="The key that is fed to the hashing algorithm in hex format. This must be a 16 byte (32 character) hex string prefixed with `0x`. If a value is not provided, one will automatically be generated<br><br>This field is only available when the following conditions are met:<br>- `poolopts` must be equal to `'source-hash'`<br>- `nonat` must be equal to `false`<br>")
    descr: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="A description for the outbound NAT mapping.<br>")
    __properties: ClassVar[List[str]] = ["interface", "protocol", "disabled", "nonat", "nosync", "source", "source_port", "destination", "destination_port", "target", "target_subnet", "nat_port", "static_nat_port", "poolopts", "source_hash_key", "descr"]

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['tcp', 'udp', 'tcp/udp', 'icmp', 'esp', 'ah', 'gre', 'ipv6', 'igmp', 'pim', 'ospf']):
            raise ValueError("must be one of enum values ('tcp', 'udp', 'tcp/udp', 'icmp', 'esp', 'ah', 'gre', 'ipv6', 'igmp', 'pim', 'ospf')")
        return value

    @field_validator('poolopts')
    def poolopts_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['round-robin', 'round-robin sticky-address', 'random', 'random sticky-address', 'source-hash', 'bitmask']):
            raise ValueError("must be one of enum values ('round-robin', 'round-robin sticky-address', 'random', 'random sticky-address', 'source-hash', 'bitmask')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostFirewallNATOutboundMappingEndpointRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if protocol (nullable) is None
        # and model_fields_set contains the field
        if self.protocol is None and "protocol" in self.model_fields_set:
            _dict['protocol'] = None

        # set to None if source_port (nullable) is None
        # and model_fields_set contains the field
        if self.source_port is None and "source_port" in self.model_fields_set:
            _dict['source_port'] = None

        # set to None if destination_port (nullable) is None
        # and model_fields_set contains the field
        if self.destination_port is None and "destination_port" in self.model_fields_set:
            _dict['destination_port'] = None

        # set to None if poolopts (nullable) is None
        # and model_fields_set contains the field
        if self.poolopts is None and "poolopts" in self.model_fields_set:
            _dict['poolopts'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostFirewallNATOutboundMappingEndpointRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "interface": obj.get("interface"),
            "protocol": obj.get("protocol"),
            "disabled": obj.get("disabled"),
            "nonat": obj.get("nonat"),
            "nosync": obj.get("nosync"),
            "source": obj.get("source"),
            "source_port": obj.get("source_port"),
            "destination": obj.get("destination"),
            "destination_port": obj.get("destination_port"),
            "target": obj.get("target"),
            "target_subnet": obj.get("target_subnet") if obj.get("target_subnet") is not None else 128,
            "nat_port": obj.get("nat_port"),
            "static_nat_port": obj.get("static_nat_port"),
            "poolopts": obj.get("poolopts"),
            "source_hash_key": obj.get("source_hash_key") if obj.get("source_hash_key") is not None else '0x3971d34cd39dfa892480e6beb923e0bd',
            "descr": obj.get("descr")
        })
        return _obj


