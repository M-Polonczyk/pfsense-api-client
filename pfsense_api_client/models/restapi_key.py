# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class RESTAPIKey(BaseModel):
    """
    RESTAPIKey
    """ # noqa: E501
    descr: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=128)]] = Field(default=None, description="Sets a description for this API key. This is used to identify the key's purpose and cannot be changed once created.<br>")
    username: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The username this API key is issued to.<br>")
    hash_algo: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='sha256', description="The hash algorithm used for this API key. It is recommended to increase the strength of the algorithm for keys assigned to privileged users.<br>")
    length_bytes: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=24, description="The length of the API key (in bytes). Greater key lengths provide greater security, but also increase the number of characters used in the key string.<br>")
    hash: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The hash of the generated API key<br>")
    key: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The real API key. This value is not stored internally and cannot be recovered if lost.<br>")
    __properties: ClassVar[List[str]] = ["descr", "username", "hash_algo", "length_bytes", "hash", "key"]

    @field_validator('hash_algo')
    def hash_algo_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['sha256', 'sha384', 'sha512']):
            raise ValueError("must be one of enum values ('sha256', 'sha384', 'sha512')")
        return value

    @field_validator('length_bytes')
    def length_bytes_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([16, 24, 32, 64]):
            raise ValueError("must be one of enum values (16, 24, 32, 64)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RESTAPIKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "username",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if username (nullable) is None
        # and model_fields_set contains the field
        if self.username is None and "username" in self.model_fields_set:
            _dict['username'] = None

        # set to None if hash (nullable) is None
        # and model_fields_set contains the field
        if self.hash is None and "hash" in self.model_fields_set:
            _dict['hash'] = None

        # set to None if key (nullable) is None
        # and model_fields_set contains the field
        if self.key is None and "key" in self.model_fields_set:
            _dict['key'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RESTAPIKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "descr": obj.get("descr"),
            "username": obj.get("username"),
            "hash_algo": obj.get("hash_algo") if obj.get("hash_algo") is not None else 'sha256',
            "length_bytes": obj.get("length_bytes") if obj.get("length_bytes") is not None else 24,
            "hash": obj.get("hash"),
            "key": obj.get("key")
        })
        return _obj


