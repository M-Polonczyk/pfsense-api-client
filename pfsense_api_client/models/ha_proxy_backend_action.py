# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class HAProxyBackendAction(BaseModel):
    """
    HAProxyBackendAction
    """ # noqa: E501
    action: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The action to take when an ACL match is found.<br>")
    acl: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The name of the backend ACL this action is associated with.<br>")
    server: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The backend server to use when an ACL match is found.<br><br>This field is only available when the following conditions are met:<br>- `action` must be equal to `'use_server'`<br>")
    customaction: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The custom action to take when an ACL match is found.<br><br>This field is only available when the following conditions are met:<br>- `action` must be equal to `'custom'`<br>")
    deny_status: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The deny status to use when an ACL match is found.<br><br>This field is only available when the following conditions are met:<br>- `action` must be one of [ http-request_deny, http-request_tarpit ]<br>")
    realm: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The authentication realm to use when an ACL match is found.<br><br>This field is only available when the following conditions are met:<br>- `action` must be equal to `'http-request_auth'`<br>")
    rule: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The redirect rule to use when an ACL match is found.<br><br>This field is only available when the following conditions are met:<br>- `action` must be equal to `'http-request_redirect'`<br>")
    lua_function: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The Lua function to use when an ACL match is found.<br><br>This field is only available when the following conditions are met:<br>- `action` must be one of [ http-request_lua, http-request_use-service, http-response_lua, tcp-request_content_lua, tcp-request_content_use-service, tcp-response_content_lua ]<br>")
    name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The name to use when an ACL match is found.<br><br>This field is only available when the following conditions are met:<br>- `action` must be one of [ http-request_add-header, http-request_set-header, http-request_del-header, http-request_replace-header, http-request_replace-value, http-response_add-header, http-response_set-header, http-response_del-header, http-response_replace-header, http-response_replace-value, http-after-response_add-header, http-after-response_set-header, http-after-response_del-header, http-after-response_replace-header, http-after-response_replace-value ]<br>")
    fmt: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The fmt value to use when an ACL match is found.<br><br>This field is only available when the following conditions are met:<br>- `action` must be one of [ http-request_add-header, http-request_set-header, http-request_set-method, http-request_set-path, http-request_set-query, http-request_set-uri, http-response_add-header, http-response_set-header, http-after-response_add-header, http-after-response_set-header ]<br>")
    find: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The value to find when an ACL match is found.<br><br>This field is only available when the following conditions are met:<br>- `action` must be one of [ http-request_replace-header, http-request_replace-value, http-response_replace-header, http-request_replace-path, http-response_replace-value, http-after-response_replace-header, http-after-response_replace-value ]<br>")
    replace: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The value to replace with when an ACL match is found.<br><br>This field is only available when the following conditions are met:<br>- `action` must be one of [ http-request_replace-header, http-request_replace-value, http-request_replace-path, http-response_replace-header, http-response_replace-value, http-after-response_replace-header, http-after-response_replace-value ]<br>")
    path: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The path to use when an ACL match is found.<br><br>This field is only available when the following conditions are met:<br>- `action` must be equal to `'http-request_replace-path'`<br>")
    status: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The status to use when an ACL match is found.<br><br>This field is only available when the following conditions are met:<br>- `action` must be one of [ http-response_set-status, http-after-response_set-status ]<br>")
    reason: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The status reason to use when an ACL match is found.<br><br>This field is only available when the following conditions are met:<br>- `action` must be one of [ http-response_set-status, http-after-response_set-status ]<br>")
    __properties: ClassVar[List[str]] = ["action", "acl", "server", "customaction", "deny_status", "realm", "rule", "lua_function", "name", "fmt", "find", "replace", "path", "status", "reason"]

    @field_validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['use_server', 'custom', 'http-request_allow', 'http-request_deny', 'http-request_tarpit', 'http-request_auth', 'http-request_redirect', 'http-request_lua', 'http-request_use-service', 'http-request_add-header', 'http-request_set-header', 'http-request_del-header', 'http-request_replace-header', 'http-request_replace-path', 'http-request_replace-value', 'http-request_set-method', 'http-request_set-path', 'http-request_set-query', 'http-request_set-uri', 'http-response_allow', 'http-response_deny', 'http-response_lua', 'http-response_add-header', 'http-response_set-header', 'http-response_del-header', 'http-response_replace-header', 'http-response_replace-value', 'http-response_set-status', 'http-after-response_add-header', 'http-after-response_set-header', 'http-after-response_del-header', 'http-after-response_replace-header', 'http-after-response_replace-value', 'http-after-response_set-status', 'tcp-request_connection_accept', 'tcp-request_connection_reject', 'tcp-request_content_accept', 'tcp-request_content_reject', 'tcp-request_content_lua', 'tcp-request_content_use-service', 'tcp-response_content_accept', 'tcp-response_content_close', 'tcp-response_content_reject', 'tcp-response_content_lua']):
            raise ValueError("must be one of enum values ('use_server', 'custom', 'http-request_allow', 'http-request_deny', 'http-request_tarpit', 'http-request_auth', 'http-request_redirect', 'http-request_lua', 'http-request_use-service', 'http-request_add-header', 'http-request_set-header', 'http-request_del-header', 'http-request_replace-header', 'http-request_replace-path', 'http-request_replace-value', 'http-request_set-method', 'http-request_set-path', 'http-request_set-query', 'http-request_set-uri', 'http-response_allow', 'http-response_deny', 'http-response_lua', 'http-response_add-header', 'http-response_set-header', 'http-response_del-header', 'http-response_replace-header', 'http-response_replace-value', 'http-response_set-status', 'http-after-response_add-header', 'http-after-response_set-header', 'http-after-response_del-header', 'http-after-response_replace-header', 'http-after-response_replace-value', 'http-after-response_set-status', 'tcp-request_connection_accept', 'tcp-request_connection_reject', 'tcp-request_content_accept', 'tcp-request_content_reject', 'tcp-request_content_lua', 'tcp-request_content_use-service', 'tcp-response_content_accept', 'tcp-response_content_close', 'tcp-response_content_reject', 'tcp-response_content_lua')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HAProxyBackendAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HAProxyBackendAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "acl": obj.get("acl"),
            "server": obj.get("server"),
            "customaction": obj.get("customaction"),
            "deny_status": obj.get("deny_status"),
            "realm": obj.get("realm"),
            "rule": obj.get("rule"),
            "lua_function": obj.get("lua_function"),
            "name": obj.get("name"),
            "fmt": obj.get("fmt"),
            "find": obj.get("find"),
            "replace": obj.get("replace"),
            "path": obj.get("path"),
            "status": obj.get("status"),
            "reason": obj.get("reason")
        })
        return _obj


