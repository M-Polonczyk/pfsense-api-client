# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from pfsense_api_client.models.bind_zone_records_inner import BINDZoneRecordsInner
from typing import Optional, Set
from typing_extensions import Self

class BINDZone(BaseModel):
    """
    BINDZone
    """ # noqa: E501
    disabled: Optional[StrictBool] = Field(default=None, description="Disable this BIND zone.<br>")
    name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The name of this BIND zone.<br>")
    description: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="A description for this BIND zone.<br>")
    type: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='master', description="The type of this BIND zone.<br>")
    view: Optional[Annotated[List[StrictStr], Field(min_length=0, max_length=128)]] = Field(default=None, description="The views this BIND zone belongs to.<br>")
    reversev4: Optional[StrictBool] = Field(default=None, description="Enable reverse DNS for this BIND zone.<br><br>This field is only available when the following conditions are met:<br>- `type` must be one of [ master, slave ]<br>")
    reversev6: Optional[StrictBool] = Field(default=None, description="Enable reverse IPv6 DNS for this BIND zone.<br><br>This field is only available when the following conditions are met:<br>- `type` must be one of [ master, slave ]<br>")
    rpz: Optional[StrictBool] = Field(default=None, description="Enable this zone as part of a response policy.<br><br>This field is only available when the following conditions are met:<br>- `type` must be one of [ master, slave ]<br>")
    custom: Optional[StrictStr] = Field(default=None, description="Custom BIND options for this BIND zone.<br>")
    dnssec: Optional[StrictBool] = Field(default=None, description="Enable DNSSEC for this BIND zone.<br><br>This field is only available when the following conditions are met:<br>- `type` must be one of [ master, slave ]<br>")
    backupkeys: Optional[StrictBool] = Field(default=None, description="Enable backing up DNSSEC keys in the XML configuration for this BIND zone.<br><br>This field is only available when the following conditions are met:<br>- `dnssec` must be equal to `true`<br>")
    slaveip: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The IP address of the slave server for this BIND zone.<br><br>This field is only available when the following conditions are met:<br>- `type` must be equal to `'slave'`<br>")
    forwarders: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]], Field(min_length=0, max_length=128)]] = Field(default=None, description="The forwarders for this BIND zone.<br><br>This field is only available when the following conditions are met:<br>- `type` must be equal to `'forward'`<br>")
    ttl: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The default TTL interval (in seconds) for records within this BIND zone without a specific TTL.<br><br>This field is only available when the following conditions are met:<br>- `type` must be equal to `'master'`<br>")
    baseip: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The IP address of the base domain for this zone. This sets an A record for the base domain.<br><br>This field is only available when the following conditions are met:<br>- `type` must be equal to `'master'`<br>")
    nameserver: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The SOA nameserver for this zone.<br><br>This field is only available when the following conditions are met:<br>- `type` must be one of [ master, redirect ]<br>")
    mail: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The SOA email address (RNAME) for this zone. This must be in an FQDN format.<br><br>This field is only available when the following conditions are met:<br>- `type` must be one of [ master, redirect ]<br>")
    serial: Optional[Annotated[int, Field(le=99999999999999, strict=True, ge=0)]] = Field(default=None, description="The SOA serial number for this zone.<br><br>This field is only available when the following conditions are met:<br>- `type` must be one of [ master, redirect ]<br>")
    refresh: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The SOA refresh interval for this zone. TTL-style time-unit suffixes are supported (e.g. 1h, 1d, 1w), otherwise time in seconds is assumed.<br><br>This field is only available when the following conditions are met:<br>- `type` must be one of [ master, redirect ]<br>")
    retry: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The SOA retry interval for this zone. TTL-style time-unit suffixes are supported (e.g. 1h, 1d, 1w), otherwise time in seconds is assumed.<br><br>This field is only available when the following conditions are met:<br>- `type` must be one of [ master, redirect ]<br>")
    expire: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The SOA expiry interval for this zone. TTL-style time-unit suffixes are supported (e.g. 1h, 1d, 1w), otherwise time in seconds is assumed.<br><br>This field is only available when the following conditions are met:<br>- `type` must be one of [ master, redirect ]<br>")
    minimum: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The SOA minimum TTL interval (in seconds) for this zone. This is also referred to as the negative TTL. TTL-style time-unit suffixes are supported (e.g. 1h, 1d, 1w), otherwise time in seconds is assumed.<br><br>This field is only available when the following conditions are met:<br>- `type` must be one of [ master, redirect ]<br>")
    enable_updatepolicy: Optional[StrictBool] = Field(default=None, description="Enable a specific dynamic update policy for this BIND zone.<br><br>This field is only available when the following conditions are met:<br>- `type` must be equal to `'master'`<br>")
    updatepolicy: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The update policy for this BIND zone.<br><br>This field is only available when the following conditions are met:<br>- `type` must be equal to `'master'`<br>- `enable_updatepolicy` must be equal to `true`<br>")
    allowupdate: Optional[Annotated[List[StrictStr], Field(min_length=0, max_length=128)]] = Field(default=None, description="The access lists that are allowed to submit dynamic updates for 'master' zones (e.g. dynamic DNS).<br><br>This field is only available when the following conditions are met:<br>- `type` must be equal to `'master'`<br>- `enable_updatepolicy` must be equal to `false`<br>")
    allowtransfer: Optional[Annotated[List[StrictStr], Field(min_length=0, max_length=128)]] = Field(default=None, description="The access lists that are allowed to transfer this BIND zone.<br><br>This field is only available when the following conditions are met:<br>- `type` must be equal to `'master'`<br>")
    allowquery: Optional[Annotated[List[StrictStr], Field(min_length=0, max_length=128)]] = Field(default=None, description="The access lists that are allowed to query this BIND zone.<br>")
    regdhcpstatic: Optional[StrictBool] = Field(default=None, description="Register DHCP static mappings as records in this BIND zone.<br>")
    customzonerecords: Optional[StrictStr] = Field(default=None, description="Custom records for this BIND zone.<br>")
    records: Optional[Annotated[List[BINDZoneRecordsInner], Field(min_length=0, max_length=65535)]] = Field(default=None, description="The records for this BIND zone.<br>")
    __properties: ClassVar[List[str]] = ["disabled", "name", "description", "type", "view", "reversev4", "reversev6", "rpz", "custom", "dnssec", "backupkeys", "slaveip", "forwarders", "ttl", "baseip", "nameserver", "mail", "serial", "refresh", "retry", "expire", "minimum", "enable_updatepolicy", "updatepolicy", "allowupdate", "allowtransfer", "allowquery", "regdhcpstatic", "customzonerecords", "records"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['master', 'slave', 'forward', 'redirect']):
            raise ValueError("must be one of enum values ('master', 'slave', 'forward', 'redirect')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BINDZone from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in records (list)
        _items = []
        if self.records:
            for _item_records in self.records:
                if _item_records:
                    _items.append(_item_records.to_dict())
            _dict['records'] = _items
        # set to None if ttl (nullable) is None
        # and model_fields_set contains the field
        if self.ttl is None and "ttl" in self.model_fields_set:
            _dict['ttl'] = None

        # set to None if refresh (nullable) is None
        # and model_fields_set contains the field
        if self.refresh is None and "refresh" in self.model_fields_set:
            _dict['refresh'] = None

        # set to None if retry (nullable) is None
        # and model_fields_set contains the field
        if self.retry is None and "retry" in self.model_fields_set:
            _dict['retry'] = None

        # set to None if expire (nullable) is None
        # and model_fields_set contains the field
        if self.expire is None and "expire" in self.model_fields_set:
            _dict['expire'] = None

        # set to None if minimum (nullable) is None
        # and model_fields_set contains the field
        if self.minimum is None and "minimum" in self.model_fields_set:
            _dict['minimum'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BINDZone from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disabled": obj.get("disabled"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "type": obj.get("type") if obj.get("type") is not None else 'master',
            "view": obj.get("view"),
            "reversev4": obj.get("reversev4"),
            "reversev6": obj.get("reversev6"),
            "rpz": obj.get("rpz"),
            "custom": obj.get("custom"),
            "dnssec": obj.get("dnssec"),
            "backupkeys": obj.get("backupkeys"),
            "slaveip": obj.get("slaveip"),
            "forwarders": obj.get("forwarders"),
            "ttl": obj.get("ttl"),
            "baseip": obj.get("baseip"),
            "nameserver": obj.get("nameserver"),
            "mail": obj.get("mail"),
            "serial": obj.get("serial"),
            "refresh": obj.get("refresh"),
            "retry": obj.get("retry"),
            "expire": obj.get("expire"),
            "minimum": obj.get("minimum"),
            "enable_updatepolicy": obj.get("enable_updatepolicy"),
            "updatepolicy": obj.get("updatepolicy"),
            "allowupdate": obj.get("allowupdate"),
            "allowtransfer": obj.get("allowtransfer"),
            "allowquery": obj.get("allowquery"),
            "regdhcpstatic": obj.get("regdhcpstatic"),
            "customzonerecords": obj.get("customzonerecords"),
            "records": [BINDZoneRecordsInner.from_dict(_item) for _item in obj["records"]] if obj.get("records") is not None else None
        })
        return _obj


