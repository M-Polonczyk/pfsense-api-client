# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class DNSResolverSettings(BaseModel):
    """
    DNSResolverSettings
    """ # noqa: E501
    enable: Optional[StrictBool] = Field(default=None, description="Enables or disables the DNS Resolver service.<br>")
    port: Optional[StrictStr] = Field(default='53', description="The port on which the DNS Resolver service listens. Valid options are: a TCP/UDP port number<br>")
    enablessl: Optional[StrictBool] = Field(default=None, description="Enables or disables SSL/TLS for the DNS Resolver service.<br>")
    sslcertref: Optional[StrictStr] = Field(default=None, description="The SSL/TLS certificate to use for the DNS Resolver service.<br><br>This field is only available when the following conditions are met:<br>- `enablessl` must be equal to `true`<br>")
    tlsport: Optional[StrictStr] = Field(default='853', description="The port on which the DNS Resolver service listens for SSL/TLS connections. Valid options are: a TCP/UDP port number<br><br>This field is only available when the following conditions are met:<br>- `enablessl` must be equal to `true`<br>")
    active_interface: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]], Field(min_length=0, max_length=128)]] = Field(default=None, description="The interface on which the DNS Resolver service listens for DNS queries. Set empty value \".                 \"to listen on all interfaces.<br>")
    outgoing_interface: Optional[Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]], Field(min_length=0, max_length=128)]] = Field(default=None, description="The interface on which the DNS Resolver service sends outgoing DNS queries. Set empty value \".                 \"to use any interface.<br>")
    strictout: Optional[StrictBool] = Field(default=None, description="Enables or disables sending recursive queries if none of the selected Outgoing Network \".                 \"Interfaces are available.<br>")
    system_domain_local_zone_type: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='transparent', description="The type of local zone used for the system domain.<br>")
    dnssec: Optional[StrictBool] = Field(default=None, description="Enables or disables DNSSEC validation.<br>")
    python: Optional[StrictBool] = Field(default=None, description="Enables or disables the Python module.<br>")
    python_order: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='pre_validator', description="The order in which the Python module is loaded.<br><br>This field is only available when the following conditions are met:<br>- `python` must be equal to `true`<br>")
    python_script: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="The Python module to utilize.<br><br>This field is only available when the following conditions are met:<br>- `python` must be equal to `true`<br>")
    forwarding: Optional[StrictBool] = Field(default=None, description="Enables or disables DNS Resolver forwarding mode.<br>")
    regdhcp: Optional[StrictBool] = Field(default=None, description="Enables or disables registering DHCP leases in the DNS Resolver service.<br>")
    regdhcpstatic: Optional[StrictBool] = Field(default=None, description="Enables or disables registering static DHCP mappings in the DNS Resolver service.<br>")
    regovpnclients: Optional[StrictBool] = Field(default=None, description="Enables or disables registering OpenVPN clients in the DNS Resolver service.<br>")
    custom_options: Optional[StrictStr] = Field(default=None, description="Custom options to add to the DNS Resolver configuration.<br>")
    __properties: ClassVar[List[str]] = ["enable", "port", "enablessl", "sslcertref", "tlsport", "active_interface", "outgoing_interface", "strictout", "system_domain_local_zone_type", "dnssec", "python", "python_order", "python_script", "forwarding", "regdhcp", "regdhcpstatic", "regovpnclients", "custom_options"]

    @field_validator('system_domain_local_zone_type')
    def system_domain_local_zone_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['deny', 'refuse', 'static', 'transparent', 'typetransparent', 'redirect', 'inform', 'inform_deny', 'nodefault']):
            raise ValueError("must be one of enum values ('deny', 'refuse', 'static', 'transparent', 'typetransparent', 'redirect', 'inform', 'inform_deny', 'nodefault')")
        return value

    @field_validator('python_order')
    def python_order_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['pre_validator', 'post_validator']):
            raise ValueError("must be one of enum values ('pre_validator', 'post_validator')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DNSResolverSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DNSResolverSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enable": obj.get("enable"),
            "port": obj.get("port") if obj.get("port") is not None else '53',
            "enablessl": obj.get("enablessl"),
            "sslcertref": obj.get("sslcertref"),
            "tlsport": obj.get("tlsport") if obj.get("tlsport") is not None else '853',
            "active_interface": obj.get("active_interface"),
            "outgoing_interface": obj.get("outgoing_interface"),
            "strictout": obj.get("strictout"),
            "system_domain_local_zone_type": obj.get("system_domain_local_zone_type") if obj.get("system_domain_local_zone_type") is not None else 'transparent',
            "dnssec": obj.get("dnssec"),
            "python": obj.get("python"),
            "python_order": obj.get("python_order") if obj.get("python_order") is not None else 'pre_validator',
            "python_script": obj.get("python_script"),
            "forwarding": obj.get("forwarding"),
            "regdhcp": obj.get("regdhcp"),
            "regdhcpstatic": obj.get("regdhcpstatic"),
            "regovpnclients": obj.get("regovpnclients"),
            "custom_options": obj.get("custom_options")
        })
        return _obj


