# coding: utf-8

"""
    pfSense REST API Documentation

    ### Getting Started<br>- [Authentication and Authorization](https://pfrest.org/AUTHENTICATION_AND_AUTHORIZATION/)<br>- [Working with Object IDs](https://pfrest.org/WORKING_WITH_OBJECT_IDS/)<br>- [Queries, Filters, and Sorting](https://pfrest.org/QUERIES_FILTERS_AND_SORTING/)<br>- [Common Control Parameters](https://pfrest.org/COMMON_CONTROL_PARAMETERS/)<br>- [Working with HATEOAS](https://pfrest.org/WORKING_WITH_HATEOAS/)<br>

    The version of the OpenAPI document: v2.4.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PostInterfaceLAGGEndpointRequest(BaseModel):
    """
    PostInterfaceLAGGEndpointRequest
    """ # noqa: E501
    laggif: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=32)]] = Field(default=None, description="The real name of the LAGG interface.<br>")
    descr: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default=None, description="A description to help document the purpose of this LAGG interface.<br>")
    members: Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]], Field(min_length=1, max_length=128)] = Field(description="A list of member interfaces to include in the LAGG.<br>")
    proto: Annotated[str, Field(min_length=0, strict=True, max_length=1024)] = Field(description="The LAGG protocol to use.<br>")
    lacptimeout: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='slow', description="The LACP timeout mode to use.<br><br>This field is only available when the following conditions are met:<br>- `proto` must be equal to `'lacp'`<br>")
    lagghash: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='l2,l3,l4', description="The LAGG hash algorithm to use.<br><br>This field is only available when the following conditions are met:<br>- `proto` must be one of [ lacp, loadbalance ]<br>")
    failovermaster: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=1024)]] = Field(default='auto', description="The failover master interface to use.<br><br>This field is only available when the following conditions are met:<br>- `proto` must be equal to `'failover'`<br>")
    __properties: ClassVar[List[str]] = ["laggif", "descr", "members", "proto", "lacptimeout", "lagghash", "failovermaster"]

    @field_validator('proto')
    def proto_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['lacp', 'failover', 'loadbalance', 'roundrobin', 'none']):
            raise ValueError("must be one of enum values ('lacp', 'failover', 'loadbalance', 'roundrobin', 'none')")
        return value

    @field_validator('lacptimeout')
    def lacptimeout_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['slow', 'fast']):
            raise ValueError("must be one of enum values ('slow', 'fast')")
        return value

    @field_validator('lagghash')
    def lagghash_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['l2', 'l3', 'l4', 'l2,l3', 'l2,l4', 'l3,l4', 'l2,l3,l4']):
            raise ValueError("must be one of enum values ('l2', 'l3', 'l4', 'l2,l3', 'l2,l4', 'l3,l4', 'l2,l3,l4')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostInterfaceLAGGEndpointRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "laggif",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if laggif (nullable) is None
        # and model_fields_set contains the field
        if self.laggif is None and "laggif" in self.model_fields_set:
            _dict['laggif'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostInterfaceLAGGEndpointRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "laggif": obj.get("laggif"),
            "descr": obj.get("descr"),
            "members": obj.get("members"),
            "proto": obj.get("proto"),
            "lacptimeout": obj.get("lacptimeout") if obj.get("lacptimeout") is not None else 'slow',
            "lagghash": obj.get("lagghash") if obj.get("lagghash") is not None else 'l2,l3,l4',
            "failovermaster": obj.get("failovermaster") if obj.get("failovermaster") is not None else 'auto'
        })
        return _obj


